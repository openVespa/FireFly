
FFmini_HID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000029e0  00002a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029e0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000169  00800110  00800110  00002aa4  2**0
                  ALLOC
  3 .noinit       00000004  00800279  00800279  00002aa4  2**0
                  ALLOC
  4 .eeprom       00000196  00810000  00810000  00002aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         00000d44  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000052b  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      0000002f  00000000  00000000  00003eab  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000840  00000000  00000000  00003eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000df5d  00000000  00000000  0000471a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000033e5  00000000  00000000  00012677  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019dc6  00000000  00000000  00015a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001528  00000000  00000000  0002f824  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000166eb  00000000  00000000  00030d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009cdc  00000000  00000000  00047437  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  00051113  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000acad  00000000  00000000  000521e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_2>
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	a3 c0       	rjmp	.+326    	; 0x170 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_11>
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_15>
      40:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_16>
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__vector_18>
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_21>
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_23>
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_25>
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
	...

00000074 <ProductString>:
      74:	0e 03 46 00 46 00 6d 00 69 00 6e 00 69 00 00 00     ..F.F.m.i.n.i...

00000084 <ManufacturerString>:
      84:	14 03 6f 00 70 00 65 00 6e 00 56 00 65 00 73 00     ..o.p.e.n.V.e.s.
      94:	70 00 61 00 00 00                                   p.a...

0000009a <LanguageString>:
      9a:	04 03 09 04                                         ....

0000009e <ConfigurationDescriptor>:
      9e:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      ae:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 20     ...!...." ..... 
      be:	00 01                                               ..

000000c0 <DeviceDescriptor>:
      c0:	12 01 10 01 00 00 00 20 eb 03 4f 20 01 00 01 02     ....... ..O ....
      d0:	00 01                                               ..

000000d2 <GenericReport>:
      d2:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
      e2:	20 81 02 09 03 15 00 25 ff 75 08 95 20 91 02 c0      ......%.u.. ...

000000f2 <hex_map>:
      f2:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d2 e0       	ldi	r29, 0x02	; 2
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61

0000010e <Bootloader_Jump_Check>:

void Bootloader_Jump_Check(void) ATTR_INIT_SECTION(3);
void Bootloader_Jump_Check(void)
{
	// If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
	if ((MCUSR & (1 << WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))
     10e:	04 b6       	in	r0, 0x34	; 52
     110:	03 fe       	sbrs	r0, 3
     112:	18 c0       	rjmp	.+48     	; 0x144 <__do_copy_data>
     114:	80 91 79 02 	lds	r24, 0x0279
     118:	90 91 7a 02 	lds	r25, 0x027A
     11c:	a0 91 7b 02 	lds	r26, 0x027B
     120:	b0 91 7c 02 	lds	r27, 0x027C
     124:	8a 3c       	cpi	r24, 0xCA	; 202
     126:	9c 4a       	sbci	r25, 0xAC	; 172
     128:	a2 44       	sbci	r26, 0x42	; 66
     12a:	bc 4d       	sbci	r27, 0xDC	; 220
     12c:	59 f4       	brne	.+22     	; 0x144 <__do_copy_data>
	{
		Boot_Key = 0;
     12e:	10 92 79 02 	sts	0x0279, r1
     132:	10 92 7a 02 	sts	0x027A, r1
     136:	10 92 7b 02 	sts	0x027B, r1
     13a:	10 92 7c 02 	sts	0x027C, r1
		((void (*)(void))BOOTLOADER_START_ADDRESS)();
     13e:	e0 e0       	ldi	r30, 0x00	; 0
     140:	f8 e1       	ldi	r31, 0x18	; 24
     142:	09 95       	icall

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e0 ee       	ldi	r30, 0xE0	; 224
     14c:	f9 e2       	ldi	r31, 0x29	; 41
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a0 31       	cpi	r26, 0x10	; 16
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	22 e0       	ldi	r18, 0x02	; 2
     15c:	a0 e1       	ldi	r26, 0x10	; 16
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a9 37       	cpi	r26, 0x79	; 121
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	87 d7       	rcall	.+3854   	; 0x107a <main>
     16c:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_default>

00000174 <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     174:	29 2f       	mov	r18, r25
     176:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     178:	23 30       	cpi	r18, 0x03	; 3
     17a:	31 05       	cpc	r19, r1
     17c:	c9 f0       	breq	.+50     	; 0x1b0 <CALLBACK_USB_GetDescriptor+0x3c>
     17e:	44 f4       	brge	.+16     	; 0x190 <CALLBACK_USB_GetDescriptor+0x1c>
     180:	21 30       	cpi	r18, 0x01	; 1
     182:	31 05       	cpc	r19, r1
     184:	09 f4       	brne	.+2      	; 0x188 <CALLBACK_USB_GetDescriptor+0x14>
     186:	39 c0       	rjmp	.+114    	; 0x1fa <CALLBACK_USB_GetDescriptor+0x86>
     188:	22 30       	cpi	r18, 0x02	; 2
     18a:	31 05       	cpc	r19, r1
     18c:	39 f4       	brne	.+14     	; 0x19c <CALLBACK_USB_GetDescriptor+0x28>
     18e:	0b c0       	rjmp	.+22     	; 0x1a6 <CALLBACK_USB_GetDescriptor+0x32>
     190:	21 32       	cpi	r18, 0x21	; 33
     192:	31 05       	cpc	r19, r1
     194:	41 f1       	breq	.+80     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x72>
     196:	22 32       	cpi	r18, 0x22	; 34
     198:	31 05       	cpc	r19, r1
     19a:	51 f1       	breq	.+84     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	33 c0       	rjmp	.+102    	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1a6:	22 e2       	ldi	r18, 0x22	; 34
     1a8:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1aa:	8e e9       	ldi	r24, 0x9E	; 158
     1ac:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1ae:	2e c0       	rjmp	.+92     	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     1b0:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	91 05       	cpc	r25, r1
     1b6:	59 f0       	breq	.+22     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x5a>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	71 f0       	breq	.+28     	; 0x1da <CALLBACK_USB_GetDescriptor+0x66>
     1be:	89 2b       	or	r24, r25
     1c0:	09 f5       	brne	.+66     	; 0x204 <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1c2:	ea e9       	ldi	r30, 0x9A	; 154
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	24 91       	lpm	r18, Z
     1c8:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1ca:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1cc:	1f c0       	rjmp	.+62     	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1ce:	e4 e8       	ldi	r30, 0x84	; 132
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	24 91       	lpm	r18, Z
     1d4:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1d6:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1d8:	19 c0       	rjmp	.+50     	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1da:	e4 e7       	ldi	r30, 0x74	; 116
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	24 91       	lpm	r18, Z
     1e0:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1e2:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1e4:	13 c0       	rjmp	.+38     	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     1e6:	29 e0       	ldi	r18, 0x09	; 9
     1e8:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     1ea:	80 eb       	ldi	r24, 0xB0	; 176
     1ec:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     1ee:	0e c0       	rjmp	.+28     	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     1f0:	20 e2       	ldi	r18, 0x20	; 32
     1f2:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     1f4:	82 ed       	ldi	r24, 0xD2	; 210
     1f6:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(GenericReport);
			break;
     1f8:	09 c0       	rjmp	.+18     	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1fa:	22 e1       	ldi	r18, 0x12	; 18
     1fc:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1fe:	80 ec       	ldi	r24, 0xC0	; 192
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     20c:	fa 01       	movw	r30, r20
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
	return Size;
}
     212:	82 2f       	mov	r24, r18
     214:	93 2f       	mov	r25, r19
     216:	08 95       	ret

00000218 <RingBuffer_Insert>:
	//Serial_SendByte(0x0D);	//	CR
}
void send_ELM327_header()
{
	// ADD HEADERS
	Serial_SendString_P(OBD_header);
     218:	fc 01       	movw	r30, r24
     21a:	a0 81       	ld	r26, Z
     21c:	b1 81       	ldd	r27, Z+1	; 0x01
     21e:	6c 93       	st	X, r22
     220:	80 81       	ld	r24, Z
     222:	91 81       	ldd	r25, Z+1	; 0x01
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	91 83       	std	Z+1, r25	; 0x01
     228:	80 83       	st	Z, r24
     22a:	26 81       	ldd	r18, Z+6	; 0x06
     22c:	37 81       	ldd	r19, Z+7	; 0x07
     22e:	82 17       	cp	r24, r18
     230:	93 07       	cpc	r25, r19
     232:	21 f4       	brne	.+8      	; 0x23c <RingBuffer_Insert+0x24>
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	91 83       	std	Z+1, r25	; 0x01
     23a:	80 83       	st	Z, r24
     23c:	2f b7       	in	r18, 0x3f	; 63
     23e:	f8 94       	cli
     240:	82 85       	ldd	r24, Z+10	; 0x0a
     242:	93 85       	ldd	r25, Z+11	; 0x0b
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	93 87       	std	Z+11, r25	; 0x0b
     248:	82 87       	std	Z+10, r24	; 0x0a
     24a:	2f bf       	out	0x3f, r18	; 63
     24c:	08 95       	ret

0000024e <RingBuffer_Remove>:
     24e:	fc 01       	movw	r30, r24
     250:	a2 81       	ldd	r26, Z+2	; 0x02
     252:	b3 81       	ldd	r27, Z+3	; 0x03
     254:	8d 91       	ld	r24, X+
     256:	b3 83       	std	Z+3, r27	; 0x03
     258:	a2 83       	std	Z+2, r26	; 0x02
     25a:	26 81       	ldd	r18, Z+6	; 0x06
     25c:	37 81       	ldd	r19, Z+7	; 0x07
     25e:	a2 17       	cp	r26, r18
     260:	b3 07       	cpc	r27, r19
     262:	21 f4       	brne	.+8      	; 0x26c <RingBuffer_Remove+0x1e>
     264:	24 81       	ldd	r18, Z+4	; 0x04
     266:	35 81       	ldd	r19, Z+5	; 0x05
     268:	33 83       	std	Z+3, r19	; 0x03
     26a:	22 83       	std	Z+2, r18	; 0x02
     26c:	9f b7       	in	r25, 0x3f	; 63
     26e:	f8 94       	cli
     270:	22 85       	ldd	r18, Z+10	; 0x0a
     272:	33 85       	ldd	r19, Z+11	; 0x0b
     274:	21 50       	subi	r18, 0x01	; 1
     276:	31 09       	sbc	r19, r1
     278:	33 87       	std	Z+11, r19	; 0x0b
     27a:	22 87       	std	Z+10, r18	; 0x0a
     27c:	9f bf       	out	0x3f, r25	; 63
     27e:	08 95       	ret

00000280 <send_ELM327_CR>:
     280:	ec e1       	ldi	r30, 0x1C	; 28
     282:	f2 e0       	ldi	r31, 0x02	; 2
     284:	a0 81       	ld	r26, Z
     286:	b1 81       	ldd	r27, Z+1	; 0x01
     288:	8d e0       	ldi	r24, 0x0D	; 13
     28a:	8c 93       	st	X, r24
     28c:	80 81       	ld	r24, Z
     28e:	91 81       	ldd	r25, Z+1	; 0x01
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	80 83       	st	Z, r24
     296:	26 81       	ldd	r18, Z+6	; 0x06
     298:	37 81       	ldd	r19, Z+7	; 0x07
     29a:	82 17       	cp	r24, r18
     29c:	93 07       	cpc	r25, r19
     29e:	21 f4       	brne	.+8      	; 0x2a8 <send_ELM327_CR+0x28>
     2a0:	84 81       	ldd	r24, Z+4	; 0x04
     2a2:	95 81       	ldd	r25, Z+5	; 0x05
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
     2a8:	2f b7       	in	r18, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	82 85       	ldd	r24, Z+10	; 0x0a
     2ae:	93 85       	ldd	r25, Z+11	; 0x0b
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	93 87       	std	Z+11, r25	; 0x0b
     2b4:	82 87       	std	Z+10, r24	; 0x0a
     2b6:	2f bf       	out	0x3f, r18	; 63
     2b8:	08 95       	ret

000002ba <send_ELM327_OK>:
     2ba:	ec e1       	ldi	r30, 0x1C	; 28
     2bc:	f2 e0       	ldi	r31, 0x02	; 2
     2be:	a0 81       	ld	r26, Z
     2c0:	b1 81       	ldd	r27, Z+1	; 0x01
     2c2:	8f e4       	ldi	r24, 0x4F	; 79
     2c4:	8c 93       	st	X, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	91 83       	std	Z+1, r25	; 0x01
     2ce:	80 83       	st	Z, r24
     2d0:	26 81       	ldd	r18, Z+6	; 0x06
     2d2:	37 81       	ldd	r19, Z+7	; 0x07
     2d4:	82 17       	cp	r24, r18
     2d6:	93 07       	cpc	r25, r19
     2d8:	21 f4       	brne	.+8      	; 0x2e2 <send_ELM327_OK+0x28>
     2da:	84 81       	ldd	r24, Z+4	; 0x04
     2dc:	95 81       	ldd	r25, Z+5	; 0x05
     2de:	91 83       	std	Z+1, r25	; 0x01
     2e0:	80 83       	st	Z, r24
     2e2:	2f b7       	in	r18, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	82 85       	ldd	r24, Z+10	; 0x0a
     2e8:	93 85       	ldd	r25, Z+11	; 0x0b
     2ea:	01 96       	adiw	r24, 0x01	; 1
     2ec:	93 87       	std	Z+11, r25	; 0x0b
     2ee:	82 87       	std	Z+10, r24	; 0x0a
     2f0:	2f bf       	out	0x3f, r18	; 63
     2f2:	ec e1       	ldi	r30, 0x1C	; 28
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	a0 81       	ld	r26, Z
     2f8:	b1 81       	ldd	r27, Z+1	; 0x01
     2fa:	8b e4       	ldi	r24, 0x4B	; 75
     2fc:	8c 93       	st	X, r24
     2fe:	80 81       	ld	r24, Z
     300:	91 81       	ldd	r25, Z+1	; 0x01
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	91 83       	std	Z+1, r25	; 0x01
     306:	80 83       	st	Z, r24
     308:	26 81       	ldd	r18, Z+6	; 0x06
     30a:	37 81       	ldd	r19, Z+7	; 0x07
     30c:	82 17       	cp	r24, r18
     30e:	93 07       	cpc	r25, r19
     310:	21 f4       	brne	.+8      	; 0x31a <__stack+0x1b>
     312:	84 81       	ldd	r24, Z+4	; 0x04
     314:	95 81       	ldd	r25, Z+5	; 0x05
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	80 83       	st	Z, r24
     31a:	2f b7       	in	r18, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	82 85       	ldd	r24, Z+10	; 0x0a
     320:	93 85       	ldd	r25, Z+11	; 0x0b
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	93 87       	std	Z+11, r25	; 0x0b
     326:	82 87       	std	Z+10, r24	; 0x0a
     328:	2f bf       	out	0x3f, r18	; 63
     32a:	aa cf       	rjmp	.-172    	; 0x280 <send_ELM327_CR>

0000032c <send_ELM327_prompt>:
     32c:	ec e1       	ldi	r30, 0x1C	; 28
     32e:	f2 e0       	ldi	r31, 0x02	; 2
     330:	a0 81       	ld	r26, Z
     332:	b1 81       	ldd	r27, Z+1	; 0x01
     334:	8e e3       	ldi	r24, 0x3E	; 62
     336:	8c 93       	st	X, r24
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	91 83       	std	Z+1, r25	; 0x01
     340:	80 83       	st	Z, r24
     342:	26 81       	ldd	r18, Z+6	; 0x06
     344:	37 81       	ldd	r19, Z+7	; 0x07
     346:	82 17       	cp	r24, r18
     348:	93 07       	cpc	r25, r19
     34a:	21 f4       	brne	.+8      	; 0x354 <send_ELM327_prompt+0x28>
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	95 81       	ldd	r25, Z+5	; 0x05
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
     354:	2f b7       	in	r18, 0x3f	; 63
     356:	f8 94       	cli
     358:	82 85       	ldd	r24, Z+10	; 0x0a
     35a:	93 85       	ldd	r25, Z+11	; 0x0b
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	93 87       	std	Z+11, r25	; 0x0b
     360:	82 87       	std	Z+10, r24	; 0x0a
     362:	2f bf       	out	0x3f, r18	; 63
     364:	8d cf       	rjmp	.-230    	; 0x280 <send_ELM327_CR>

00000366 <parse_SER_buffer>:
// ****************************************************************************
//		PARSE OBD BT COMMANDS
// ****************************************************************************

void parse_SER_buffer(uint8_t EGT_H, uint8_t EGT_L, uint8_t CHT_H, uint8_t CHT_L, uint32_t total_time_RPM)
{
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     372:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     374:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     376:	e0 91 52 02 	lds	r30, 0x0252
     37a:	f0 91 53 02 	lds	r31, 0x0253
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     37e:	9f bf       	out	0x3f, r25	; 63
	uint8_t ascii_1;
	uint8_t ascii_2;
	uint8_t ascii_3;
	uint8_t ascii_4;
	
	if( (!(RingBuffer_IsEmpty(&BTtoFF_Buffer))))
     380:	ef 2b       	or	r30, r31
     382:	09 f4       	brne	.+2      	; 0x386 <parse_SER_buffer+0x20>
     384:	f2 c5       	rjmp	.+3044   	; 0xf6a <parse_SER_buffer+0xc04>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     386:	e8 e4       	ldi	r30, 0x48	; 72
     388:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     38a:	a2 81       	ldd	r26, Z+2	; 0x02
     38c:	b3 81       	ldd	r27, Z+3	; 0x03
     38e:	9d 91       	ld	r25, X+

			if (++Buffer->Out == Buffer->End)
     390:	b3 83       	std	Z+3, r27	; 0x03
     392:	a2 83       	std	Z+2, r26	; 0x02
     394:	c6 81       	ldd	r28, Z+6	; 0x06
     396:	d7 81       	ldd	r29, Z+7	; 0x07
     398:	ac 17       	cp	r26, r28
     39a:	bd 07       	cpc	r27, r29
     39c:	21 f4       	brne	.+8      	; 0x3a6 <parse_SER_buffer+0x40>
			  Buffer->Out = Buffer->Start;
     39e:	a4 81       	ldd	r26, Z+4	; 0x04
     3a0:	b5 81       	ldd	r27, Z+5	; 0x05
     3a2:	b3 83       	std	Z+3, r27	; 0x03
     3a4:	a2 83       	std	Z+2, r26	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3a6:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3a8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     3aa:	a2 85       	ldd	r26, Z+10	; 0x0a
     3ac:	b3 85       	ldd	r27, Z+11	; 0x0b
     3ae:	11 97       	sbiw	r26, 0x01	; 1
     3b0:	b3 87       	std	Z+11, r27	; 0x0b
     3b2:	a2 87       	std	Z+10, r26	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3b4:	3f bf       	out	0x3f, r19	; 63
	{
		
		temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
		
		if(temp_ringer == 'A')
     3b6:	91 34       	cpi	r25, 0x41	; 65
     3b8:	09 f0       	breq	.+2      	; 0x3bc <parse_SER_buffer+0x56>
     3ba:	68 c1       	rjmp	.+720    	; 0x68c <parse_SER_buffer+0x326>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     3bc:	e8 e4       	ldi	r30, 0x48	; 72
     3be:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     3c0:	a2 81       	ldd	r26, Z+2	; 0x02
     3c2:	b3 81       	ldd	r27, Z+3	; 0x03
     3c4:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     3c6:	b3 83       	std	Z+3, r27	; 0x03
     3c8:	a2 83       	std	Z+2, r26	; 0x02
     3ca:	86 81       	ldd	r24, Z+6	; 0x06
     3cc:	97 81       	ldd	r25, Z+7	; 0x07
     3ce:	a8 17       	cp	r26, r24
     3d0:	b9 07       	cpc	r27, r25
     3d2:	21 f4       	brne	.+8      	; 0x3dc <parse_SER_buffer+0x76>
			  Buffer->Out = Buffer->Start;
     3d4:	84 81       	ldd	r24, Z+4	; 0x04
     3d6:	95 81       	ldd	r25, Z+5	; 0x05
     3d8:	93 83       	std	Z+3, r25	; 0x03
     3da:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3dc:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3de:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     3e0:	82 85       	ldd	r24, Z+10	; 0x0a
     3e2:	93 85       	ldd	r25, Z+11	; 0x0b
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	93 87       	std	Z+11, r25	; 0x0b
     3e8:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3ea:	3f bf       	out	0x3f, r19	; 63
		{
			temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
			
			if(temp_ringer == 'T')	// We now have an AT command to parse
     3ec:	24 35       	cpi	r18, 0x54	; 84
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <parse_SER_buffer+0x8c>
     3f0:	bc c5       	rjmp	.+2936   	; 0xf6a <parse_SER_buffer+0xc04>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     3f2:	e8 e4       	ldi	r30, 0x48	; 72
     3f4:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     3f6:	a2 81       	ldd	r26, Z+2	; 0x02
     3f8:	b3 81       	ldd	r27, Z+3	; 0x03
     3fa:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     3fc:	b3 83       	std	Z+3, r27	; 0x03
     3fe:	a2 83       	std	Z+2, r26	; 0x02
     400:	86 81       	ldd	r24, Z+6	; 0x06
     402:	97 81       	ldd	r25, Z+7	; 0x07
     404:	a8 17       	cp	r26, r24
     406:	b9 07       	cpc	r27, r25
     408:	21 f4       	brne	.+8      	; 0x412 <parse_SER_buffer+0xac>
			  Buffer->Out = Buffer->Start;
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	95 81       	ldd	r25, Z+5	; 0x05
     40e:	93 83       	std	Z+3, r25	; 0x03
     410:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     412:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     414:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     416:	82 85       	ldd	r24, Z+10	; 0x0a
     418:	93 85       	ldd	r25, Z+11	; 0x0b
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	93 87       	std	Z+11, r25	; 0x0b
     41e:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     420:	3f bf       	out	0x3f, r19	; 63
			{
				temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
				
				if(temp_ringer == 'Z')	// Reset command, fake it
     422:	2a 35       	cpi	r18, 0x5A	; 90
     424:	09 f0       	breq	.+2      	; 0x428 <parse_SER_buffer+0xc2>
     426:	34 c0       	rjmp	.+104    	; 0x490 <parse_SER_buffer+0x12a>
				{
					//Serial_SendString_P(ELM327_ID);
					RingBuffer_Insert(&FFtoBT_Buffer,'E');
     428:	65 e4       	ldi	r22, 0x45	; 69
     42a:	8c e1       	ldi	r24, 0x1C	; 28
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	f4 de       	rcall	.-536    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'L');
     430:	6c e4       	ldi	r22, 0x4C	; 76
     432:	8c e1       	ldi	r24, 0x1C	; 28
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	f0 de       	rcall	.-544    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'M');
     438:	6d e4       	ldi	r22, 0x4D	; 77
     43a:	8c e1       	ldi	r24, 0x1C	; 28
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	ec de       	rcall	.-552    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'3');
     440:	63 e3       	ldi	r22, 0x33	; 51
     442:	8c e1       	ldi	r24, 0x1C	; 28
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	e8 de       	rcall	.-560    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'2');
     448:	62 e3       	ldi	r22, 0x32	; 50
     44a:	8c e1       	ldi	r24, 0x1C	; 28
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	e4 de       	rcall	.-568    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'7');
     450:	67 e3       	ldi	r22, 0x37	; 55
     452:	8c e1       	ldi	r24, 0x1C	; 28
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	e0 de       	rcall	.-576    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,0X20);	// space
     458:	60 e2       	ldi	r22, 0x20	; 32
     45a:	8c e1       	ldi	r24, 0x1C	; 28
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	dc de       	rcall	.-584    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'v');
     460:	66 e7       	ldi	r22, 0x76	; 118
     462:	8c e1       	ldi	r24, 0x1C	; 28
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	d8 de       	rcall	.-592    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'1');
     468:	61 e3       	ldi	r22, 0x31	; 49
     46a:	8c e1       	ldi	r24, 0x1C	; 28
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	d4 de       	rcall	.-600    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'.');
     470:	6e e2       	ldi	r22, 0x2E	; 46
     472:	8c e1       	ldi	r24, 0x1C	; 28
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	d0 de       	rcall	.-608    	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'3');
     478:	63 e3       	ldi	r22, 0x33	; 51
     47a:	8c e1       	ldi	r24, 0x1C	; 28
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	cc de       	rcall	.-616    	; 0x218 <RingBuffer_Insert>
					send_ELM327_CR();
     480:	ff de       	rcall	.-514    	; 0x280 <send_ELM327_CR>
					send_ELM327_prompt();
     482:	54 df       	rcall	.-344    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     484:	88 e4       	ldi	r24, 0x48	; 72
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	e2 de       	rcall	.-572    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     48a:	10 92 54 02 	sts	0x0254, r1
     48e:	6d c5       	rjmp	.+2778   	; 0xf6a <parse_SER_buffer+0xc04>
				}
				else if(temp_ringer == 'E')	// Echo Command
     490:	25 34       	cpi	r18, 0x45	; 69
     492:	59 f4       	brne	.+22     	; 0x4aa <parse_SER_buffer+0x144>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     494:	88 e4       	ldi	r24, 0x48	; 72
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	da de       	rcall	.-588    	; 0x24e <RingBuffer_Remove>
					send_ELM327_OK();
     49a:	0f df       	rcall	.-482    	; 0x2ba <send_ELM327_OK>
					send_ELM327_prompt();
     49c:	47 df       	rcall	.-370    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     49e:	88 e4       	ldi	r24, 0x48	; 72
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	d5 de       	rcall	.-598    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     4a4:	10 92 54 02 	sts	0x0254, r1
     4a8:	60 c5       	rjmp	.+2752   	; 0xf6a <parse_SER_buffer+0xc04>
				
				}
				else if(temp_ringer == 'M')	// Protocol Memory Command
     4aa:	2d 34       	cpi	r18, 0x4D	; 77
     4ac:	59 f4       	brne	.+22     	; 0x4c4 <parse_SER_buffer+0x15e>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     4ae:	88 e4       	ldi	r24, 0x48	; 72
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	cd de       	rcall	.-614    	; 0x24e <RingBuffer_Remove>
					send_ELM327_OK();
     4b4:	02 df       	rcall	.-508    	; 0x2ba <send_ELM327_OK>
					send_ELM327_prompt();
     4b6:	3a df       	rcall	.-396    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     4b8:	88 e4       	ldi	r24, 0x48	; 72
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	c8 de       	rcall	.-624    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     4be:	10 92 54 02 	sts	0x0254, r1
     4c2:	53 c5       	rjmp	.+2726   	; 0xf6a <parse_SER_buffer+0xc04>
				
				}
				else if(temp_ringer == 'L')	// Line Feed Command
     4c4:	2c 34       	cpi	r18, 0x4C	; 76
     4c6:	59 f4       	brne	.+22     	; 0x4de <parse_SER_buffer+0x178>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     4c8:	88 e4       	ldi	r24, 0x48	; 72
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	c0 de       	rcall	.-640    	; 0x24e <RingBuffer_Remove>
					send_ELM327_OK();
     4ce:	f5 de       	rcall	.-534    	; 0x2ba <send_ELM327_OK>
					send_ELM327_prompt();
     4d0:	2d df       	rcall	.-422    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     4d2:	88 e4       	ldi	r24, 0x48	; 72
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	bb de       	rcall	.-650    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     4d8:	10 92 54 02 	sts	0x0254, r1
     4dc:	46 c5       	rjmp	.+2700   	; 0xf6a <parse_SER_buffer+0xc04>
				
				}
				else if(temp_ringer == 'S')	// Blank Spaces or Store Protocol Command
     4de:	23 35       	cpi	r18, 0x53	; 83
     4e0:	29 f5       	brne	.+74     	; 0x52c <parse_SER_buffer+0x1c6>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     4e2:	88 e4       	ldi	r24, 0x48	; 72
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	b3 de       	rcall	.-666    	; 0x24e <RingBuffer_Remove>
					if(temp_ringer == 'H')	// Set Header
     4e8:	88 34       	cpi	r24, 0x48	; 72
     4ea:	99 f4       	brne	.+38     	; 0x512 <parse_SER_buffer+0x1ac>
					{
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     4ec:	88 e4       	ldi	r24, 0x48	; 72
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	ae de       	rcall	.-676    	; 0x24e <RingBuffer_Remove>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     4f2:	88 e4       	ldi	r24, 0x48	; 72
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	ab de       	rcall	.-682    	; 0x24e <RingBuffer_Remove>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     4f8:	88 e4       	ldi	r24, 0x48	; 72
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	a8 de       	rcall	.-688    	; 0x24e <RingBuffer_Remove>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     4fe:	88 e4       	ldi	r24, 0x48	; 72
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	a5 de       	rcall	.-694    	; 0x24e <RingBuffer_Remove>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     504:	88 e4       	ldi	r24, 0x48	; 72
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	a2 de       	rcall	.-700    	; 0x24e <RingBuffer_Remove>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     50a:	88 e4       	ldi	r24, 0x48	; 72
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	9f de       	rcall	.-706    	; 0x24e <RingBuffer_Remove>
     510:	05 c0       	rjmp	.+10     	; 0x51c <parse_SER_buffer+0x1b6>
					}
					else if(temp_ringer == 'P')	// Set Protocol
     512:	80 35       	cpi	r24, 0x50	; 80
     514:	19 f4       	brne	.+6      	; 0x51c <parse_SER_buffer+0x1b6>
					{
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// 0 or 1
     516:	88 e4       	ldi	r24, 0x48	; 72
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	99 de       	rcall	.-718    	; 0x24e <RingBuffer_Remove>
					}
					
					send_ELM327_OK();
     51c:	ce de       	rcall	.-612    	; 0x2ba <send_ELM327_OK>
					send_ELM327_prompt();
     51e:	06 df       	rcall	.-500    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer		
     520:	88 e4       	ldi	r24, 0x48	; 72
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	94 de       	rcall	.-728    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     526:	10 92 54 02 	sts	0x0254, r1
     52a:	1f c5       	rjmp	.+2622   	; 0xf6a <parse_SER_buffer+0xc04>
				
				}
				else if(temp_ringer == 'H')	// Headers Command
     52c:	28 34       	cpi	r18, 0x48	; 72
     52e:	59 f4       	brne	.+22     	; 0x546 <parse_SER_buffer+0x1e0>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     530:	88 e4       	ldi	r24, 0x48	; 72
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	8c de       	rcall	.-744    	; 0x24e <RingBuffer_Remove>
					}
					else
					{
						OBD_headers = 0;
					}
					send_ELM327_OK();
     536:	c1 de       	rcall	.-638    	; 0x2ba <send_ELM327_OK>
					send_ELM327_prompt();
     538:	f9 de       	rcall	.-526    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     53a:	88 e4       	ldi	r24, 0x48	; 72
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	87 de       	rcall	.-754    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     540:	10 92 54 02 	sts	0x0254, r1
     544:	12 c5       	rjmp	.+2596   	; 0xf6a <parse_SER_buffer+0xc04>
				
				}
				
				else if(temp_ringer == 'R')	// Responses Command
     546:	22 35       	cpi	r18, 0x52	; 82
     548:	21 f5       	brne	.+72     	; 0x592 <parse_SER_buffer+0x22c>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     54a:	88 e4       	ldi	r24, 0x48	; 72
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	7f de       	rcall	.-770    	; 0x24e <RingBuffer_Remove>
					//SendSERBuffer[temp_USB_indexer++]  = temp_ringer;
					if(temp_ringer == 'V')
     550:	86 35       	cpi	r24, 0x56	; 86
     552:	b9 f4       	brne	.+46     	; 0x582 <parse_SER_buffer+0x21c>
					{
						//Serial_SendString_P(FAKE_VOLTAGE);
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     554:	61 e3       	ldi	r22, 0x31	; 49
     556:	8c e1       	ldi	r24, 0x1C	; 28
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	5e de       	rcall	.-836    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'2');
     55c:	62 e3       	ldi	r22, 0x32	; 50
     55e:	8c e1       	ldi	r24, 0x1C	; 28
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	5a de       	rcall	.-844    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'.');
     564:	6e e2       	ldi	r22, 0x2E	; 46
     566:	8c e1       	ldi	r24, 0x1C	; 28
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	56 de       	rcall	.-852    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'6');
     56c:	66 e3       	ldi	r22, 0x36	; 54
     56e:	8c e1       	ldi	r24, 0x1C	; 28
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	52 de       	rcall	.-860    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'V');
     574:	66 e5       	ldi	r22, 0x56	; 86
     576:	8c e1       	ldi	r24, 0x1C	; 28
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	4e de       	rcall	.-868    	; 0x218 <RingBuffer_Insert>
						send_ELM327_CR();
     57c:	81 de       	rcall	.-766    	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     57e:	d6 de       	rcall	.-596    	; 0x32c <send_ELM327_prompt>
     580:	02 c0       	rjmp	.+4      	; 0x586 <parse_SER_buffer+0x220>
					}
					else
					{					
						send_ELM327_OK();
     582:	9b de       	rcall	.-714    	; 0x2ba <send_ELM327_OK>
						send_ELM327_prompt();
     584:	d3 de       	rcall	.-602    	; 0x32c <send_ELM327_prompt>
					}
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     586:	88 e4       	ldi	r24, 0x48	; 72
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	61 de       	rcall	.-830    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     58c:	10 92 54 02 	sts	0x0254, r1
     590:	ec c4       	rjmp	.+2520   	; 0xf6a <parse_SER_buffer+0xc04>
				
				}
				else if(temp_ringer == 'V')	// Variable DLC Command
     592:	26 35       	cpi	r18, 0x56	; 86
     594:	59 f4       	brne	.+22     	; 0x5ac <parse_SER_buffer+0x246>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     596:	88 e4       	ldi	r24, 0x48	; 72
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	59 de       	rcall	.-846    	; 0x24e <RingBuffer_Remove>
					//SendSERBuffer[temp_USB_indexer++]  = temp_ringer;
					send_ELM327_OK();
     59c:	8e de       	rcall	.-740    	; 0x2ba <send_ELM327_OK>
					send_ELM327_prompt();
     59e:	c6 de       	rcall	.-628    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     5a0:	88 e4       	ldi	r24, 0x48	; 72
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	54 de       	rcall	.-856    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     5a6:	10 92 54 02 	sts	0x0254, r1
     5aa:	df c4       	rjmp	.+2494   	; 0xf6a <parse_SER_buffer+0xc04>
					
				}
				else if(temp_ringer == '1')	// ATAT1 Adaptive headers Command
     5ac:	21 33       	cpi	r18, 0x31	; 49
     5ae:	41 f4       	brne	.+16     	; 0x5c0 <parse_SER_buffer+0x25a>
				{
					send_ELM327_OK();
     5b0:	84 de       	rcall	.-760    	; 0x2ba <send_ELM327_OK>
					send_ELM327_prompt();
     5b2:	bc de       	rcall	.-648    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     5b4:	88 e4       	ldi	r24, 0x48	; 72
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	4a de       	rcall	.-876    	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flagg
     5ba:	10 92 54 02 	sts	0x0254, r1
     5be:	d5 c4       	rjmp	.+2474   	; 0xf6a <parse_SER_buffer+0xc04>
				
				}
				else if(temp_ringer == '@')	// Blank Spaces Command
     5c0:	20 34       	cpi	r18, 0x40	; 64
     5c2:	69 f5       	brne	.+90     	; 0x61e <parse_SER_buffer+0x2b8>
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
     5c4:	88 e4       	ldi	r24, 0x48	; 72
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	42 de       	rcall	.-892    	; 0x24e <RingBuffer_Remove>
					//SendSERBuffer[temp_USB_indexer++]  = temp_ringer;
					if(temp_ringer == '1')	// Descriptor
     5ca:	81 33       	cpi	r24, 0x31	; 49
     5cc:	01 f5       	brne	.+64     	; 0x60e <parse_SER_buffer+0x2a8>
					{
						//Serial_SendString_P(FF_mini);
						RingBuffer_Insert(&FFtoBT_Buffer,'F');
     5ce:	66 e4       	ldi	r22, 0x46	; 70
     5d0:	8c e1       	ldi	r24, 0x1C	; 28
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	21 de       	rcall	.-958    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'F');
     5d6:	66 e4       	ldi	r22, 0x46	; 70
     5d8:	8c e1       	ldi	r24, 0x1C	; 28
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	1d de       	rcall	.-966    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'m');
     5de:	6d e6       	ldi	r22, 0x6D	; 109
     5e0:	8c e1       	ldi	r24, 0x1C	; 28
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	19 de       	rcall	.-974    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'i');
     5e6:	69 e6       	ldi	r22, 0x69	; 105
     5e8:	8c e1       	ldi	r24, 0x1C	; 28
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	15 de       	rcall	.-982    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'n');
     5ee:	6e e6       	ldi	r22, 0x6E	; 110
     5f0:	8c e1       	ldi	r24, 0x1C	; 28
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	11 de       	rcall	.-990    	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'i');
     5f6:	69 e6       	ldi	r22, 0x69	; 105
     5f8:	8c e1       	ldi	r24, 0x1C	; 28
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0d de       	rcall	.-998    	; 0x218 <RingBuffer_Insert>
						send_ELM327_CR();
     5fe:	40 de       	rcall	.-896    	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     600:	95 de       	rcall	.-726    	; 0x32c <send_ELM327_prompt>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     602:	88 e4       	ldi	r24, 0x48	; 72
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	23 de       	rcall	.-954    	; 0x24e <RingBuffer_Remove>
						CR_flag = 0;	// Clears CR flag
     608:	10 92 54 02 	sts	0x0254, r1
     60c:	ae c4       	rjmp	.+2396   	; 0xf6a <parse_SER_buffer+0xc04>
					}
					else
					{
						send_ELM327_OK();
     60e:	55 de       	rcall	.-854    	; 0x2ba <send_ELM327_OK>
						send_ELM327_prompt();
     610:	8d de       	rcall	.-742    	; 0x32c <send_ELM327_prompt>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     612:	88 e4       	ldi	r24, 0x48	; 72
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	1b de       	rcall	.-970    	; 0x24e <RingBuffer_Remove>
						CR_flag = 0;	// Clears CR flag
     618:	10 92 54 02 	sts	0x0254, r1
     61c:	a6 c4       	rjmp	.+2380   	; 0xf6a <parse_SER_buffer+0xc04>
					}
				
				}
				else if(temp_ringer == 'I')	// ID Yourself command
     61e:	29 34       	cpi	r18, 0x49	; 73
     620:	09 f0       	breq	.+2      	; 0x624 <parse_SER_buffer+0x2be>
     622:	a3 c4       	rjmp	.+2374   	; 0xf6a <parse_SER_buffer+0xc04>
				{
					//Serial_SendString_P(ELM327_ID);
					RingBuffer_Insert(&FFtoBT_Buffer,'E');
     624:	65 e4       	ldi	r22, 0x45	; 69
     626:	8c e1       	ldi	r24, 0x1C	; 28
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	f6 dd       	rcall	.-1044   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'L');
     62c:	6c e4       	ldi	r22, 0x4C	; 76
     62e:	8c e1       	ldi	r24, 0x1C	; 28
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	f2 dd       	rcall	.-1052   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'M');
     634:	6d e4       	ldi	r22, 0x4D	; 77
     636:	8c e1       	ldi	r24, 0x1C	; 28
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	ee dd       	rcall	.-1060   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'3');
     63c:	63 e3       	ldi	r22, 0x33	; 51
     63e:	8c e1       	ldi	r24, 0x1C	; 28
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	ea dd       	rcall	.-1068   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'2');
     644:	62 e3       	ldi	r22, 0x32	; 50
     646:	8c e1       	ldi	r24, 0x1C	; 28
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	e6 dd       	rcall	.-1076   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'7');
     64c:	67 e3       	ldi	r22, 0x37	; 55
     64e:	8c e1       	ldi	r24, 0x1C	; 28
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	e2 dd       	rcall	.-1084   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,0X20);	// space
     654:	60 e2       	ldi	r22, 0x20	; 32
     656:	8c e1       	ldi	r24, 0x1C	; 28
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	de dd       	rcall	.-1092   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'v');
     65c:	66 e7       	ldi	r22, 0x76	; 118
     65e:	8c e1       	ldi	r24, 0x1C	; 28
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	da dd       	rcall	.-1100   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'1');
     664:	61 e3       	ldi	r22, 0x31	; 49
     666:	8c e1       	ldi	r24, 0x1C	; 28
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	d6 dd       	rcall	.-1108   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'.');
     66c:	6e e2       	ldi	r22, 0x2E	; 46
     66e:	8c e1       	ldi	r24, 0x1C	; 28
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	d2 dd       	rcall	.-1116   	; 0x218 <RingBuffer_Insert>
					RingBuffer_Insert(&FFtoBT_Buffer,'3');
     674:	63 e3       	ldi	r22, 0x33	; 51
     676:	8c e1       	ldi	r24, 0x1C	; 28
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	ce dd       	rcall	.-1124   	; 0x218 <RingBuffer_Insert>
					send_ELM327_CR();
     67c:	01 de       	rcall	.-1022   	; 0x280 <send_ELM327_CR>
					send_ELM327_prompt();
     67e:	56 de       	rcall	.-852    	; 0x32c <send_ELM327_prompt>
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     680:	88 e4       	ldi	r24, 0x48	; 72
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	e4 dd       	rcall	.-1080   	; 0x24e <RingBuffer_Remove>
					CR_flag = 0;	// Clears CR flag
     686:	10 92 54 02 	sts	0x0254, r1
     68a:	6f c4       	rjmp	.+2270   	; 0xf6a <parse_SER_buffer+0xc04>
			}
		}
	//***********************************************************
	//	Didnt find AT command, so look for OBD command
	//***********************************************************
		else if (temp_ringer == '0')
     68c:	90 33       	cpi	r25, 0x30	; 48
     68e:	09 f0       	breq	.+2      	; 0x692 <parse_SER_buffer+0x32c>
     690:	6c c4       	rjmp	.+2264   	; 0xf6a <parse_SER_buffer+0xc04>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     692:	e8 e4       	ldi	r30, 0x48	; 72
     694:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     696:	a2 81       	ldd	r26, Z+2	; 0x02
     698:	b3 81       	ldd	r27, Z+3	; 0x03
     69a:	3d 91       	ld	r19, X+

			if (++Buffer->Out == Buffer->End)
     69c:	b3 83       	std	Z+3, r27	; 0x03
     69e:	a2 83       	std	Z+2, r26	; 0x02
     6a0:	c6 81       	ldd	r28, Z+6	; 0x06
     6a2:	d7 81       	ldd	r29, Z+7	; 0x07
     6a4:	ac 17       	cp	r26, r28
     6a6:	bd 07       	cpc	r27, r29
     6a8:	21 f4       	brne	.+8      	; 0x6b2 <parse_SER_buffer+0x34c>
			  Buffer->Out = Buffer->Start;
     6aa:	a4 81       	ldd	r26, Z+4	; 0x04
     6ac:	b5 81       	ldd	r27, Z+5	; 0x05
     6ae:	b3 83       	std	Z+3, r27	; 0x03
     6b0:	a2 83       	std	Z+2, r26	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     6b2:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     6b4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     6b6:	a2 85       	ldd	r26, Z+10	; 0x0a
     6b8:	b3 85       	ldd	r27, Z+11	; 0x0b
     6ba:	11 97       	sbiw	r26, 0x01	; 1
     6bc:	b3 87       	std	Z+11, r27	; 0x0b
     6be:	a2 87       	std	Z+10, r26	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     6c0:	9f bf       	out	0x3f, r25	; 63
		{
			temp_mode = RingBuffer_Remove(&BTtoFF_Buffer);
			//SendSERBuffer[temp_USB_indexer++]  = temp_mode;
			switch (temp_mode)
     6c2:	3a 33       	cpi	r19, 0x3A	; 58
     6c4:	38 f4       	brcc	.+14     	; 0x6d4 <parse_SER_buffer+0x36e>
     6c6:	32 33       	cpi	r19, 0x32	; 50
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <parse_SER_buffer+0x366>
     6ca:	96 c3       	rjmp	.+1836   	; 0xdf8 <parse_SER_buffer+0xa92>
     6cc:	31 33       	cpi	r19, 0x31	; 49
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <parse_SER_buffer+0x36c>
     6d0:	4c c4       	rjmp	.+2200   	; 0xf6a <parse_SER_buffer+0xc04>
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <parse_SER_buffer+0x376>
     6d4:	31 34       	cpi	r19, 0x41	; 65
     6d6:	09 f0       	breq	.+2      	; 0x6da <parse_SER_buffer+0x374>
     6d8:	48 c4       	rjmp	.+2192   	; 0xf6a <parse_SER_buffer+0xc04>
     6da:	8e c3       	rjmp	.+1820   	; 0xdf8 <parse_SER_buffer+0xa92>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     6dc:	e8 e4       	ldi	r30, 0x48	; 72
     6de:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     6e0:	a2 81       	ldd	r26, Z+2	; 0x02
     6e2:	b3 81       	ldd	r27, Z+3	; 0x03
     6e4:	9d 91       	ld	r25, X+

			if (++Buffer->Out == Buffer->End)
     6e6:	b3 83       	std	Z+3, r27	; 0x03
     6e8:	a2 83       	std	Z+2, r26	; 0x02
     6ea:	c6 81       	ldd	r28, Z+6	; 0x06
     6ec:	d7 81       	ldd	r29, Z+7	; 0x07
     6ee:	ac 17       	cp	r26, r28
     6f0:	bd 07       	cpc	r27, r29
     6f2:	21 f4       	brne	.+8      	; 0x6fc <parse_SER_buffer+0x396>
			  Buffer->Out = Buffer->Start;
     6f4:	a4 81       	ldd	r26, Z+4	; 0x04
     6f6:	b5 81       	ldd	r27, Z+5	; 0x05
     6f8:	b3 83       	std	Z+3, r27	; 0x03
     6fa:	a2 83       	std	Z+2, r26	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     6fc:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     6fe:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     700:	a2 85       	ldd	r26, Z+10	; 0x0a
     702:	b3 85       	ldd	r27, Z+11	; 0x0b
     704:	11 97       	sbiw	r26, 0x01	; 1
     706:	b3 87       	std	Z+11, r27	; 0x0b
     708:	a2 87       	std	Z+10, r26	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     70a:	3f bf       	out	0x3f, r19	; 63
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     70c:	e0 91 4a 02 	lds	r30, 0x024A
     710:	f0 91 4b 02 	lds	r31, 0x024B
			{
				case '1':	// Mode 01
				temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
				//SendSERBuffer[temp_USB_indexer++]  = temp_ringer;
				if ((RingBuffer_Peek(&BTtoFF_Buffer)== '0'))
     714:	30 81       	ld	r19, Z
     716:	30 33       	cpi	r19, 0x30	; 48
     718:	09 f0       	breq	.+2      	; 0x71c <parse_SER_buffer+0x3b6>
     71a:	00 c2       	rjmp	.+1024   	; 0xb1c <parse_SER_buffer+0x7b6>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     71c:	e8 e4       	ldi	r30, 0x48	; 72
     71e:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     720:	22 81       	ldd	r18, Z+2	; 0x02
     722:	33 81       	ldd	r19, Z+3	; 0x03
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	33 83       	std	Z+3, r19	; 0x03
     72a:	22 83       	std	Z+2, r18	; 0x02
     72c:	46 81       	ldd	r20, Z+6	; 0x06
     72e:	57 81       	ldd	r21, Z+7	; 0x07
     730:	24 17       	cp	r18, r20
     732:	35 07       	cpc	r19, r21
     734:	21 f4       	brne	.+8      	; 0x73e <parse_SER_buffer+0x3d8>
			  Buffer->Out = Buffer->Start;
     736:	24 81       	ldd	r18, Z+4	; 0x04
     738:	35 81       	ldd	r19, Z+5	; 0x05
     73a:	33 83       	std	Z+3, r19	; 0x03
     73c:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     73e:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     740:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     742:	22 85       	ldd	r18, Z+10	; 0x0a
     744:	33 85       	ldd	r19, Z+11	; 0x0b
     746:	21 50       	subi	r18, 0x01	; 1
     748:	31 09       	sbc	r19, r1
     74a:	33 87       	std	Z+11, r19	; 0x0b
     74c:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     74e:	8f bf       	out	0x3f, r24	; 63
				{
					RingBuffer_Remove(&BTtoFF_Buffer);	// Removes peeked value above
					//SendSERBuffer[temp_USB_indexer++]  = '0';
					if(temp_ringer == '0')	// What PIDS are supported	0100
     750:	90 33       	cpi	r25, 0x30	; 48
     752:	09 f0       	breq	.+2      	; 0x756 <parse_SER_buffer+0x3f0>
     754:	38 c0       	rjmp	.+112    	; 0x7c6 <parse_SER_buffer+0x460>
					{
						//Serial_SendByte('4');
						//Serial_SendByte('1');
						RingBuffer_Insert(&FFtoBT_Buffer,'4');
     756:	64 e3       	ldi	r22, 0x34	; 52
     758:	8c e1       	ldi	r24, 0x1C	; 28
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	5d dd       	rcall	.-1350   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     75e:	61 e3       	ldi	r22, 0x31	; 49
     760:	8c e1       	ldi	r24, 0x1C	; 28
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	59 dd       	rcall	.-1358   	; 0x218 <RingBuffer_Insert>
						{
							send_ELM327_header();		
						}
						//Serial_SendByte('0');
						//Serial_SendByte('0');
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     766:	60 e3       	ldi	r22, 0x30	; 48
     768:	8c e1       	ldi	r24, 0x1C	; 28
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	55 dd       	rcall	.-1366   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     76e:	60 e3       	ldi	r22, 0x30	; 48
     770:	8c e1       	ldi	r24, 0x1C	; 28
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	51 dd       	rcall	.-1374   	; 0x218 <RingBuffer_Insert>
						//Serial_SendByte('0');
						//Serial_SendByte('0');
						//Serial_SendByte('0');
						//Serial_SendByte('0');
						//Serial_SendByte('0');
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     776:	60 e3       	ldi	r22, 0x30	; 48
     778:	8c e1       	ldi	r24, 0x1C	; 28
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	4d dd       	rcall	.-1382   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     77e:	60 e3       	ldi	r22, 0x30	; 48
     780:	8c e1       	ldi	r24, 0x1C	; 28
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	49 dd       	rcall	.-1390   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     786:	61 e3       	ldi	r22, 0x31	; 49
     788:	8c e1       	ldi	r24, 0x1C	; 28
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	45 dd       	rcall	.-1398   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     78e:	60 e3       	ldi	r22, 0x30	; 48
     790:	8c e1       	ldi	r24, 0x1C	; 28
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	41 dd       	rcall	.-1406   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     796:	60 e3       	ldi	r22, 0x30	; 48
     798:	8c e1       	ldi	r24, 0x1C	; 28
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	3d dd       	rcall	.-1414   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     79e:	60 e3       	ldi	r22, 0x30	; 48
     7a0:	8c e1       	ldi	r24, 0x1C	; 28
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	39 dd       	rcall	.-1422   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     7a6:	60 e3       	ldi	r22, 0x30	; 48
     7a8:	8c e1       	ldi	r24, 0x1C	; 28
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	35 dd       	rcall	.-1430   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     7ae:	60 e3       	ldi	r22, 0x30	; 48
     7b0:	8c e1       	ldi	r24, 0x1C	; 28
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	31 dd       	rcall	.-1438   	; 0x218 <RingBuffer_Insert>
						send_ELM327_CR();
     7b6:	64 dd       	rcall	.-1336   	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     7b8:	b9 dd       	rcall	.-1166   	; 0x32c <send_ELM327_prompt>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     7ba:	88 e4       	ldi	r24, 0x48	; 72
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	47 dd       	rcall	.-1394   	; 0x24e <RingBuffer_Remove>
						CR_flag = 0;	// Clears CR flag
     7c0:	10 92 54 02 	sts	0x0254, r1
     7c4:	d2 c3       	rjmp	.+1956   	; 0xf6a <parse_SER_buffer+0xc04>
					}
					else if (temp_ringer == '2')	// 0120, PIDS 21-40 supported bit mask
     7c6:	92 33       	cpi	r25, 0x32	; 50
     7c8:	09 f0       	breq	.+2      	; 0x7cc <parse_SER_buffer+0x466>
     7ca:	38 c0       	rjmp	.+112    	; 0x83c <parse_SER_buffer+0x4d6>
					{
						//Serial_SendByte('4');
						//Serial_SendByte('1');
						//Serial_SendByte('2');
						//Serial_SendByte('0');
						RingBuffer_Insert(&FFtoBT_Buffer,'4');
     7cc:	64 e3       	ldi	r22, 0x34	; 52
     7ce:	8c e1       	ldi	r24, 0x1C	; 28
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	22 dd       	rcall	.-1468   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     7d4:	61 e3       	ldi	r22, 0x31	; 49
     7d6:	8c e1       	ldi	r24, 0x1C	; 28
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	1e dd       	rcall	.-1476   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'2');
     7dc:	62 e3       	ldi	r22, 0x32	; 50
     7de:	8c e1       	ldi	r24, 0x1C	; 28
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	1a dd       	rcall	.-1484   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');						
     7e4:	60 e3       	ldi	r22, 0x30	; 48
     7e6:	8c e1       	ldi	r24, 0x1C	; 28
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	16 dd       	rcall	.-1492   	; 0x218 <RingBuffer_Insert>
						//Serial_SendByte('0');
						//Serial_SendByte('0');
						//Serial_SendByte('0');	// Support for EGT bank PID 0x78
						//Serial_SendByte('1');
						//Serial_SendByte('8');
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     7ec:	60 e3       	ldi	r22, 0x30	; 48
     7ee:	8c e1       	ldi	r24, 0x1C	; 28
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	12 dd       	rcall	.-1500   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     7f4:	60 e3       	ldi	r22, 0x30	; 48
     7f6:	8c e1       	ldi	r24, 0x1C	; 28
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e dd       	rcall	.-1508   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     7fc:	60 e3       	ldi	r22, 0x30	; 48
     7fe:	8c e1       	ldi	r24, 0x1C	; 28
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	0a dd       	rcall	.-1516   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     804:	60 e3       	ldi	r22, 0x30	; 48
     806:	8c e1       	ldi	r24, 0x1C	; 28
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	06 dd       	rcall	.-1524   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     80c:	60 e3       	ldi	r22, 0x30	; 48
     80e:	8c e1       	ldi	r24, 0x1C	; 28
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	02 dd       	rcall	.-1532   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     814:	60 e3       	ldi	r22, 0x30	; 48
     816:	8c e1       	ldi	r24, 0x1C	; 28
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	fe dc       	rcall	.-1540   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     81c:	61 e3       	ldi	r22, 0x31	; 49
     81e:	8c e1       	ldi	r24, 0x1C	; 28
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	fa dc       	rcall	.-1548   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'8');
     824:	68 e3       	ldi	r22, 0x38	; 56
     826:	8c e1       	ldi	r24, 0x1C	; 28
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	f6 dc       	rcall	.-1556   	; 0x218 <RingBuffer_Insert>
						send_ELM327_CR();
     82c:	29 dd       	rcall	.-1454   	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     82e:	7e dd       	rcall	.-1284   	; 0x32c <send_ELM327_prompt>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     830:	88 e4       	ldi	r24, 0x48	; 72
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0c dd       	rcall	.-1512   	; 0x24e <RingBuffer_Remove>
						CR_flag = 0;	// Clears CR flag
     836:	10 92 54 02 	sts	0x0254, r1
     83a:	97 c3       	rjmp	.+1838   	; 0xf6a <parse_SER_buffer+0xc04>
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     83c:	ec e1       	ldi	r30, 0x1C	; 28
     83e:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     840:	a0 81       	ld	r26, Z
     842:	b1 81       	ldd	r27, Z+1	; 0x01
     844:	84 e3       	ldi	r24, 0x34	; 52
     846:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     848:	20 81       	ld	r18, Z
     84a:	31 81       	ldd	r19, Z+1	; 0x01
     84c:	2f 5f       	subi	r18, 0xFF	; 255
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
     850:	31 83       	std	Z+1, r19	; 0x01
     852:	20 83       	st	Z, r18
     854:	46 81       	ldd	r20, Z+6	; 0x06
     856:	57 81       	ldd	r21, Z+7	; 0x07
     858:	24 17       	cp	r18, r20
     85a:	35 07       	cpc	r19, r21
     85c:	21 f4       	brne	.+8      	; 0x866 <parse_SER_buffer+0x500>
			  Buffer->In = Buffer->Start;
     85e:	24 81       	ldd	r18, Z+4	; 0x04
     860:	35 81       	ldd	r19, Z+5	; 0x05
     862:	31 83       	std	Z+1, r19	; 0x01
     864:	20 83       	st	Z, r18
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     866:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     868:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     86a:	22 85       	ldd	r18, Z+10	; 0x0a
     86c:	33 85       	ldd	r19, Z+11	; 0x0b
     86e:	2f 5f       	subi	r18, 0xFF	; 255
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	33 87       	std	Z+11, r19	; 0x0b
     874:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     876:	8f bf       	out	0x3f, r24	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     878:	ec e1       	ldi	r30, 0x1C	; 28
     87a:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     87c:	a0 81       	ld	r26, Z
     87e:	b1 81       	ldd	r27, Z+1	; 0x01
     880:	81 e3       	ldi	r24, 0x31	; 49
     882:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     884:	20 81       	ld	r18, Z
     886:	31 81       	ldd	r19, Z+1	; 0x01
     888:	2f 5f       	subi	r18, 0xFF	; 255
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	31 83       	std	Z+1, r19	; 0x01
     88e:	20 83       	st	Z, r18
     890:	46 81       	ldd	r20, Z+6	; 0x06
     892:	57 81       	ldd	r21, Z+7	; 0x07
     894:	24 17       	cp	r18, r20
     896:	35 07       	cpc	r19, r21
     898:	21 f4       	brne	.+8      	; 0x8a2 <parse_SER_buffer+0x53c>
			  Buffer->In = Buffer->Start;
     89a:	24 81       	ldd	r18, Z+4	; 0x04
     89c:	35 81       	ldd	r19, Z+5	; 0x05
     89e:	31 83       	std	Z+1, r19	; 0x01
     8a0:	20 83       	st	Z, r18
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8a2:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     8a4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     8a6:	22 85       	ldd	r18, Z+10	; 0x0a
     8a8:	33 85       	ldd	r19, Z+11	; 0x0b
     8aa:	2f 5f       	subi	r18, 0xFF	; 255
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	33 87       	std	Z+11, r19	; 0x0b
     8b0:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8b2:	8f bf       	out	0x3f, r24	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     8b4:	ec e1       	ldi	r30, 0x1C	; 28
     8b6:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     8b8:	a0 81       	ld	r26, Z
     8ba:	b1 81       	ldd	r27, Z+1	; 0x01
     8bc:	9c 93       	st	X, r25

			if (++Buffer->In == Buffer->End)
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	91 83       	std	Z+1, r25	; 0x01
     8c6:	80 83       	st	Z, r24
     8c8:	26 81       	ldd	r18, Z+6	; 0x06
     8ca:	37 81       	ldd	r19, Z+7	; 0x07
     8cc:	82 17       	cp	r24, r18
     8ce:	93 07       	cpc	r25, r19
     8d0:	21 f4       	brne	.+8      	; 0x8da <parse_SER_buffer+0x574>
			  Buffer->In = Buffer->Start;
     8d2:	84 81       	ldd	r24, Z+4	; 0x04
     8d4:	95 81       	ldd	r25, Z+5	; 0x05
     8d6:	91 83       	std	Z+1, r25	; 0x01
     8d8:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8da:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     8dc:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     8de:	82 85       	ldd	r24, Z+10	; 0x0a
     8e0:	93 85       	ldd	r25, Z+11	; 0x0b
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	93 87       	std	Z+11, r25	; 0x0b
     8e6:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8e8:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     8ea:	ec e1       	ldi	r30, 0x1C	; 28
     8ec:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     8ee:	a0 81       	ld	r26, Z
     8f0:	b1 81       	ldd	r27, Z+1	; 0x01
     8f2:	80 e3       	ldi	r24, 0x30	; 48
     8f4:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	80 83       	st	Z, r24
     900:	26 81       	ldd	r18, Z+6	; 0x06
     902:	37 81       	ldd	r19, Z+7	; 0x07
     904:	82 17       	cp	r24, r18
     906:	93 07       	cpc	r25, r19
     908:	21 f4       	brne	.+8      	; 0x912 <parse_SER_buffer+0x5ac>
			  Buffer->In = Buffer->Start;
     90a:	84 81       	ldd	r24, Z+4	; 0x04
     90c:	95 81       	ldd	r25, Z+5	; 0x05
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     912:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     914:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     916:	82 85       	ldd	r24, Z+10	; 0x0a
     918:	93 85       	ldd	r25, Z+11	; 0x0b
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	93 87       	std	Z+11, r25	; 0x0b
     91e:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     920:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     922:	ec e1       	ldi	r30, 0x1C	; 28
     924:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     926:	a0 81       	ld	r26, Z
     928:	b1 81       	ldd	r27, Z+1	; 0x01
     92a:	80 e3       	ldi	r24, 0x30	; 48
     92c:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	91 83       	std	Z+1, r25	; 0x01
     936:	80 83       	st	Z, r24
     938:	26 81       	ldd	r18, Z+6	; 0x06
     93a:	37 81       	ldd	r19, Z+7	; 0x07
     93c:	82 17       	cp	r24, r18
     93e:	93 07       	cpc	r25, r19
     940:	21 f4       	brne	.+8      	; 0x94a <parse_SER_buffer+0x5e4>
			  Buffer->In = Buffer->Start;
     942:	84 81       	ldd	r24, Z+4	; 0x04
     944:	95 81       	ldd	r25, Z+5	; 0x05
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     94a:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     94c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     94e:	82 85       	ldd	r24, Z+10	; 0x0a
     950:	93 85       	ldd	r25, Z+11	; 0x0b
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	93 87       	std	Z+11, r25	; 0x0b
     956:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     958:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     95a:	ec e1       	ldi	r30, 0x1C	; 28
     95c:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     95e:	a0 81       	ld	r26, Z
     960:	b1 81       	ldd	r27, Z+1	; 0x01
     962:	80 e3       	ldi	r24, 0x30	; 48
     964:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     966:	80 81       	ld	r24, Z
     968:	91 81       	ldd	r25, Z+1	; 0x01
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	91 83       	std	Z+1, r25	; 0x01
     96e:	80 83       	st	Z, r24
     970:	26 81       	ldd	r18, Z+6	; 0x06
     972:	37 81       	ldd	r19, Z+7	; 0x07
     974:	82 17       	cp	r24, r18
     976:	93 07       	cpc	r25, r19
     978:	21 f4       	brne	.+8      	; 0x982 <parse_SER_buffer+0x61c>
			  Buffer->In = Buffer->Start;
     97a:	84 81       	ldd	r24, Z+4	; 0x04
     97c:	95 81       	ldd	r25, Z+5	; 0x05
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     982:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     984:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     986:	82 85       	ldd	r24, Z+10	; 0x0a
     988:	93 85       	ldd	r25, Z+11	; 0x0b
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	93 87       	std	Z+11, r25	; 0x0b
     98e:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     990:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     992:	ec e1       	ldi	r30, 0x1C	; 28
     994:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     996:	a0 81       	ld	r26, Z
     998:	b1 81       	ldd	r27, Z+1	; 0x01
     99a:	80 e3       	ldi	r24, 0x30	; 48
     99c:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	91 83       	std	Z+1, r25	; 0x01
     9a6:	80 83       	st	Z, r24
     9a8:	26 81       	ldd	r18, Z+6	; 0x06
     9aa:	37 81       	ldd	r19, Z+7	; 0x07
     9ac:	82 17       	cp	r24, r18
     9ae:	93 07       	cpc	r25, r19
     9b0:	21 f4       	brne	.+8      	; 0x9ba <parse_SER_buffer+0x654>
			  Buffer->In = Buffer->Start;
     9b2:	84 81       	ldd	r24, Z+4	; 0x04
     9b4:	95 81       	ldd	r25, Z+5	; 0x05
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     9ba:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     9bc:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     9be:	82 85       	ldd	r24, Z+10	; 0x0a
     9c0:	93 85       	ldd	r25, Z+11	; 0x0b
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	93 87       	std	Z+11, r25	; 0x0b
     9c6:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     9c8:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     9ca:	ec e1       	ldi	r30, 0x1C	; 28
     9cc:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     9ce:	a0 81       	ld	r26, Z
     9d0:	b1 81       	ldd	r27, Z+1	; 0x01
     9d2:	80 e3       	ldi	r24, 0x30	; 48
     9d4:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	80 83       	st	Z, r24
     9e0:	26 81       	ldd	r18, Z+6	; 0x06
     9e2:	37 81       	ldd	r19, Z+7	; 0x07
     9e4:	82 17       	cp	r24, r18
     9e6:	93 07       	cpc	r25, r19
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <parse_SER_buffer+0x68c>
			  Buffer->In = Buffer->Start;
     9ea:	84 81       	ldd	r24, Z+4	; 0x04
     9ec:	95 81       	ldd	r25, Z+5	; 0x05
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     9f2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     9f4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     9f6:	82 85       	ldd	r24, Z+10	; 0x0a
     9f8:	93 85       	ldd	r25, Z+11	; 0x0b
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	93 87       	std	Z+11, r25	; 0x0b
     9fe:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     a00:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     a02:	ec e1       	ldi	r30, 0x1C	; 28
     a04:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     a06:	a0 81       	ld	r26, Z
     a08:	b1 81       	ldd	r27, Z+1	; 0x01
     a0a:	80 e3       	ldi	r24, 0x30	; 48
     a0c:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
     a18:	26 81       	ldd	r18, Z+6	; 0x06
     a1a:	37 81       	ldd	r19, Z+7	; 0x07
     a1c:	82 17       	cp	r24, r18
     a1e:	93 07       	cpc	r25, r19
     a20:	21 f4       	brne	.+8      	; 0xa2a <parse_SER_buffer+0x6c4>
			  Buffer->In = Buffer->Start;
     a22:	84 81       	ldd	r24, Z+4	; 0x04
     a24:	95 81       	ldd	r25, Z+5	; 0x05
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     a2a:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     a2c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     a2e:	82 85       	ldd	r24, Z+10	; 0x0a
     a30:	93 85       	ldd	r25, Z+11	; 0x0b
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	93 87       	std	Z+11, r25	; 0x0b
     a36:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     a38:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     a3a:	ec e1       	ldi	r30, 0x1C	; 28
     a3c:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     a3e:	a0 81       	ld	r26, Z
     a40:	b1 81       	ldd	r27, Z+1	; 0x01
     a42:	80 e3       	ldi	r24, 0x30	; 48
     a44:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	80 83       	st	Z, r24
     a50:	26 81       	ldd	r18, Z+6	; 0x06
     a52:	37 81       	ldd	r19, Z+7	; 0x07
     a54:	82 17       	cp	r24, r18
     a56:	93 07       	cpc	r25, r19
     a58:	21 f4       	brne	.+8      	; 0xa62 <parse_SER_buffer+0x6fc>
			  Buffer->In = Buffer->Start;
     a5a:	84 81       	ldd	r24, Z+4	; 0x04
     a5c:	95 81       	ldd	r25, Z+5	; 0x05
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     a62:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     a64:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     a66:	82 85       	ldd	r24, Z+10	; 0x0a
     a68:	93 85       	ldd	r25, Z+11	; 0x0b
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	93 87       	std	Z+11, r25	; 0x0b
     a6e:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     a70:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     a72:	ec e1       	ldi	r30, 0x1C	; 28
     a74:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     a76:	a0 81       	ld	r26, Z
     a78:	b1 81       	ldd	r27, Z+1	; 0x01
     a7a:	80 e3       	ldi	r24, 0x30	; 48
     a7c:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	91 83       	std	Z+1, r25	; 0x01
     a86:	80 83       	st	Z, r24
     a88:	26 81       	ldd	r18, Z+6	; 0x06
     a8a:	37 81       	ldd	r19, Z+7	; 0x07
     a8c:	82 17       	cp	r24, r18
     a8e:	93 07       	cpc	r25, r19
     a90:	21 f4       	brne	.+8      	; 0xa9a <parse_SER_buffer+0x734>
			  Buffer->In = Buffer->Start;
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	95 81       	ldd	r25, Z+5	; 0x05
     a96:	91 83       	std	Z+1, r25	; 0x01
     a98:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     a9a:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     a9c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     a9e:	82 85       	ldd	r24, Z+10	; 0x0a
     aa0:	93 85       	ldd	r25, Z+11	; 0x0b
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	93 87       	std	Z+11, r25	; 0x0b
     aa6:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     aa8:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     aaa:	ec e1       	ldi	r30, 0x1C	; 28
     aac:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     aae:	a0 81       	ld	r26, Z
     ab0:	b1 81       	ldd	r27, Z+1	; 0x01
     ab2:	80 e3       	ldi	r24, 0x30	; 48
     ab4:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	91 83       	std	Z+1, r25	; 0x01
     abe:	80 83       	st	Z, r24
     ac0:	26 81       	ldd	r18, Z+6	; 0x06
     ac2:	37 81       	ldd	r19, Z+7	; 0x07
     ac4:	82 17       	cp	r24, r18
     ac6:	93 07       	cpc	r25, r19
     ac8:	21 f4       	brne	.+8      	; 0xad2 <parse_SER_buffer+0x76c>
			  Buffer->In = Buffer->Start;
     aca:	84 81       	ldd	r24, Z+4	; 0x04
     acc:	95 81       	ldd	r25, Z+5	; 0x05
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ad2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ad4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     ad6:	82 85       	ldd	r24, Z+10	; 0x0a
     ad8:	93 85       	ldd	r25, Z+11	; 0x0b
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	93 87       	std	Z+11, r25	; 0x0b
     ade:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ae0:	2f bf       	out	0x3f, r18	; 63
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
						send_ELM327_CR();	//	CR
     ae2:	ce db       	rcall	.-2148   	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     ae4:	23 dc       	rcall	.-1978   	; 0x32c <send_ELM327_prompt>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     ae6:	e8 e4       	ldi	r30, 0x48	; 72
     ae8:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	93 83       	std	Z+3, r25	; 0x03
     af2:	82 83       	std	Z+2, r24	; 0x02
     af4:	26 81       	ldd	r18, Z+6	; 0x06
     af6:	37 81       	ldd	r19, Z+7	; 0x07
     af8:	82 17       	cp	r24, r18
     afa:	93 07       	cpc	r25, r19
     afc:	21 f4       	brne	.+8      	; 0xb06 <parse_SER_buffer+0x7a0>
			  Buffer->Out = Buffer->Start;
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	95 81       	ldd	r25, Z+5	; 0x05
     b02:	93 83       	std	Z+3, r25	; 0x03
     b04:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b06:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b08:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     b0a:	82 85       	ldd	r24, Z+10	; 0x0a
     b0c:	93 85       	ldd	r25, Z+11	; 0x0b
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	93 87       	std	Z+11, r25	; 0x0b
     b12:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b14:	2f bf       	out	0x3f, r18	; 63
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
						CR_flag = 0;	// Clears CR flag
     b16:	10 92 54 02 	sts	0x0254, r1
     b1a:	27 c2       	rjmp	.+1102   	; 0xf6a <parse_SER_buffer+0xc04>
					}
				
				}
			
				else if (temp_ringer == '0')	// 010x
     b1c:	90 33       	cpi	r25, 0x30	; 48
     b1e:	09 f0       	breq	.+2      	; 0xb22 <parse_SER_buffer+0x7bc>
     b20:	7d c0       	rjmp	.+250    	; 0xc1c <parse_SER_buffer+0x8b6>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     b22:	e8 e4       	ldi	r30, 0x48	; 72
     b24:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     b26:	a2 81       	ldd	r26, Z+2	; 0x02
     b28:	b3 81       	ldd	r27, Z+3	; 0x03
     b2a:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     b2c:	b3 83       	std	Z+3, r27	; 0x03
     b2e:	a2 83       	std	Z+2, r26	; 0x02
     b30:	86 81       	ldd	r24, Z+6	; 0x06
     b32:	97 81       	ldd	r25, Z+7	; 0x07
     b34:	a8 17       	cp	r26, r24
     b36:	b9 07       	cpc	r27, r25
     b38:	21 f4       	brne	.+8      	; 0xb42 <parse_SER_buffer+0x7dc>
			  Buffer->Out = Buffer->Start;
     b3a:	84 81       	ldd	r24, Z+4	; 0x04
     b3c:	95 81       	ldd	r25, Z+5	; 0x05
     b3e:	93 83       	std	Z+3, r25	; 0x03
     b40:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b42:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b44:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     b46:	82 85       	ldd	r24, Z+10	; 0x0a
     b48:	93 85       	ldd	r25, Z+11	; 0x0b
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	93 87       	std	Z+11, r25	; 0x0b
     b4e:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b50:	3f bf       	out	0x3f, r19	; 63
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
					
					if(temp_ringer == 'C')		// 010C
     b52:	23 34       	cpi	r18, 0x43	; 67
     b54:	09 f0       	breq	.+2      	; 0xb58 <parse_SER_buffer+0x7f2>
     b56:	09 c2       	rjmp	.+1042   	; 0xf6a <parse_SER_buffer+0xc04>
					{
						// RPM request
						//if((!first_cycle)&&(total_time_RPM))
						if(total_time_RPM)
     b58:	e1 14       	cp	r14, r1
     b5a:	f1 04       	cpc	r15, r1
     b5c:	01 05       	cpc	r16, r1
     b5e:	11 05       	cpc	r17, r1
     b60:	89 f1       	breq	.+98     	; 0xbc4 <parse_SER_buffer+0x85e>
						{
							//	This takes the total_time = timer1_OVF + timer1_HIGH + timer1_LOW
							//	and converts to the format required for OBD msg
							//	AND IT NEEDS TO BE OPTIMIZED TOO LARGE!!
							RPM_calc = (uint16_t)(((0xE4E1C000)/total_time_RPM));	
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 ec       	ldi	r23, 0xC0	; 192
     b66:	81 ee       	ldi	r24, 0xE1	; 225
     b68:	94 ee       	ldi	r25, 0xE4	; 228
     b6a:	a8 01       	movw	r20, r16
     b6c:	97 01       	movw	r18, r14
     b6e:	0e 94 66 14 	call	0x28cc	; 0x28cc <__udivmodsi4>
     b72:	c9 01       	movw	r24, r18
							ascii_4 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
     b74:	ba 01       	movw	r22, r20
     b76:	a9 01       	movw	r20, r18
     b78:	4f 70       	andi	r20, 0x0F	; 15
     b7a:	55 27       	eor	r21, r21
     b7c:	66 27       	eor	r22, r22
     b7e:	77 27       	eor	r23, r23
     b80:	fa 01       	movw	r30, r20
     b82:	ee 50       	subi	r30, 0x0E	; 14
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	24 91       	lpm	r18, Z
							RPM_calc >>=0x04;
     b88:	fc 01       	movw	r30, r24
     b8a:	f2 95       	swap	r31
     b8c:	e2 95       	swap	r30
     b8e:	ef 70       	andi	r30, 0x0F	; 15
     b90:	ef 27       	eor	r30, r31
     b92:	ff 70       	andi	r31, 0x0F	; 15
     b94:	ef 27       	eor	r30, r31
							ascii_3 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
     b96:	ef 70       	andi	r30, 0x0F	; 15
     b98:	ff 27       	eor	r31, r31
     b9a:	ee 50       	subi	r30, 0x0E	; 14
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	d4 91       	lpm	r29, Z
							RPM_calc >>=0x04;
     ba0:	e9 2f       	mov	r30, r25
     ba2:	ff 27       	eor	r31, r31
							ascii_2 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
     ba4:	ef 70       	andi	r30, 0x0F	; 15
     ba6:	ff 27       	eor	r31, r31
     ba8:	ee 50       	subi	r30, 0x0E	; 14
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	14 91       	lpm	r17, Z
							RPM_calc >>=0x04;
							ascii_1 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
     bae:	89 2f       	mov	r24, r25
     bb0:	99 27       	eor	r25, r25
     bb2:	82 95       	swap	r24
     bb4:	8f 70       	andi	r24, 0x0F	; 15
     bb6:	fc 01       	movw	r30, r24
     bb8:	ee 50       	subi	r30, 0x0E	; 14
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	e4 91       	lpm	r30, Z
						{
							//	This takes the total_time = timer1_OVF + timer1_HIGH + timer1_LOW
							//	and converts to the format required for OBD msg
							//	AND IT NEEDS TO BE OPTIMIZED TOO LARGE!!
							RPM_calc = (uint16_t)(((0xE4E1C000)/total_time_RPM));	
							ascii_4 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
     bbe:	c2 2f       	mov	r28, r18
							RPM_calc >>=0x04;
							ascii_3 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
							RPM_calc >>=0x04;
							ascii_2 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
							RPM_calc >>=0x04;
							ascii_1 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
     bc0:	0e 2f       	mov	r16, r30
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <parse_SER_buffer+0x866>
						{
							// IDLE
							ascii_1 = '0';
							ascii_2 = '0';
							ascii_3 = '0';
							ascii_4 = '0';
     bc4:	c0 e3       	ldi	r28, 0x30	; 48
						else
						{
							// IDLE
							ascii_1 = '0';
							ascii_2 = '0';
							ascii_3 = '0';
     bc6:	d0 e3       	ldi	r29, 0x30	; 48
						}
						else
						{
							// IDLE
							ascii_1 = '0';
							ascii_2 = '0';
     bc8:	10 e3       	ldi	r17, 0x30	; 48
							ascii_1 =  pgm_read_byte(&hex_map[RPM_calc&0x000F]);
						}
						else
						{
							// IDLE
							ascii_1 = '0';
     bca:	00 e3       	ldi	r16, 0x30	; 48
						}
						//Serial_SendByte('4');
						//Serial_SendByte('1');
						//Serial_SendByte('0');
						//Serial_SendByte('C');
						RingBuffer_Insert(&FFtoBT_Buffer,'4');
     bcc:	64 e3       	ldi	r22, 0x34	; 52
     bce:	8c e1       	ldi	r24, 0x1C	; 28
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	22 db       	rcall	.-2492   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     bd4:	61 e3       	ldi	r22, 0x31	; 49
     bd6:	8c e1       	ldi	r24, 0x1C	; 28
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	1e db       	rcall	.-2500   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'0');
     bdc:	60 e3       	ldi	r22, 0x30	; 48
     bde:	8c e1       	ldi	r24, 0x1C	; 28
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	1a db       	rcall	.-2508   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'C');
     be4:	63 e4       	ldi	r22, 0x43	; 67
     be6:	8c e1       	ldi	r24, 0x1C	; 28
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	16 db       	rcall	.-2516   	; 0x218 <RingBuffer_Insert>
						//Serial_SendByte(ascii_1);
						//Serial_SendByte(ascii_2);
						//Serial_SendByte(ascii_3);
						//Serial_SendByte(ascii_4);
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_1);
     bec:	60 2f       	mov	r22, r16
     bee:	8c e1       	ldi	r24, 0x1C	; 28
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	12 db       	rcall	.-2524   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_2);
     bf4:	61 2f       	mov	r22, r17
     bf6:	8c e1       	ldi	r24, 0x1C	; 28
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e db       	rcall	.-2532   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_3);
     bfc:	6d 2f       	mov	r22, r29
     bfe:	8c e1       	ldi	r24, 0x1C	; 28
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	0a db       	rcall	.-2540   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_4);
     c04:	6c 2f       	mov	r22, r28
     c06:	8c e1       	ldi	r24, 0x1C	; 28
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	06 db       	rcall	.-2548   	; 0x218 <RingBuffer_Insert>
						send_ELM327_CR();
     c0c:	39 db       	rcall	.-2446   	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     c0e:	8e db       	rcall	.-2276   	; 0x32c <send_ELM327_prompt>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     c10:	88 e4       	ldi	r24, 0x48	; 72
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	1c db       	rcall	.-2504   	; 0x24e <RingBuffer_Remove>
						CR_flag = 0;	// Clears CR flag
     c16:	10 92 54 02 	sts	0x0254, r1
     c1a:	a7 c1       	rjmp	.+846    	; 0xf6a <parse_SER_buffer+0xc04>
					}
				}
				else if (temp_ringer == '3')
     c1c:	93 33       	cpi	r25, 0x33	; 51
     c1e:	09 f0       	breq	.+2      	; 0xc22 <parse_SER_buffer+0x8bc>
     c20:	a4 c1       	rjmp	.+840    	; 0xf6a <parse_SER_buffer+0xc04>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     c22:	e8 e4       	ldi	r30, 0x48	; 72
     c24:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     c26:	a2 81       	ldd	r26, Z+2	; 0x02
     c28:	b3 81       	ldd	r27, Z+3	; 0x03
     c2a:	9d 91       	ld	r25, X+

			if (++Buffer->Out == Buffer->End)
     c2c:	b3 83       	std	Z+3, r27	; 0x03
     c2e:	a2 83       	std	Z+2, r26	; 0x02
     c30:	c6 81       	ldd	r28, Z+6	; 0x06
     c32:	d7 81       	ldd	r29, Z+7	; 0x07
     c34:	ac 17       	cp	r26, r28
     c36:	bd 07       	cpc	r27, r29
     c38:	21 f4       	brne	.+8      	; 0xc42 <parse_SER_buffer+0x8dc>
			  Buffer->Out = Buffer->Start;
     c3a:	a4 81       	ldd	r26, Z+4	; 0x04
     c3c:	b5 81       	ldd	r27, Z+5	; 0x05
     c3e:	b3 83       	std	Z+3, r27	; 0x03
     c40:	a2 83       	std	Z+2, r26	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c42:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c44:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     c46:	a2 85       	ldd	r26, Z+10	; 0x0a
     c48:	b3 85       	ldd	r27, Z+11	; 0x0b
     c4a:	11 97       	sbiw	r26, 0x01	; 1
     c4c:	b3 87       	std	Z+11, r27	; 0x0b
     c4e:	a2 87       	std	Z+10, r26	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c50:	3f bf       	out	0x3f, r19	; 63
				{
					temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);
					//SendSERBuffer[temp_USB_indexer++]  = temp_ringer;
					if(temp_ringer == 'C')
     c52:	93 34       	cpi	r25, 0x43	; 67
     c54:	09 f0       	breq	.+2      	; 0xc58 <parse_SER_buffer+0x8f2>
     c56:	67 c0       	rjmp	.+206    	; 0xd26 <parse_SER_buffer+0x9c0>
					{
						// EGT request
						if(EGT_L & 0x04)
     c58:	62 fd       	sbrc	r22, 2
     c5a:	39 c0       	rjmp	.+114    	; 0xcce <parse_SER_buffer+0x968>
						}
						else
						{
							//	This convert raw EGT and CHT into OBD format
							tempEGTCHT1 = EGT_H;
							tempEGTCHT1 = tempEGTCHT1<<8;
     c5c:	38 2f       	mov	r19, r24
     c5e:	20 e0       	ldi	r18, 0x00	; 0
							tempEGTCHT1 = tempEGTCHT1 + EGT_L;
     c60:	c9 01       	movw	r24, r18
     c62:	86 0f       	add	r24, r22
     c64:	91 1d       	adc	r25, r1
							tempEGTCHT1 &= 0x7FF8;
     c66:	88 7f       	andi	r24, 0xF8	; 248
     c68:	9f 77       	andi	r25, 0x7F	; 127
							tempEGTCHT1 >>= 0x03;
     c6a:	96 95       	lsr	r25
     c6c:	87 95       	ror	r24
     c6e:	96 95       	lsr	r25
     c70:	87 95       	ror	r24
     c72:	96 95       	lsr	r25
     c74:	87 95       	ror	r24
							tempEGTCHT2 = tempEGTCHT1;
							tempEGTCHT1 = tempEGTCHT1<<1;
     c76:	9c 01       	movw	r18, r24
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
							tempEGTCHT2 = tempEGTCHT2>>1;
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
							tempEGTCHT1 = tempEGTCHT1 + tempEGTCHT2;
     c80:	82 0f       	add	r24, r18
     c82:	93 1f       	adc	r25, r19
							tempEGTCHT1 = tempEGTCHT1 + 400;
     c84:	80 57       	subi	r24, 0x70	; 112
     c86:	9e 4f       	sbci	r25, 0xFE	; 254
							ascii_4 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     c88:	fc 01       	movw	r30, r24
     c8a:	ef 70       	andi	r30, 0x0F	; 15
     c8c:	ff 27       	eor	r31, r31
     c8e:	ee 50       	subi	r30, 0x0E	; 14
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	c4 91       	lpm	r28, Z
							tempEGTCHT1 >>=0x04;
     c94:	fc 01       	movw	r30, r24
     c96:	f2 95       	swap	r31
     c98:	e2 95       	swap	r30
     c9a:	ef 70       	andi	r30, 0x0F	; 15
     c9c:	ef 27       	eor	r30, r31
     c9e:	ff 70       	andi	r31, 0x0F	; 15
     ca0:	ef 27       	eor	r30, r31
							ascii_3 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     ca2:	ef 70       	andi	r30, 0x0F	; 15
     ca4:	ff 27       	eor	r31, r31
     ca6:	ee 50       	subi	r30, 0x0E	; 14
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	d4 91       	lpm	r29, Z
							tempEGTCHT1 >>=0x04;
     cac:	e9 2f       	mov	r30, r25
     cae:	ff 27       	eor	r31, r31
							ascii_2 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     cb0:	ef 70       	andi	r30, 0x0F	; 15
     cb2:	ff 27       	eor	r31, r31
     cb4:	ee 50       	subi	r30, 0x0E	; 14
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	14 91       	lpm	r17, Z
							tempEGTCHT1 >>=0x04;
							ascii_1 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     cba:	89 2f       	mov	r24, r25
     cbc:	99 27       	eor	r25, r25
     cbe:	82 95       	swap	r24
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	fc 01       	movw	r30, r24
     cc4:	ee 50       	subi	r30, 0x0E	; 14
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	e4 91       	lpm	r30, Z
     cca:	0e 2f       	mov	r16, r30
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <parse_SER_buffer+0x970>
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
							ascii_2 = '0';
							ascii_3 = '0';
							ascii_4 = '0';
     cce:	c0 e3       	ldi	r28, 0x30	; 48
						{
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
							ascii_2 = '0';
							ascii_3 = '0';
     cd0:	d0 e3       	ldi	r29, 0x30	; 48
						if(EGT_L & 0x04)
						{
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
							ascii_2 = '0';
     cd2:	10 e3       	ldi	r17, 0x30	; 48
						// EGT request
						if(EGT_L & 0x04)
						{
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
     cd4:	00 e3       	ldi	r16, 0x30	; 48
						}
						//Serial_SendByte('4');
						//Serial_SendByte('1');
						//Serial_SendByte('3');
						//Serial_SendByte('C');
						RingBuffer_Insert(&FFtoBT_Buffer,'4');
     cd6:	64 e3       	ldi	r22, 0x34	; 52
     cd8:	8c e1       	ldi	r24, 0x1C	; 28
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	9d da       	rcall	.-2758   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     cde:	61 e3       	ldi	r22, 0x31	; 49
     ce0:	8c e1       	ldi	r24, 0x1C	; 28
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	99 da       	rcall	.-2766   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'3');
     ce6:	63 e3       	ldi	r22, 0x33	; 51
     ce8:	8c e1       	ldi	r24, 0x1C	; 28
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	95 da       	rcall	.-2774   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'C');
     cee:	63 e4       	ldi	r22, 0x43	; 67
     cf0:	8c e1       	ldi	r24, 0x1C	; 28
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	91 da       	rcall	.-2782   	; 0x218 <RingBuffer_Insert>
						//Serial_SendByte(ascii_1);
						//Serial_SendByte(ascii_2);
						//Serial_SendByte(ascii_3);
						//Serial_SendByte(ascii_4);
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_1);
     cf6:	60 2f       	mov	r22, r16
     cf8:	8c e1       	ldi	r24, 0x1C	; 28
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	8d da       	rcall	.-2790   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_2);
     cfe:	61 2f       	mov	r22, r17
     d00:	8c e1       	ldi	r24, 0x1C	; 28
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	89 da       	rcall	.-2798   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_3);
     d06:	6d 2f       	mov	r22, r29
     d08:	8c e1       	ldi	r24, 0x1C	; 28
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	85 da       	rcall	.-2806   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_4);
     d0e:	6c 2f       	mov	r22, r28
     d10:	8c e1       	ldi	r24, 0x1C	; 28
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	81 da       	rcall	.-2814   	; 0x218 <RingBuffer_Insert>
						send_ELM327_CR();
     d16:	b4 da       	rcall	.-2712   	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     d18:	09 db       	rcall	.-2542   	; 0x32c <send_ELM327_prompt>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     d1a:	88 e4       	ldi	r24, 0x48	; 72
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	97 da       	rcall	.-2770   	; 0x24e <RingBuffer_Remove>
						CR_flag = 0;	// Clears CR flag
     d20:	10 92 54 02 	sts	0x0254, r1
     d24:	22 c1       	rjmp	.+580    	; 0xf6a <parse_SER_buffer+0xc04>
					
					}
					else if(temp_ringer == 'D')
     d26:	94 34       	cpi	r25, 0x44	; 68
     d28:	09 f0       	breq	.+2      	; 0xd2c <parse_SER_buffer+0x9c6>
     d2a:	1f c1       	rjmp	.+574    	; 0xf6a <parse_SER_buffer+0xc04>
					{
						// CHT request
						if(CHT_L & 0x04)
     d2c:	22 fd       	sbrc	r18, 2
     d2e:	38 c0       	rjmp	.+112    	; 0xda0 <parse_SER_buffer+0xa3a>
						}
						else
						{
							//	This convert raw EGT and CHT into OBD format
							tempEGTCHT1 = CHT_H;
							tempEGTCHT1 = tempEGTCHT1<<8;
     d30:	94 2f       	mov	r25, r20
     d32:	80 e0       	ldi	r24, 0x00	; 0
							tempEGTCHT1 = tempEGTCHT1 + CHT_L;
     d34:	82 0f       	add	r24, r18
     d36:	91 1d       	adc	r25, r1
							tempEGTCHT1 &= 0x7FF8;
     d38:	88 7f       	andi	r24, 0xF8	; 248
     d3a:	9f 77       	andi	r25, 0x7F	; 127
							tempEGTCHT1 >>= 0x03;
     d3c:	96 95       	lsr	r25
     d3e:	87 95       	ror	r24
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
							tempEGTCHT2 = tempEGTCHT1;
							tempEGTCHT1 = tempEGTCHT1<<1;
     d48:	9c 01       	movw	r18, r24
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
							tempEGTCHT2 = tempEGTCHT2>>1;
     d4e:	96 95       	lsr	r25
     d50:	87 95       	ror	r24
							tempEGTCHT1 = tempEGTCHT1 + tempEGTCHT2;
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
							tempEGTCHT1 = tempEGTCHT1 + 400;
     d56:	80 57       	subi	r24, 0x70	; 112
     d58:	9e 4f       	sbci	r25, 0xFE	; 254
							ascii_4 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     d5a:	fc 01       	movw	r30, r24
     d5c:	ef 70       	andi	r30, 0x0F	; 15
     d5e:	ff 27       	eor	r31, r31
     d60:	ee 50       	subi	r30, 0x0E	; 14
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	c4 91       	lpm	r28, Z
							tempEGTCHT1 >>=0x04;
     d66:	fc 01       	movw	r30, r24
     d68:	f2 95       	swap	r31
     d6a:	e2 95       	swap	r30
     d6c:	ef 70       	andi	r30, 0x0F	; 15
     d6e:	ef 27       	eor	r30, r31
     d70:	ff 70       	andi	r31, 0x0F	; 15
     d72:	ef 27       	eor	r30, r31
							ascii_3 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     d74:	ef 70       	andi	r30, 0x0F	; 15
     d76:	ff 27       	eor	r31, r31
     d78:	ee 50       	subi	r30, 0x0E	; 14
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	d4 91       	lpm	r29, Z
							tempEGTCHT1 >>=0x04;
     d7e:	e9 2f       	mov	r30, r25
     d80:	ff 27       	eor	r31, r31
							ascii_2 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     d82:	ef 70       	andi	r30, 0x0F	; 15
     d84:	ff 27       	eor	r31, r31
     d86:	ee 50       	subi	r30, 0x0E	; 14
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	14 91       	lpm	r17, Z
							tempEGTCHT1 >>=0x04;
							ascii_1 =  pgm_read_byte(&hex_map[tempEGTCHT1&0x000F]);
     d8c:	89 2f       	mov	r24, r25
     d8e:	99 27       	eor	r25, r25
     d90:	82 95       	swap	r24
     d92:	8f 70       	andi	r24, 0x0F	; 15
     d94:	fc 01       	movw	r30, r24
     d96:	ee 50       	subi	r30, 0x0E	; 14
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	e4 91       	lpm	r30, Z
     d9c:	0e 2f       	mov	r16, r30
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <parse_SER_buffer+0xa42>
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
							ascii_2 = '0';
							ascii_3 = '0';
							ascii_4 = '0';
     da0:	c0 e3       	ldi	r28, 0x30	; 48
						{
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
							ascii_2 = '0';
							ascii_3 = '0';
     da2:	d0 e3       	ldi	r29, 0x30	; 48
						if(CHT_L & 0x04)
						{
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
							ascii_2 = '0';
     da4:	10 e3       	ldi	r17, 0x30	; 48
						// CHT request
						if(CHT_L & 0x04)
						{
							//	OPEN SENSOR
							//	All 0's is actually -40 in OBD 
							ascii_1 = '0';
     da6:	00 e3       	ldi	r16, 0x30	; 48
						//Serial_SendByte('4');
						//Serial_SendByte('1');
						//Serial_SendByte('3');
						//Serial_SendByte('D');
						//Sensor #2 value
						RingBuffer_Insert(&FFtoBT_Buffer,'4');
     da8:	64 e3       	ldi	r22, 0x34	; 52
     daa:	8c e1       	ldi	r24, 0x1C	; 28
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	34 da       	rcall	.-2968   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'1');
     db0:	61 e3       	ldi	r22, 0x31	; 49
     db2:	8c e1       	ldi	r24, 0x1C	; 28
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	30 da       	rcall	.-2976   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'3');
     db8:	63 e3       	ldi	r22, 0x33	; 51
     dba:	8c e1       	ldi	r24, 0x1C	; 28
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	2c da       	rcall	.-2984   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,'D');
     dc0:	64 e4       	ldi	r22, 0x44	; 68
     dc2:	8c e1       	ldi	r24, 0x1C	; 28
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	28 da       	rcall	.-2992   	; 0x218 <RingBuffer_Insert>
						//Serial_SendByte(ascii_1);
						//Serial_SendByte(ascii_2);
						//Serial_SendByte(ascii_3);
						//Serial_SendByte(ascii_4);
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_1);
     dc8:	60 2f       	mov	r22, r16
     dca:	8c e1       	ldi	r24, 0x1C	; 28
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	24 da       	rcall	.-3000   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_2);
     dd0:	61 2f       	mov	r22, r17
     dd2:	8c e1       	ldi	r24, 0x1C	; 28
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	20 da       	rcall	.-3008   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_3);
     dd8:	6d 2f       	mov	r22, r29
     dda:	8c e1       	ldi	r24, 0x1C	; 28
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	1c da       	rcall	.-3016   	; 0x218 <RingBuffer_Insert>
						RingBuffer_Insert(&FFtoBT_Buffer,ascii_4);
     de0:	6c 2f       	mov	r22, r28
     de2:	8c e1       	ldi	r24, 0x1C	; 28
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	18 da       	rcall	.-3024   	; 0x218 <RingBuffer_Insert>
						send_ELM327_CR();
     de8:	4b da       	rcall	.-2922   	; 0x280 <send_ELM327_CR>
						send_ELM327_prompt();
     dea:	a0 da       	rcall	.-2752   	; 0x32c <send_ELM327_prompt>
						temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
     dec:	88 e4       	ldi	r24, 0x48	; 72
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	2e da       	rcall	.-2980   	; 0x24e <RingBuffer_Remove>
						CR_flag = 0;	// Clears CR flag
     df2:	10 92 54 02 	sts	0x0254, r1
     df6:	b9 c0       	rjmp	.+370    	; 0xf6a <parse_SER_buffer+0xc04>
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     df8:	ec e1       	ldi	r30, 0x1C	; 28
     dfa:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     dfc:	a0 81       	ld	r26, Z
     dfe:	b1 81       	ldd	r27, Z+1	; 0x01
     e00:	84 e3       	ldi	r24, 0x34	; 52
     e02:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	46 81       	ldd	r20, Z+6	; 0x06
     e10:	57 81       	ldd	r21, Z+7	; 0x07
     e12:	84 17       	cp	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	21 f4       	brne	.+8      	; 0xe20 <parse_SER_buffer+0xaba>
			  Buffer->In = Buffer->Start;
     e18:	84 81       	ldd	r24, Z+4	; 0x04
     e1a:	95 81       	ldd	r25, Z+5	; 0x05
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e20:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e22:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     e24:	82 85       	ldd	r24, Z+10	; 0x0a
     e26:	93 85       	ldd	r25, Z+11	; 0x0b
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	93 87       	std	Z+11, r25	; 0x0b
     e2c:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e2e:	2f bf       	out	0x3f, r18	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     e30:	ec e1       	ldi	r30, 0x1C	; 28
     e32:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     e34:	a0 81       	ld	r26, Z
     e36:	b1 81       	ldd	r27, Z+1	; 0x01
     e38:	3c 93       	st	X, r19

			if (++Buffer->In == Buffer->End)
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
     e44:	26 81       	ldd	r18, Z+6	; 0x06
     e46:	37 81       	ldd	r19, Z+7	; 0x07
     e48:	82 17       	cp	r24, r18
     e4a:	93 07       	cpc	r25, r19
     e4c:	21 f4       	brne	.+8      	; 0xe56 <parse_SER_buffer+0xaf0>
			  Buffer->In = Buffer->Start;
     e4e:	84 81       	ldd	r24, Z+4	; 0x04
     e50:	95 81       	ldd	r25, Z+5	; 0x05
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e56:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e58:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     e5a:	82 85       	ldd	r24, Z+10	; 0x0a
     e5c:	93 85       	ldd	r25, Z+11	; 0x0b
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	93 87       	std	Z+11, r25	; 0x0b
     e62:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e64:	2f bf       	out	0x3f, r18	; 63
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     e66:	e8 e4       	ldi	r30, 0x48	; 72
     e68:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     e6a:	a2 81       	ldd	r26, Z+2	; 0x02
     e6c:	b3 81       	ldd	r27, Z+3	; 0x03
     e6e:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     e70:	b3 83       	std	Z+3, r27	; 0x03
     e72:	a2 83       	std	Z+2, r26	; 0x02
     e74:	86 81       	ldd	r24, Z+6	; 0x06
     e76:	97 81       	ldd	r25, Z+7	; 0x07
     e78:	a8 17       	cp	r26, r24
     e7a:	b9 07       	cpc	r27, r25
     e7c:	21 f4       	brne	.+8      	; 0xe86 <parse_SER_buffer+0xb20>
			  Buffer->Out = Buffer->Start;
     e7e:	84 81       	ldd	r24, Z+4	; 0x04
     e80:	95 81       	ldd	r25, Z+5	; 0x05
     e82:	93 83       	std	Z+3, r25	; 0x03
     e84:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e86:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e88:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     e8a:	82 85       	ldd	r24, Z+10	; 0x0a
     e8c:	93 85       	ldd	r25, Z+11	; 0x0b
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	93 87       	std	Z+11, r25	; 0x0b
     e92:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e94:	3f bf       	out	0x3f, r19	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     e96:	ec e1       	ldi	r30, 0x1C	; 28
     e98:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     e9a:	a0 81       	ld	r26, Z
     e9c:	b1 81       	ldd	r27, Z+1	; 0x01
     e9e:	2c 93       	st	X, r18

			if (++Buffer->In == Buffer->End)
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
     eaa:	26 81       	ldd	r18, Z+6	; 0x06
     eac:	37 81       	ldd	r19, Z+7	; 0x07
     eae:	82 17       	cp	r24, r18
     eb0:	93 07       	cpc	r25, r19
     eb2:	21 f4       	brne	.+8      	; 0xebc <parse_SER_buffer+0xb56>
			  Buffer->In = Buffer->Start;
     eb4:	84 81       	ldd	r24, Z+4	; 0x04
     eb6:	95 81       	ldd	r25, Z+5	; 0x05
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ebc:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ebe:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     ec0:	82 85       	ldd	r24, Z+10	; 0x0a
     ec2:	93 85       	ldd	r25, Z+11	; 0x0b
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	93 87       	std	Z+11, r25	; 0x0b
     ec8:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     eca:	2f bf       	out	0x3f, r18	; 63
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     ecc:	e8 e4       	ldi	r30, 0x48	; 72
     ece:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     ed0:	a2 81       	ldd	r26, Z+2	; 0x02
     ed2:	b3 81       	ldd	r27, Z+3	; 0x03
     ed4:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     ed6:	b3 83       	std	Z+3, r27	; 0x03
     ed8:	a2 83       	std	Z+2, r26	; 0x02
     eda:	86 81       	ldd	r24, Z+6	; 0x06
     edc:	97 81       	ldd	r25, Z+7	; 0x07
     ede:	a8 17       	cp	r26, r24
     ee0:	b9 07       	cpc	r27, r25
     ee2:	21 f4       	brne	.+8      	; 0xeec <parse_SER_buffer+0xb86>
			  Buffer->Out = Buffer->Start;
     ee4:	84 81       	ldd	r24, Z+4	; 0x04
     ee6:	95 81       	ldd	r25, Z+5	; 0x05
     ee8:	93 83       	std	Z+3, r25	; 0x03
     eea:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     eec:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     eee:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     ef0:	82 85       	ldd	r24, Z+10	; 0x0a
     ef2:	93 85       	ldd	r25, Z+11	; 0x0b
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	93 87       	std	Z+11, r25	; 0x0b
     ef8:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     efa:	3f bf       	out	0x3f, r19	; 63
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     efc:	ec e1       	ldi	r30, 0x1C	; 28
     efe:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     f00:	a0 81       	ld	r26, Z
     f02:	b1 81       	ldd	r27, Z+1	; 0x01
     f04:	2c 93       	st	X, r18

			if (++Buffer->In == Buffer->End)
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
     f10:	26 81       	ldd	r18, Z+6	; 0x06
     f12:	37 81       	ldd	r19, Z+7	; 0x07
     f14:	82 17       	cp	r24, r18
     f16:	93 07       	cpc	r25, r19
     f18:	21 f4       	brne	.+8      	; 0xf22 <parse_SER_buffer+0xbbc>
			  Buffer->In = Buffer->Start;
     f1a:	84 81       	ldd	r24, Z+4	; 0x04
     f1c:	95 81       	ldd	r25, Z+5	; 0x05
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f22:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f24:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     f26:	82 85       	ldd	r24, Z+10	; 0x0a
     f28:	93 85       	ldd	r25, Z+11	; 0x0b
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	93 87       	std	Z+11, r25	; 0x0b
     f2e:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f30:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Insert(&FFtoBT_Buffer,temp_mode);
				//Serial_SendByte(RingBuffer_Remove(&BTtoFF_Buffer));
				RingBuffer_Insert(&FFtoBT_Buffer,RingBuffer_Remove(&BTtoFF_Buffer));
				//Serial_SendByte(RingBuffer_Remove(&BTtoFF_Buffer));
				RingBuffer_Insert(&FFtoBT_Buffer,RingBuffer_Remove(&BTtoFF_Buffer));
				send_ELM327_CR();
     f32:	a6 d9       	rcall	.-3252   	; 0x280 <send_ELM327_CR>
				send_ELM327_prompt();
     f34:	fb d9       	rcall	.-3082   	; 0x32c <send_ELM327_prompt>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     f36:	e8 e4       	ldi	r30, 0x48	; 72
     f38:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	93 83       	std	Z+3, r25	; 0x03
     f42:	82 83       	std	Z+2, r24	; 0x02
     f44:	26 81       	ldd	r18, Z+6	; 0x06
     f46:	37 81       	ldd	r19, Z+7	; 0x07
     f48:	82 17       	cp	r24, r18
     f4a:	93 07       	cpc	r25, r19
     f4c:	21 f4       	brne	.+8      	; 0xf56 <parse_SER_buffer+0xbf0>
			  Buffer->Out = Buffer->Start;
     f4e:	84 81       	ldd	r24, Z+4	; 0x04
     f50:	95 81       	ldd	r25, Z+5	; 0x05
     f52:	93 83       	std	Z+3, r25	; 0x03
     f54:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f56:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f58:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     f5a:	82 85       	ldd	r24, Z+10	; 0x0a
     f5c:	93 85       	ldd	r25, Z+11	; 0x0b
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	93 87       	std	Z+11, r25	; 0x0b
     f62:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f64:	2f bf       	out	0x3f, r18	; 63
				temp_ringer = RingBuffer_Remove(&BTtoFF_Buffer);	// PULLS CR out of buffer
				CR_flag = 0;	// Clears CR flag
     f66:	10 92 54 02 	sts	0x0254, r1
		}
	}
	
	

}	// END PARSE_SER_BUFFER
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <EXT_INT_init>:

	//	 interrupt on INT1 pin rising edge (MAX9924 triggered) 
	//EICRA = (1<<ISC31) | (1<<ISC30) | (1<<ISC21) | (1<<ISC20)| (1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
	
	//	 interrupt on INT1 pin falling edge (MAX9924 triggered) 
	EICRA = (1<<ISC31) | (0<<ISC30) | (1<<ISC21) | (0<<ISC20)| (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
     f78:	8a ea       	ldi	r24, 0xAA	; 170
     f7a:	80 93 69 00 	sts	0x0069, r24
	
	EIMSK =  (1<<INT1);	// Enable MAX9924 
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	8d bb       	out	0x1d, r24	; 29
     f82:	08 95       	ret

00000f84 <Jump_To_Bootloader>:
}

void Jump_To_Bootloader()
{
	// If USB is used, detach from the bus and reset it
	USB_Disable();
     f84:	0e 94 d7 11 	call	0x23ae	; 0x23ae <USB_Disable>

	// Disable all interrupts
	cli();
     f88:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f8a:	2f ef       	ldi	r18, 0xFF	; 255
     f8c:	87 ea       	ldi	r24, 0xA7	; 167
     f8e:	91 e6       	ldi	r25, 0x61	; 97
     f90:	21 50       	subi	r18, 0x01	; 1
     f92:	80 40       	sbci	r24, 0x00	; 0
     f94:	90 40       	sbci	r25, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <Jump_To_Bootloader+0xc>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <Jump_To_Bootloader+0x16>
     f9a:	00 00       	nop

	// Wait two seconds for the USB detachment to register on the host
	Delay_MS(2000);

	// Set the bootloader key to the magic value and force a reset
	Boot_Key = MAGIC_BOOT_KEY;
     f9c:	8a ec       	ldi	r24, 0xCA	; 202
     f9e:	9c ea       	ldi	r25, 0xAC	; 172
     fa0:	a2 e4       	ldi	r26, 0x42	; 66
     fa2:	bc ed       	ldi	r27, 0xDC	; 220
     fa4:	80 93 79 02 	sts	0x0279, r24
     fa8:	90 93 7a 02 	sts	0x027A, r25
     fac:	a0 93 7b 02 	sts	0x027B, r26
     fb0:	b0 93 7c 02 	sts	0x027C, r27
	wdt_enable(WDTO_250MS);
     fb4:	2c e0       	ldi	r18, 0x0C	; 12
     fb6:	88 e1       	ldi	r24, 0x18	; 24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	a8 95       	wdr
     fc0:	80 93 60 00 	sts	0x0060, r24
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	20 93 60 00 	sts	0x0060, r18
     fca:	ff cf       	rjmp	.-2      	; 0xfca <Jump_To_Bootloader+0x46>

00000fcc <TIMER0_init>:
void TIMER0_init()
{	
        // Configure timer 0 to generate a timer overflow interrupt every
        // 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
		// Seed clock with (256-156) = 100 for 100 Hz clock
        TCCR0A = 0x00;
     fcc:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0x05;
     fce:	85 e0       	ldi	r24, 0x05	; 5
     fd0:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 100;
     fd2:	84 e6       	ldi	r24, 0x64	; 100
     fd4:	86 bd       	out	0x26, r24	; 38
        TIMSK0 = (1<<TOIE0);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 6e 00 	sts	0x006E, r24
     fdc:	08 95       	ret

00000fde <TIMER1_init>:
}

void TIMER1_init()
{
	//	Initialize the 16-bit Timer1 to clock at 16 MHz
	TCCR1A = 0x00;							// Prescale Timer1 @ 1
     fde:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x01;	
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 81 00 	sts	0x0081, r24
	TIFR1&=~(1<<TOV1);						// Clear overflow flag
     fe8:	b0 98       	cbi	0x16, 0	; 22
	TIMSK1 |= (1<<TOIE1); 				   	// start timer
     fea:	ef e6       	ldi	r30, 0x6F	; 111
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	80 83       	st	Z, r24
	TIMSK1&=~(1<<OCIE1A); 				   	// Disable timer1A compare
     ff4:	80 81       	ld	r24, Z
     ff6:	8d 7f       	andi	r24, 0xFD	; 253
     ff8:	80 83       	st	Z, r24
	TIMSK1&=~(1<<OCIE1B); 				   	// Disable timer1B compare
     ffa:	80 81       	ld	r24, Z
     ffc:	8b 7f       	andi	r24, 0xFB	; 251
     ffe:	80 83       	st	Z, r24
    1000:	08 95       	ret

00001002 <SetupHardware>:
		}
//********************************************************************

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    1002:	cf 93       	push	r28
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    1004:	84 b7       	in	r24, 0x34	; 52
    1006:	87 7f       	andi	r24, 0xF7	; 247
    1008:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    100a:	c8 e1       	ldi	r28, 0x18	; 24
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	c0 93 60 00 	sts	0x0060, r28
    1014:	10 92 60 00 	sts	0x0060, r1
    1018:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	80 e8       	ldi	r24, 0x80	; 128
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	80 93 61 00 	sts	0x0061, r24
    1026:	90 93 61 00 	sts	0x0061, r25
    102a:	0f be       	out	0x3f, r0	; 63

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	EXT_INT_init();
    102c:	a5 df       	rcall	.-182    	; 0xf78 <EXT_INT_init>
	TIMER0_init();
    102e:	ce df       	rcall	.-100    	; 0xfcc <TIMER0_init>
	TIMER1_init();
    1030:	d6 df       	rcall	.-84     	; 0xfde <TIMER1_init>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1032:	87 e6       	ldi	r24, 0x67	; 103
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	90 93 cd 00 	sts	0x00CD, r25
    103a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    103e:	86 e0       	ldi	r24, 0x06	; 6
    1040:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    1044:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    1048:	e9 ec       	ldi	r30, 0xC9	; 201
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	c0 83       	st	Z, r28

				DDRD  |= (1 << 3);
    104e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    1050:	5a 9a       	sbi	0x0b, 2	; 11
		
	// Initialize the serial USART driver before first use, with 9600 baud (and no double-speed mode)
	Serial_Init(9600, false);
	UCSR1B |= (1 << RXCIE1);	// Added this to enable RX ISR
    1052:	80 81       	ld	r24, Z
    1054:	80 68       	ori	r24, 0x80	; 128
    1056:	80 83       	st	Z, r24
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
    1058:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
    105a:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
    105c:	84 b1       	in	r24, 0x04	; 4
    105e:	86 60       	ori	r24, 0x06	; 6
    1060:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
    1062:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
    1064:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
    1066:	8d b5       	in	r24, 0x2d	; 45
    1068:	81 60       	ori	r24, 0x01	; 1
    106a:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
    106c:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
    106e:	85 e5       	ldi	r24, 0x55	; 85
    1070:	8c bd       	out	0x2c, r24	; 44
	//UCSR1B |= (1 << UDRIE1);	// Added this to enable RX ISR

	SPI_Init((SPI_SPEED_FCPU_DIV_8 | SPI_SCK_LEAD_RISING | SPI_SAMPLE_TRAILING | SPI_ORDER_MSB_FIRST | SPI_MODE_MASTER ) );
	USB_Init();
    1072:	0e 94 1f 12 	call	0x243e	; 0x243e <USB_Init>
}
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <main>:
 *  setup of all components and the main program loop.
 */
int main(void)
{
	
	temp_rset = MCUSR;	// Grab reset register
    107a:	84 b7       	in	r24, 0x34	; 52
    107c:	80 93 56 02 	sts	0x0256, r24
	MCUSR = 0x00;		// Clear reset register
    1080:	14 be       	out	0x34, r1	; 52
	
	/* Disable watchdog if enabled by boot loader/fuses */
	MCUSR &= ~(1 << WDRF);
    1082:	84 b7       	in	r24, 0x34	; 52
    1084:	87 7f       	andi	r24, 0xF7	; 247
    1086:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    1088:	88 e1       	ldi	r24, 0x18	; 24
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	80 93 60 00 	sts	0x0060, r24
    1092:	10 92 60 00 	sts	0x0060, r1
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	80 e8       	ldi	r24, 0x80	; 128
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	80 93 61 00 	sts	0x0061, r24
    10a4:	90 93 61 00 	sts	0x0061, r25
    10a8:	0f be       	out	0x3f, r0	; 63
	//uint8_t FF_FWversion = 1;
	uint8_t EGT_check_flag = 0;	

		
		// Start with CDI trigger low
		PORTD &= ~(_BV(IGN_TRIGGER));	//  LOW
    10aa:	58 98       	cbi	0x0b, 0	; 11
				
		first_cycle = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 69 02 	sts	0x0269, r24
		bad_count = 0;
    10b2:	10 92 66 02 	sts	0x0266, r1
		RPM = 0;
		timer1H = 0;
    10b6:	10 92 62 02 	sts	0x0262, r1
		timer1L = 0;
    10ba:	10 92 58 02 	sts	0x0258, r1
		reluctor_trigger = 0;
    10be:	10 92 55 02 	sts	0x0255, r1
		timer1_OVF_RPM = 0;
    10c2:	10 92 6a 02 	sts	0x026A, r1
		t0OVF_trigger = 0;
    10c6:	10 92 57 02 	sts	0x0257, r1
		tcA_high = 0;
    10ca:	10 92 5d 02 	sts	0x025D, r1
		tcA_low = 0;
    10ce:	10 92 5f 02 	sts	0x025F, r1
		tcB_high = 0;
    10d2:	10 92 67 02 	sts	0x0267, r1
		tcB_low = 0;
    10d6:	10 92 6b 02 	sts	0x026B, r1
		
		CR_flag = 0;
    10da:	10 92 54 02 	sts	0x0254, r1

		// 0 - INPUT
		// 1 - OUTPUT
		
		DDRB = 0x10; 	//
    10de:	80 e1       	ldi	r24, 0x10	; 16
    10e0:	84 b9       	out	0x04, r24	; 4
		DDRC = 0x20;	//
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	87 b9       	out	0x07, r24	; 7
		DDRD = 0x41;    //
    10e6:	81 e4       	ldi	r24, 0x41	; 65
    10e8:	8a b9       	out	0x0a, r24	; 10

	//**********************************************************
	SetupHardware();
    10ea:	8b df       	rcall	.-234    	; 0x1002 <SetupHardware>
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    10ec:	ec e1       	ldi	r30, 0x1C	; 28
    10ee:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    10f0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    10f2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
    10f4:	88 e2       	ldi	r24, 0x28	; 40
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
    10fc:	93 83       	std	Z+3, r25	; 0x03
    10fe:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
    1100:	95 83       	std	Z+5, r25	; 0x05
    1102:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
    1104:	88 e4       	ldi	r24, 0x48	; 72
    1106:	92 e0       	ldi	r25, 0x02	; 2
    1108:	97 83       	std	Z+7, r25	; 0x07
    110a:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
    110c:	20 e2       	ldi	r18, 0x20	; 32
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	31 87       	std	Z+9, r19	; 0x09
    1112:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
    1114:	13 86       	std	Z+11, r1	; 0x0b
    1116:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1118:	4f bf       	out	0x3f, r20	; 63
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    111a:	e8 e4       	ldi	r30, 0x48	; 72
    111c:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    111e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1120:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
    1122:	8c ef       	ldi	r24, 0xFC	; 252
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
    112a:	93 83       	std	Z+3, r25	; 0x03
    112c:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
    112e:	95 83       	std	Z+5, r25	; 0x05
    1130:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
    1132:	8c e1       	ldi	r24, 0x1C	; 28
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	97 83       	std	Z+7, r25	; 0x07
    1138:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
    113a:	31 87       	std	Z+9, r19	; 0x09
    113c:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
    113e:	13 86       	std	Z+11, r1	; 0x0b
    1140:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1142:	4f bf       	out	0x3f, r20	; 63
	RingBuffer_InitBuffer(&BTtoFF_Buffer, BTtoFF_Buffer_Data, sizeof(BTtoFF_Buffer_Data)); 
	
	//**********************************************************
	// FF PULL
	// TO DO: Switch to the LUFA switch reads?
	if((PINB & 0x20))
    1144:	1d 9b       	sbis	0x03, 5	; 3
    1146:	21 c0       	rjmp	.+66     	; 0x118a <main+0x110>
	{
		map_num = 0x02;	// Indicates MAP 2 is loaded
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	80 93 5a 02 	sts	0x025A, r24
		eeprom_busy_wait();
    114e:	f9 99       	sbic	0x1f, 1	; 31
    1150:	fe cf       	rjmp	.-4      	; 0x114e <main+0xd4>
		MAP_STATIC_TEMP = eeprom_read_byte((uint8_t*)&MAP2_STATIC);
    1152:	8a ec       	ldi	r24, 0xCA	; 202
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 c0 14 	call	0x2980	; 0x2980 <__eerd_byte_m16u2>
    115a:	80 93 63 02 	sts	0x0263, r24
    115e:	00 e1       	ldi	r16, 0x10	; 16
    1160:	11 e0       	ldi	r17, 0x01	; 1
    1162:	c0 e0       	ldi	r28, 0x00	; 0
    1164:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 0;i<101;i++)
		{
			eeprom_busy_wait();
    1166:	f9 99       	sbic	0x1f, 1	; 31
    1168:	fe cf       	rjmp	.-4      	; 0x1166 <main+0xec>
			MAP[i] = eeprom_read_word((uint16_t*)&MAP2[i]);
    116a:	ce 01       	movw	r24, r28
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	80 50       	subi	r24, 0x00	; 0
    1172:	90 40       	sbci	r25, 0x00	; 0
    1174:	0e 94 c8 14 	call	0x2990	; 0x2990 <__eerd_word_m16u2>
    1178:	d8 01       	movw	r26, r16
    117a:	8d 93       	st	X+, r24
    117c:	9d 93       	st	X+, r25
    117e:	8d 01       	movw	r16, r26
    1180:	21 96       	adiw	r28, 0x01	; 1
	if((PINB & 0x20))
	{
		map_num = 0x02;	// Indicates MAP 2 is loaded
		eeprom_busy_wait();
		MAP_STATIC_TEMP = eeprom_read_byte((uint8_t*)&MAP2_STATIC);
		for(i = 0;i<101;i++)
    1182:	c5 36       	cpi	r28, 0x65	; 101
    1184:	d1 05       	cpc	r29, r1
    1186:	79 f7       	brne	.-34     	; 0x1166 <main+0xec>
    1188:	20 c0       	rjmp	.+64     	; 0x11ca <main+0x150>
		}
	}
	
	else 
	{	// LOAD MAP 1
		map_num = 0x01;	// Indicates MAP 1 is loaded
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 5a 02 	sts	0x025A, r24
		eeprom_busy_wait();
    1190:	f9 99       	sbic	0x1f, 1	; 31
    1192:	fe cf       	rjmp	.-4      	; 0x1190 <main+0x116>
		MAP_STATIC_TEMP = eeprom_read_byte((uint8_t*)&MAP1_STATIC);
    1194:	85 e9       	ldi	r24, 0x95	; 149
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 c0 14 	call	0x2980	; 0x2980 <__eerd_byte_m16u2>
    119c:	80 93 63 02 	sts	0x0263, r24
    11a0:	00 e1       	ldi	r16, 0x10	; 16
    11a2:	11 e0       	ldi	r17, 0x01	; 1
    11a4:	c0 e0       	ldi	r28, 0x00	; 0
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 0;i<101;i++)
		{
			eeprom_busy_wait();
    11a8:	f9 99       	sbic	0x1f, 1	; 31
    11aa:	fe cf       	rjmp	.-4      	; 0x11a8 <main+0x12e>
			MAP[i] = eeprom_read_word((uint16_t*)&MAP1[i]);
    11ac:	ce 01       	movw	r24, r28
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	85 53       	subi	r24, 0x35	; 53
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	0e 94 c8 14 	call	0x2990	; 0x2990 <__eerd_word_m16u2>
    11ba:	f8 01       	movw	r30, r16
    11bc:	81 93       	st	Z+, r24
    11be:	91 93       	st	Z+, r25
    11c0:	8f 01       	movw	r16, r30
    11c2:	21 96       	adiw	r28, 0x01	; 1
	else 
	{	// LOAD MAP 1
		map_num = 0x01;	// Indicates MAP 1 is loaded
		eeprom_busy_wait();
		MAP_STATIC_TEMP = eeprom_read_byte((uint8_t*)&MAP1_STATIC);
		for(i = 0;i<101;i++)
    11c4:	c5 36       	cpi	r28, 0x65	; 101
    11c6:	d1 05       	cpc	r29, r1
    11c8:	79 f7       	brne	.-34     	; 0x11a8 <main+0x12e>
			MAP[i] = eeprom_read_word((uint16_t*)&MAP1[i]);
		}		
		
	}
	
	TCNT1 = 0;		// Reset Timer1
    11ca:	10 92 85 00 	sts	0x0085, r1
    11ce:	10 92 84 00 	sts	0x0084, r1
	
	PORTD &= ~(_BV(MAIN_LED));	//  LOW 
    11d2:	5e 98       	cbi	0x0b, 6	; 11
	request_num = 0x01;	// Gets us sending back data packets
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 5b 02 	sts	0x025B, r24
	sei();	// Enable interrupts
    11da:	78 94       	sei
	uint8_t RPM;
	uint8_t OVFt1;
	uint8_t i;	// generic indexer
	
	//uint8_t FF_FWversion = 1;
	uint8_t EGT_check_flag = 0;	
    11dc:	d1 2c       	mov	r13, r1
	uint8_t temp_low = 0;
	uint8_t temp_egt_low  = 0;
	uint8_t temp_egt_high = 0;
	uint8_t temp_cht_low  = 0;
	uint8_t temp_cht_high = 0;
	uint32_t total_time = 0;
    11de:	81 2c       	mov	r8, r1
    11e0:	91 2c       	mov	r9, r1
    11e2:	54 01       	movw	r10, r8
	uint8_t temp_high = 0;
	uint8_t temp_low = 0;
	uint8_t temp_egt_low  = 0;
	uint8_t temp_egt_high = 0;
	uint8_t temp_cht_low  = 0;
	uint8_t temp_cht_high = 0;
    11e4:	31 2c       	mov	r3, r1
	uint16_t tempdiv = 0;
	uint8_t temp_high = 0;
	uint8_t temp_low = 0;
	uint8_t temp_egt_low  = 0;
	uint8_t temp_egt_high = 0;
	uint8_t temp_cht_low  = 0;
    11e6:	c1 2c       	mov	r12, r1
		
	uint16_t tempdiv = 0;
	uint8_t temp_high = 0;
	uint8_t temp_low = 0;
	uint8_t temp_egt_low  = 0;
	uint8_t temp_egt_high = 0;
    11e8:	71 2c       	mov	r7, r1
	static uint16_t MAP[101];
		
	uint16_t tempdiv = 0;
	uint8_t temp_high = 0;
	uint8_t temp_low = 0;
	uint8_t temp_egt_low  = 0;
    11ea:	21 2c       	mov	r2, r1
			{
				first_cycle = 0;
				OVFt1 = 0;
				timer1_OVF_RPM = 0;
				PORTD &= ~(_BV(IGN_TRIGGER));	//  LOW 
				TIMSK1&=~(1<<OCIE1A); 			// Disable timer1B compare
    11ec:	cf e6       	ldi	r28, 0x6F	; 111
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
	sei();	// Enable interrupts


	for (;;)
	{
		HID_Device_USBTask(&Generic_HID_Interface);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	26 d5       	rcall	.+2636   	; 0x1c42 <HID_Device_USBTask>
		USB_USBTask();
    11f6:	0e 94 4b 14 	call	0x2896	; 0x2896 <USB_USBTask>
		
		// Check the flags
		//********************************************************************
		cli();
    11fa:	f8 94       	cli
		if (reluctor_trigger) // time to make the donuts
    11fc:	80 91 55 02 	lds	r24, 0x0255
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <main+0x18c>
    1204:	62 c0       	rjmp	.+196    	; 0x12ca <main+0x250>
		{
			if (!first_cycle)
    1206:	80 91 69 02 	lds	r24, 0x0269
    120a:	81 11       	cpse	r24, r1
    120c:	51 c0       	rjmp	.+162    	; 0x12b0 <main+0x236>
			{
				// Copy volatile variables to local copies
				// Does this reduce overhead?				
				temp_high = timer1H;
    120e:	e0 90 62 02 	lds	r14, 0x0262
				temp_low  = timer1L;
    1212:	60 90 58 02 	lds	r6, 0x0258
				OVFt1 = timer1_OVF_RPM;
    1216:	f0 90 6a 02 	lds	r15, 0x026A
					
				if( (OVFt1 > 0) )
    121a:	ff 20       	and	r15, r15
    121c:	09 f4       	brne	.+2      	; 0x1220 <main+0x1a6>
    121e:	53 c0       	rjmp	.+166    	; 0x12c6 <main+0x24c>
				{
					tempdiv = 0x00FF & OVFt1;
					tempdiv = tempdiv<<8;
    1220:	5f 2c       	mov	r5, r15
    1222:	41 2c       	mov	r4, r1
					tempdiv = tempdiv + temp_high;
    1224:	82 01       	movw	r16, r4
    1226:	0e 0d       	add	r16, r14
    1228:	11 1d       	adc	r17, r1
					RPM = (uint8_t)(37528/tempdiv);
    122a:	98 01       	movw	r18, r16
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	68 e9       	ldi	r22, 0x98	; 152
    1232:	72 e9       	ldi	r23, 0x92	; 146
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 88 14 	call	0x2910	; 0x2910 <__divmodsi4>
					if(RPM < 101) 
    123c:	25 36       	cpi	r18, 0x65	; 101
    123e:	08 f0       	brcs	.+2      	; 0x1242 <main+0x1c8>
    1240:	42 c0       	rjmp	.+132    	; 0x12c6 <main+0x24c>
					{						
						PORTD &= ~(_BV(IGN_TRIGGER));		//  LOW 
    1242:	58 98       	cbi	0x0b, 0	; 11
						TCNT1 = 0x0000;		// Reset Timer1
    1244:	a4 e8       	ldi	r26, 0x84	; 132
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	11 96       	adiw	r26, 0x01	; 1
    124a:	1c 92       	st	X, r1
    124c:	1e 92       	st	-X, r1
						OCR1A = MAP[RPM];
    124e:	e2 2f       	mov	r30, r18
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	ee 0f       	add	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	e0 5f       	subi	r30, 0xF0	; 240
    1258:	fe 4f       	sbci	r31, 0xFE	; 254
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	a8 e8       	ldi	r26, 0x88	; 136
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	9c 93       	st	X, r25
    1266:	8e 93       	st	-X, r24
						OCR1B = MAP[RPM] + 800;	// To Do: Change this to a variable
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	80 5e       	subi	r24, 0xE0	; 224
    126e:	9c 4f       	sbci	r25, 0xFC	; 252
    1270:	ea e8       	ldi	r30, 0x8A	; 138
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
																				
						// Enable CompA, Disable CompB
						TIFR1 = (1<<OCF1A); 					// Clear timer1A compare flag
    1278:	f2 e0       	ldi	r31, 0x02	; 2
    127a:	f6 bb       	out	0x16, r31	; 22
						TIMSK1|= (1<<OCIE1A); 				   	// Enable timer1A compare
    127c:	88 81       	ld	r24, Y
    127e:	82 60       	ori	r24, 0x02	; 2
    1280:	88 83       	st	Y, r24
						TIMSK1&=~(1<<OCIE1B); 				   	// Disable timer1B compare
    1282:	88 81       	ld	r24, Y
    1284:	8b 7f       	andi	r24, 0xFB	; 251
    1286:	88 83       	st	Y, r24
						timer1_OVF_RPM = 0;						// Reset timer 1 OVF count
    1288:	10 92 6a 02 	sts	0x026A, r1
						//  This total_time nonsense is for OBD. Since the timer and ovf
						//	are constantly changing, we only want the last validated VR trigger time
						//	to go back to the user app.
						total_time = tempdiv;
    128c:	48 01       	movw	r8, r16
    128e:	a1 2c       	mov	r10, r1
    1290:	b1 2c       	mov	r11, r1
						total_time = total_time<<8;
    1292:	ba 2c       	mov	r11, r10
    1294:	a9 2c       	mov	r10, r9
    1296:	98 2c       	mov	r9, r8
    1298:	88 24       	eor	r8, r8
						total_time = total_time + temp_low;	
    129a:	86 0c       	add	r8, r6
    129c:	91 1c       	adc	r9, r1
    129e:	a1 1c       	adc	r10, r1
    12a0:	b1 1c       	adc	r11, r1
						timer1_OVF_RPM_copy = OVFt1;
    12a2:	f0 92 59 02 	sts	0x0259, r15
						timer1H_copy = temp_high;
    12a6:	e0 92 68 02 	sts	0x0268, r14
						timer1L_copy = temp_low;
    12aa:	60 92 61 02 	sts	0x0261, r6
    12ae:	0b c0       	rjmp	.+22     	; 0x12c6 <main+0x24c>
			}	// END !first_cycle
			
		// Clear the first cycle flag
			else  
			{
				first_cycle = 0;
    12b0:	10 92 69 02 	sts	0x0269, r1
				OVFt1 = 0;
				timer1_OVF_RPM = 0;
    12b4:	10 92 6a 02 	sts	0x026A, r1
				PORTD &= ~(_BV(IGN_TRIGGER));	//  LOW 
    12b8:	58 98       	cbi	0x0b, 0	; 11
				TIMSK1&=~(1<<OCIE1A); 			// Disable timer1B compare
    12ba:	88 81       	ld	r24, Y
    12bc:	8d 7f       	andi	r24, 0xFD	; 253
    12be:	88 83       	st	Y, r24
				TIMSK1&=~(1<<OCIE1B); 			// Disable timer1B compare
    12c0:	88 81       	ld	r24, Y
    12c2:	8b 7f       	andi	r24, 0xFB	; 251
    12c4:	88 83       	st	Y, r24
			}
			reluctor_trigger = 0;
    12c6:	10 92 55 02 	sts	0x0255, r1
		}// END reluctor_trigger
		sei();
    12ca:	78 94       	sei
//********************************************************************
		cli();
    12cc:	f8 94       	cli
		if(t0OVF_trigger && (!reluctor_trigger))	// 4Hz, 4 per second
    12ce:	80 91 57 02 	lds	r24, 0x0257
    12d2:	88 23       	and	r24, r24
    12d4:	61 f0       	breq	.+24     	; 0x12ee <main+0x274>
    12d6:	80 91 55 02 	lds	r24, 0x0255
    12da:	81 11       	cpse	r24, r1
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <main+0x274>
		{
			t0OVF_trigger = 0;
    12de:	10 92 57 02 	sts	0x0257, r1
			PORTD ^= (_BV(MAIN_LED));	//  TOGGLE
    12e2:	8b b1       	in	r24, 0x0b	; 11
    12e4:	90 e4       	ldi	r25, 0x40	; 64
    12e6:	89 27       	eor	r24, r25
    12e8:	8b b9       	out	0x0b, r24	; 11
			EGT_check_flag = 1;
    12ea:	dd 24       	eor	r13, r13
    12ec:	d3 94       	inc	r13
		}	
			
		sei();			
    12ee:	78 94       	sei
			
		if(EGT_check_flag && (!reluctor_trigger))
    12f0:	dd 20       	and	r13, r13
    12f2:	39 f1       	breq	.+78     	; 0x1342 <main+0x2c8>
    12f4:	80 91 55 02 	lds	r24, 0x0255
    12f8:	81 11       	cpse	r24, r1
    12fa:	23 c0       	rjmp	.+70     	; 0x1342 <main+0x2c8>
		{
			PORTB &= ~(_BV(MAXCHT));		// LOW to read data
    12fc:	2c 98       	cbi	0x05, 4	; 5
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    12fe:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1300:	0d b4       	in	r0, 0x2d	; 45
    1302:	07 fe       	sbrs	r0, 7
    1304:	fd cf       	rjmp	.-6      	; 0x1300 <main+0x286>
				return SPDR;
    1306:	3e b4       	in	r3, 0x2e	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1308:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    130a:	0d b4       	in	r0, 0x2d	; 45
    130c:	07 fe       	sbrs	r0, 7
    130e:	fd cf       	rjmp	.-6      	; 0x130a <main+0x290>
				return SPDR;
    1310:	ce b4       	in	r12, 0x2e	; 46
			temp_cht_high = SPI_ReceiveByte();
			temp_cht_low = SPI_ReceiveByte();
			PORTB |= _BV(MAXCHT);		    //  HIGH starts new conversion
    1312:	2c 9a       	sbi	0x05, 4	; 5
				
			PORTC &= ~(_BV(MAXEGT));		// LOW to read data
    1314:	45 98       	cbi	0x08, 5	; 8
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1316:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1318:	0d b4       	in	r0, 0x2d	; 45
    131a:	07 fe       	sbrs	r0, 7
    131c:	fd cf       	rjmp	.-6      	; 0x1318 <main+0x29e>
				return SPDR;
    131e:	7e b4       	in	r7, 0x2e	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1320:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1322:	0d b4       	in	r0, 0x2d	; 45
    1324:	07 fe       	sbrs	r0, 7
    1326:	fd cf       	rjmp	.-6      	; 0x1322 <main+0x2a8>
				return SPDR;
    1328:	2e b4       	in	r2, 0x2e	; 46
			temp_egt_high = SPI_ReceiveByte();
			temp_egt_low = SPI_ReceiveByte();
			PORTC |= _BV(MAXEGT);		    //  HIGH starts new conversion
    132a:	45 9a       	sbi	0x08, 5	; 8
			//	Copy temp to volatiles for LUFA
			cli();
    132c:	f8 94       	cli
			egt_h = temp_egt_high;
    132e:	70 92 5c 02 	sts	0x025C, r7
			egt_l = temp_egt_low;
    1332:	20 92 5e 02 	sts	0x025E, r2
			cht_h = temp_cht_high;
    1336:	30 92 60 02 	sts	0x0260, r3
			cht_l = temp_cht_low;
    133a:	c0 92 65 02 	sts	0x0265, r12
			sei();
    133e:	78 94       	sei
			EGT_check_flag = 0;
    1340:	d1 2c       	mov	r13, r1
		}

		//*********************************************************************************************
		if(CR_flag && (!reluctor_trigger))
    1342:	80 91 54 02 	lds	r24, 0x0254
    1346:	88 23       	and	r24, r24
    1348:	a9 f0       	breq	.+42     	; 0x1374 <main+0x2fa>
    134a:	80 91 55 02 	lds	r24, 0x0255
    134e:	81 11       	cpse	r24, r1
    1350:	11 c0       	rjmp	.+34     	; 0x1374 <main+0x2fa>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1352:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1354:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
    1356:	a2 e5       	ldi	r26, 0x52	; 82
    1358:	b2 e0       	ldi	r27, 0x02	; 2
    135a:	8d 91       	ld	r24, X+
    135c:	9c 91       	ld	r25, X
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    135e:	2f bf       	out	0x3f, r18	; 63
		{
			if( (!(RingBuffer_IsEmpty(&BTtoFF_Buffer))))
    1360:	89 2b       	or	r24, r25
    1362:	41 f0       	breq	.+16     	; 0x1374 <main+0x2fa>
			{
				parse_SER_buffer(temp_egt_high,temp_egt_low,temp_cht_high,temp_cht_low,total_time);
    1364:	85 01       	movw	r16, r10
    1366:	74 01       	movw	r14, r8
    1368:	2c 2d       	mov	r18, r12
    136a:	43 2d       	mov	r20, r3
    136c:	62 2d       	mov	r22, r2
    136e:	87 2d       	mov	r24, r7
    1370:	0e 94 b3 01 	call	0x366	; 0x366 <parse_SER_buffer>
			}
		}
		
		if(!reluctor_trigger){
    1374:	80 91 55 02 	lds	r24, 0x0255
    1378:	81 11       	cpse	r24, r1
    137a:	3a cf       	rjmp	.-396    	; 0x11f0 <main+0x176>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    137c:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    137e:	f8 94       	cli
    1380:	e6 e2       	ldi	r30, 0x26	; 38
    1382:	f2 e0       	ldi	r31, 0x02	; 2
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1388:	2f bf       	out	0x3f, r18	; 63
		if( (!(RingBuffer_IsEmpty(&FFtoBT_Buffer))))
    138a:	89 2b       	or	r24, r25
    138c:	09 f4       	brne	.+2      	; 0x1390 <main+0x316>
    138e:	30 cf       	rjmp	.-416    	; 0x11f0 <main+0x176>
		{
			//Serial_SendByte(RingBuffer_Remove(&FFtoBT_Buffer));	// Send next byte in buffer
			if((UCSR1A & (1 << UDRE1)))
    1390:	a8 ec       	ldi	r26, 0xC8	; 200
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	8c 91       	ld	r24, X
    1396:	85 ff       	sbrs	r24, 5
    1398:	2b cf       	rjmp	.-426    	; 0x11f0 <main+0x176>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    139a:	ec e1       	ldi	r30, 0x1C	; 28
    139c:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
    139e:	a2 81       	ldd	r26, Z+2	; 0x02
    13a0:	b3 81       	ldd	r27, Z+3	; 0x03
    13a2:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
    13a4:	b3 83       	std	Z+3, r27	; 0x03
    13a6:	a2 83       	std	Z+2, r26	; 0x02
    13a8:	86 81       	ldd	r24, Z+6	; 0x06
    13aa:	97 81       	ldd	r25, Z+7	; 0x07
    13ac:	a8 17       	cp	r26, r24
    13ae:	b9 07       	cpc	r27, r25
    13b0:	21 f4       	brne	.+8      	; 0x13ba <main+0x340>
			  Buffer->Out = Buffer->Start;
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	95 81       	ldd	r25, Z+5	; 0x05
    13b6:	93 83       	std	Z+3, r25	; 0x03
    13b8:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    13ba:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    13bc:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
    13be:	82 85       	ldd	r24, Z+10	; 0x0a
    13c0:	93 85       	ldd	r25, Z+11	; 0x0b
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	93 87       	std	Z+11, r25	; 0x0b
    13c6:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    13c8:	3f bf       	out	0x3f, r19	; 63
			{
				UDR1 = RingBuffer_Remove(&FFtoBT_Buffer);
    13ca:	ee ec       	ldi	r30, 0xCE	; 206
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	20 83       	st	Z, r18
    13d0:	0f cf       	rjmp	.-482    	; 0x11f0 <main+0x176>

000013d2 <EVENT_USB_Device_Connect>:
	USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    13d2:	08 95       	ret

000013d4 <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    13d4:	08 95       	ret

000013d6 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	1d d4       	rcall	.+2106   	; 0x1c16 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    13dc:	e2 ee       	ldi	r30, 0xE2	; 226
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	84 60       	ori	r24, 0x04	; 4
    13e4:	80 83       	st	Z, r24
    13e6:	08 95       	ret

000013e8 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	bf c2       	rjmp	.+1406   	; 0x196c <HID_Device_ProcessControlRequest>

000013ee <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    13ee:	80 91 0e 01 	lds	r24, 0x010E
    13f2:	90 91 0f 01 	lds	r25, 0x010F
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	29 f0       	breq	.+10     	; 0x1404 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	90 93 0f 01 	sts	0x010F, r25
    1400:	80 93 0e 01 	sts	0x010E, r24
    1404:	08 95       	ret

00001406 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	e9 01       	movw	r28, r18
	uint8_t MAPindex_start;
	uint8_t MAPindex_end;
	uint8_t BUFFERindex;
	static uint8_t msg_count = 0;
	
	switch(request_num)
    1416:	80 91 5b 02 	lds	r24, 0x025B
    141a:	8a 38       	cpi	r24, 0x8A	; 138
    141c:	31 f0       	breq	.+12     	; 0x142a <CALLBACK_HID_Device_CreateHIDReport+0x24>
    141e:	8b 38       	cpi	r24, 0x8B	; 139
    1420:	e9 f0       	breq	.+58     	; 0x145c <CALLBACK_HID_Device_CreateHIDReport+0x56>
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	09 f0       	breq	.+2      	; 0x1428 <CALLBACK_HID_Device_CreateHIDReport+0x22>
    1426:	b9 c0       	rjmp	.+370    	; 0x159a <CALLBACK_HID_Device_CreateHIDReport+0x194>
    1428:	7b c0       	rjmp	.+246    	; 0x1520 <CALLBACK_HID_Device_CreateHIDReport+0x11a>
	{
		case 0x8A:	// MAP got sent from host, handled in RX callback
			//cli();
			//KillStuff();
			hidSendBuffer[0]  = 0xAB;	// Header
    142a:	8b ea       	ldi	r24, 0xAB	; 171
    142c:	88 83       	st	Y, r24
			hidSendBuffer[1]  = 0xCD;
    142e:	8d ec       	ldi	r24, 0xCD	; 205
    1430:	89 83       	std	Y+1, r24	; 0x01
			hidSendBuffer[2]  = 0x8A;
    1432:	8a e8       	ldi	r24, 0x8A	; 138
    1434:	8a 83       	std	Y+2, r24	; 0x02
			hidSendBuffer[3]  = (seq_num | 0x80);	// Echo back as an ACK
    1436:	80 91 64 02 	lds	r24, 0x0264
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8b 83       	std	Y+3, r24	; 0x03
			hidSendBuffer[22] = 0xDE;	// Footer
    143e:	8e ed       	ldi	r24, 0xDE	; 222
    1440:	8e 8b       	std	Y+22, r24	; 0x16
			hidSendBuffer[23] = 0xAD;
    1442:	8d ea       	ldi	r24, 0xAD	; 173
    1444:	8f 8b       	std	Y+23, r24	; 0x17
			request_num = 0x00;
    1446:	10 92 5b 02 	sts	0x025B, r1
			seq_num = 0x00;
    144a:	10 92 64 02 	sts	0x0264, r1
			*ReportSize = GENERIC_REPORT_SIZE;
    144e:	80 e2       	ldi	r24, 0x20	; 32
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	f8 01       	movw	r30, r16
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
			return true;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	a3 c0       	rjmp	.+326    	; 0x15a2 <CALLBACK_HID_Device_CreateHIDReport+0x19c>
			break;
			
		case 0x8B:	//MAP being requested by host
			cli();
    145c:	f8 94       	cli
			//KillStuff();
			hidSendBuffer[0]  = 0xAB;	// Header
    145e:	8b ea       	ldi	r24, 0xAB	; 171
    1460:	88 83       	st	Y, r24
			hidSendBuffer[1]  = 0xCD;
    1462:	8d ec       	ldi	r24, 0xCD	; 205
    1464:	89 83       	std	Y+1, r24	; 0x01
			hidSendBuffer[2]  = 0x8B;
    1466:	8b e8       	ldi	r24, 0x8B	; 139
    1468:	8a 83       	std	Y+2, r24	; 0x02
			hidSendBuffer[3]  = (seq_num | 0x80);	// Echo back as an ACK
    146a:	80 91 64 02 	lds	r24, 0x0264
    146e:	80 68       	ori	r24, 0x80	; 128
    1470:	8b 83       	std	Y+3, r24	; 0x03
		
			if(seq_num)
    1472:	80 91 64 02 	lds	r24, 0x0264
    1476:	88 23       	and	r24, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <CALLBACK_HID_Device_CreateHIDReport+0x76>
    147a:	46 c0       	rjmp	.+140    	; 0x1508 <CALLBACK_HID_Device_CreateHIDReport+0x102>
			{
				BUFFERindex = 4;
				MAPindex_start = (uint8_t)((seq_num-1)*10);
    147c:	80 91 64 02 	lds	r24, 0x0264
    1480:	81 50       	subi	r24, 0x01	; 1
    1482:	e8 2e       	mov	r14, r24
    1484:	ee 0c       	add	r14, r14
    1486:	ee 0c       	add	r14, r14
    1488:	e8 0e       	add	r14, r24
    148a:	ee 0c       	add	r14, r14
    148c:	de 2c       	mov	r13, r14
				MAPindex_end = MAPindex_start + 10;
    148e:	0f 2e       	mov	r0, r31
    1490:	fa e0       	ldi	r31, 0x0A	; 10
    1492:	ff 2e       	mov	r15, r31
    1494:	f0 2d       	mov	r31, r0
    1496:	fe 0c       	add	r15, r14
				// put data into MSG from EEPROM
				if(MAPindex_end<101)	// Generic bounds checking, should add error code in msg
    1498:	f4 e6       	ldi	r31, 0x64	; 100
    149a:	ff 15       	cp	r31, r15
    149c:	a8 f1       	brcs	.+106    	; 0x1508 <CALLBACK_HID_Device_CreateHIDReport+0x102>
				{
					eeprom_busy_wait();
    149e:	f9 99       	sbic	0x1f, 1	; 31
    14a0:	fe cf       	rjmp	.-4      	; 0x149e <CALLBACK_HID_Device_CreateHIDReport+0x98>
					if((PINB & 0x20))	// LOAD MAP 2
    14a2:	1d 9b       	sbis	0x03, 5	; 3
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <CALLBACK_HID_Device_CreateHIDReport+0xb0>
					{
						hidSendBuffer[29] = eeprom_read_byte((uint8_t*)&MAP2_STATIC);
    14a6:	8a ec       	ldi	r24, 0xCA	; 202
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 c0 14 	call	0x2980	; 0x2980 <__eerd_byte_m16u2>
    14ae:	8d 8f       	std	Y+29, r24	; 0x1d
					else				// LOAD MAP 1
					{
						hidSendBuffer[29] = eeprom_read_byte((uint8_t*)&MAP1_STATIC);
					}
				
					for(MAPindex = MAPindex_start; MAPindex<MAPindex_end; MAPindex++)
    14b0:	df 14       	cp	r13, r15
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <CALLBACK_HID_Device_CreateHIDReport+0xbc>
    14b4:	29 c0       	rjmp	.+82     	; 0x1508 <CALLBACK_HID_Device_CreateHIDReport+0x102>
					{
						hidSendBuffer[29] = eeprom_read_byte((uint8_t*)&MAP2_STATIC);
					}
					else				// LOAD MAP 1
					{
						hidSendBuffer[29] = eeprom_read_byte((uint8_t*)&MAP1_STATIC);
    14b6:	85 e9       	ldi	r24, 0x95	; 149
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 c0 14 	call	0x2980	; 0x2980 <__eerd_byte_m16u2>
    14be:	8d 8f       	std	Y+29, r24	; 0x1d
    14c0:	f7 cf       	rjmp	.-18     	; 0x14b0 <CALLBACK_HID_Device_CreateHIDReport+0xaa>
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    14c2:	25 96       	adiw	r28, 0x05	; 5
    14c4:	0f 2e       	mov	r0, r31
    14c6:	fa e0       	ldi	r31, 0x0A	; 10
    14c8:	ff 2e       	mov	r15, r31
    14ca:	f0 2d       	mov	r31, r0
						hidSendBuffer[29] = eeprom_read_byte((uint8_t*)&MAP1_STATIC);
					}
				
					for(MAPindex = MAPindex_start; MAPindex<MAPindex_end; MAPindex++)
					{
						eeprom_busy_wait();
    14cc:	f9 99       	sbic	0x1f, 1	; 31
    14ce:	fe cf       	rjmp	.-4      	; 0x14cc <CALLBACK_HID_Device_CreateHIDReport+0xc6>
						if((PINB & 0x20))	// LOAD MAP 2
    14d0:	1d 9b       	sbis	0x03, 5	; 3
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <CALLBACK_HID_Device_CreateHIDReport+0xe0>
						{
							tempMAP = eeprom_read_word((uint16_t*)&MAP2[MAPindex]);
    14d4:	8e 2d       	mov	r24, r14
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	80 50       	subi	r24, 0x00	; 0
    14de:	90 40       	sbci	r25, 0x00	; 0
    14e0:	0e 94 c8 14 	call	0x2990	; 0x2990 <__eerd_word_m16u2>
    14e4:	08 c0       	rjmp	.+16     	; 0x14f6 <CALLBACK_HID_Device_CreateHIDReport+0xf0>
						}
						else				// LOAD MAP 1
						{
							tempMAP = eeprom_read_word((uint16_t*)&MAP1[MAPindex]);
    14e6:	8e 2d       	mov	r24, r14
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	85 53       	subi	r24, 0x35	; 53
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	0e 94 c8 14 	call	0x2990	; 0x2990 <__eerd_word_m16u2>
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    14f6:	fe 01       	movw	r30, r28
    14f8:	31 97       	sbiw	r30, 0x01	; 1
						}
						else				// LOAD MAP 1
						{
							tempMAP = eeprom_read_word((uint16_t*)&MAP1[MAPindex]);
						}
						hidSendBuffer[BUFFERindex] = (tempMAP & 0xFF00) >> 8; // MSB
    14fa:	90 83       	st	Z, r25
						++BUFFERindex;
						hidSendBuffer[BUFFERindex] = (tempMAP & 0x00FF);		// LSB
    14fc:	88 83       	st	Y, r24
					else				// LOAD MAP 1
					{
						hidSendBuffer[29] = eeprom_read_byte((uint8_t*)&MAP1_STATIC);
					}
				
					for(MAPindex = MAPindex_start; MAPindex<MAPindex_end; MAPindex++)
    14fe:	e3 94       	inc	r14
    1500:	fa 94       	dec	r15
    1502:	22 96       	adiw	r28, 0x02	; 2
    1504:	f1 10       	cpse	r15, r1
    1506:	e2 cf       	rjmp	.-60     	; 0x14cc <CALLBACK_HID_Device_CreateHIDReport+0xc6>
						hidSendBuffer[BUFFERindex] = (tempMAP & 0x00FF);		// LSB
						++BUFFERindex;
					}
				}
			}
			request_num = 0x00;
    1508:	10 92 5b 02 	sts	0x025B, r1
			seq_num = 0x00;
    150c:	10 92 64 02 	sts	0x0264, r1
			*ReportSize = GENERIC_REPORT_SIZE;	
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	f8 01       	movw	r30, r16
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
			sei();
    151a:	78 94       	sei
			return true;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	41 c0       	rjmp	.+130    	; 0x15a2 <CALLBACK_HID_Device_CreateHIDReport+0x19c>
		break;
		
		case 0x01:
						hidSendBuffer[0]  = 0xAB;	// Header
    1520:	8b ea       	ldi	r24, 0xAB	; 171
    1522:	88 83       	st	Y, r24
						hidSendBuffer[1]  = 0xCD;
    1524:	8d ec       	ldi	r24, 0xCD	; 205
    1526:	89 83       	std	Y+1, r24	; 0x01
						hidSendBuffer[2]  = 0x01;	// MSG Type: Data Packet
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	8a 83       	std	Y+2, r24	; 0x02
						//  RPM and timing data
						hidSendBuffer[3]  = timer1H_copy;
    152c:	80 91 68 02 	lds	r24, 0x0268
    1530:	8b 83       	std	Y+3, r24	; 0x03
						hidSendBuffer[4]  = timer1L_copy;
    1532:	80 91 61 02 	lds	r24, 0x0261
    1536:	8c 83       	std	Y+4, r24	; 0x04
						hidSendBuffer[5]  = timer1_OVF_RPM_copy;
    1538:	80 91 59 02 	lds	r24, 0x0259
    153c:	8d 83       	std	Y+5, r24	; 0x05
						hidSendBuffer[6]  = tcA_high;
    153e:	80 91 5d 02 	lds	r24, 0x025D
    1542:	8e 83       	std	Y+6, r24	; 0x06
						hidSendBuffer[7]  = tcA_low;
    1544:	80 91 5f 02 	lds	r24, 0x025F
    1548:	8f 83       	std	Y+7, r24	; 0x07
						hidSendBuffer[8]  = tcB_high;
    154a:	80 91 67 02 	lds	r24, 0x0267
    154e:	88 87       	std	Y+8, r24	; 0x08
						hidSendBuffer[9]  = tcB_low;
    1550:	80 91 6b 02 	lds	r24, 0x026B
    1554:	89 87       	std	Y+9, r24	; 0x09
						//	EGT and CHT data
						hidSendBuffer[16] = egt_h;
    1556:	80 91 5c 02 	lds	r24, 0x025C
    155a:	88 8b       	std	Y+16, r24	; 0x10
						hidSendBuffer[17] = egt_l;
    155c:	80 91 5e 02 	lds	r24, 0x025E
    1560:	89 8b       	std	Y+17, r24	; 0x11
						hidSendBuffer[18] = cht_h;
    1562:	80 91 60 02 	lds	r24, 0x0260
    1566:	8a 8b       	std	Y+18, r24	; 0x12
						hidSendBuffer[19] = cht_l;
    1568:	80 91 65 02 	lds	r24, 0x0265
    156c:	8b 8b       	std	Y+19, r24	; 0x13
						
						//	Current MAP number
						hidSendBuffer[20] = map_num;
    156e:	80 91 5a 02 	lds	r24, 0x025A
    1572:	8c 8b       	std	Y+20, r24	; 0x14
						hidSendBuffer[21] = temp_rset;
    1574:	80 91 56 02 	lds	r24, 0x0256
    1578:	8d 8b       	std	Y+21, r24	; 0x15
						
						hidSendBuffer[22] = MAP_STATIC_TEMP;
    157a:	80 91 63 02 	lds	r24, 0x0263
    157e:	8e 8b       	std	Y+22, r24	; 0x16
						hidSendBuffer[23] = msg_count++;
    1580:	80 91 da 01 	lds	r24, 0x01DA
    1584:	8f 8b       	std	Y+23, r24	; 0x17
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	80 93 da 01 	sts	0x01DA, r24
						*ReportSize = GENERIC_REPORT_SIZE;	
    158c:	80 e2       	ldi	r24, 0x20	; 32
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	f8 01       	movw	r30, r16
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	80 83       	st	Z, r24
		break;
			
	}

	
	return false;
    1596:	80 e0       	ldi	r24, 0x00	; 0
						hidSendBuffer[21] = temp_rset;
						
						hidSendBuffer[22] = MAP_STATIC_TEMP;
						hidSendBuffer[23] = msg_count++;
						*ReportSize = GENERIC_REPORT_SIZE;	
		break;
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <CALLBACK_HID_Device_CreateHIDReport+0x19c>
		
		default:
			*ReportSize = 0;
    159a:	f8 01       	movw	r30, r16
    159c:	11 82       	std	Z+1, r1	; 0x01
    159e:	10 82       	st	Z, r1
		break;
			
	}

	
	return false;
    15a0:	80 e0       	ldi	r24, 0x00	; 0
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	08 95       	ret

000015b2 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	e9 01       	movw	r28, r18
	uint8_t MAPindex_start;
	uint8_t MAPindex_end;
	uint8_t BUFFERindex;
	
	// Do we have a command request from the host?
	if (USB_ControlRequest.bRequest == HID_REQ_SetReport)
    15c2:	80 91 72 02 	lds	r24, 0x0272
    15c6:	89 30       	cpi	r24, 0x09	; 9
    15c8:	09 f0       	breq	.+2      	; 0x15cc <CALLBACK_HID_Device_ProcessHIDReport+0x1a>
    15ca:	86 c0       	rjmp	.+268    	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
	{
	// Ensure this is the type of report we are interested in
	if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15cc:	80 91 71 02 	lds	r24, 0x0271
    15d0:	81 32       	cpi	r24, 0x21	; 33
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <CALLBACK_HID_Device_ProcessHIDReport+0x24>
    15d4:	81 c0       	rjmp	.+258    	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
	{
	if((hidReceiveBuffer[0]==0xAB) &&(hidReceiveBuffer[1]==0xCD))
    15d6:	88 81       	ld	r24, Y
    15d8:	8b 3a       	cpi	r24, 0xAB	; 171
    15da:	09 f0       	breq	.+2      	; 0x15de <CALLBACK_HID_Device_ProcessHIDReport+0x2c>
    15dc:	7d c0       	rjmp	.+250    	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	8d 3c       	cpi	r24, 0xCD	; 205
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <CALLBACK_HID_Device_ProcessHIDReport+0x34>
    15e4:	79 c0       	rjmp	.+242    	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
	{
		// Process GenericHID command packet
		switch(hidReceiveBuffer[2])	// THIS LOCATION NEED TO CHANGE
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	8b 38       	cpi	r24, 0x8B	; 139
    15ea:	09 f4       	brne	.+2      	; 0x15ee <CALLBACK_HID_Device_ProcessHIDReport+0x3c>
    15ec:	64 c0       	rjmp	.+200    	; 0x16b6 <CALLBACK_HID_Device_ProcessHIDReport+0x104>
    15ee:	20 f4       	brcc	.+8      	; 0x15f8 <CALLBACK_HID_Device_ProcessHIDReport+0x46>
    15f0:	8a 38       	cpi	r24, 0x8A	; 138
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <CALLBACK_HID_Device_ProcessHIDReport+0x44>
    15f4:	71 c0       	rjmp	.+226    	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <CALLBACK_HID_Device_ProcessHIDReport+0x54>
    15f8:	8c 38       	cpi	r24, 0x8C	; 140
    15fa:	09 f4       	brne	.+2      	; 0x15fe <CALLBACK_HID_Device_ProcessHIDReport+0x4c>
    15fc:	63 c0       	rjmp	.+198    	; 0x16c4 <CALLBACK_HID_Device_ProcessHIDReport+0x112>
    15fe:	8f 38       	cpi	r24, 0x8F	; 143
    1600:	09 f0       	breq	.+2      	; 0x1604 <CALLBACK_HID_Device_ProcessHIDReport+0x52>
    1602:	6a c0       	rjmp	.+212    	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
    1604:	62 c0       	rjmp	.+196    	; 0x16ca <CALLBACK_HID_Device_ProcessHIDReport+0x118>
		{
					
			case 0x8A:	// Command 0x8A - Getting a MAP from HOST
				cli();
    1606:	f8 94       	cli
				request_num = 0x8A;
    1608:	8a e8       	ldi	r24, 0x8A	; 138
    160a:	80 93 5b 02 	sts	0x025B, r24
				seq_num = hidReceiveBuffer[3];
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	80 93 64 02 	sts	0x0264, r24
				if(seq_num)
    1614:	80 91 64 02 	lds	r24, 0x0264
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <CALLBACK_HID_Device_ProcessHIDReport+0x6c>
    161c:	4a c0       	rjmp	.+148    	; 0x16b2 <CALLBACK_HID_Device_ProcessHIDReport+0x100>
				{
					// pull data from MSG and put it into EEPROM
					BUFFERindex = 4;
					MAPindex_start = (uint8_t)((seq_num-1)*10);
    161e:	80 91 64 02 	lds	r24, 0x0264
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	e8 2e       	mov	r14, r24
    1626:	ee 0c       	add	r14, r14
    1628:	ee 0c       	add	r14, r14
    162a:	e8 0e       	add	r14, r24
    162c:	ee 0c       	add	r14, r14
    162e:	de 2c       	mov	r13, r14
					MAPindex_end = MAPindex_start + 10;
    1630:	0f 2e       	mov	r0, r31
    1632:	fa e0       	ldi	r31, 0x0A	; 10
    1634:	ff 2e       	mov	r15, r31
    1636:	f0 2d       	mov	r31, r0
    1638:	fe 0c       	add	r15, r14
					// put data into MSG from EEPROM
					if(MAPindex_end<101)	// Generic bounds checking, should add error code in msg
    163a:	84 e6       	ldi	r24, 0x64	; 100
    163c:	8f 15       	cp	r24, r15
    163e:	c8 f1       	brcs	.+114    	; 0x16b2 <CALLBACK_HID_Device_ProcessHIDReport+0x100>
					{
						eeprom_busy_wait();
    1640:	f9 99       	sbic	0x1f, 1	; 31
    1642:	fe cf       	rjmp	.-4      	; 0x1640 <CALLBACK_HID_Device_ProcessHIDReport+0x8e>
						if((PINB & 0x20))	// LOAD MAP 2
    1644:	1d 9b       	sbis	0x03, 5	; 3
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <CALLBACK_HID_Device_ProcessHIDReport+0xa6>
						{
							eeprom_write_byte(((uint8_t*)&MAP2_STATIC),hidReceiveBuffer[29]);
    1648:	6d 8d       	ldd	r22, Y+29	; 0x1d
    164a:	8a ec       	ldi	r24, 0xCA	; 202
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 cd 14 	call	0x299a	; 0x299a <__eewr_byte_m16u2>
						}
						else				// LOAD MAP 1
						{
							eeprom_write_byte(((uint8_t*)&MAP1_STATIC),hidReceiveBuffer[29]);
						}
						for(MAPindex = MAPindex_start; MAPindex<MAPindex_end; MAPindex++)
    1652:	df 14       	cp	r13, r15
    1654:	38 f0       	brcs	.+14     	; 0x1664 <CALLBACK_HID_Device_ProcessHIDReport+0xb2>
    1656:	2d c0       	rjmp	.+90     	; 0x16b2 <CALLBACK_HID_Device_ProcessHIDReport+0x100>
						{
							eeprom_write_byte(((uint8_t*)&MAP2_STATIC),hidReceiveBuffer[29]);
						}
						else				// LOAD MAP 1
						{
							eeprom_write_byte(((uint8_t*)&MAP1_STATIC),hidReceiveBuffer[29]);
    1658:	6d 8d       	ldd	r22, Y+29	; 0x1d
    165a:	85 e9       	ldi	r24, 0x95	; 149
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	0e 94 cd 14 	call	0x299a	; 0x299a <__eewr_byte_m16u2>
    1662:	f7 cf       	rjmp	.-18     	; 0x1652 <CALLBACK_HID_Device_ProcessHIDReport+0xa0>
 *  \param[in] ReportID    Report ID of the received report from the host
 *  \param[in] ReportType  The type of report that the host has sent, either HID_REPORT_ITEM_Out or HID_REPORT_ITEM_Feature
 *  \param[in] ReportData  Pointer to a buffer where the received report has been stored
 *  \param[in] ReportSize  Size in bytes of the received HID report
 */
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    1664:	25 96       	adiw	r28, 0x05	; 5
    1666:	0f 2e       	mov	r0, r31
    1668:	fa e0       	ldi	r31, 0x0A	; 10
    166a:	ff 2e       	mov	r15, r31
    166c:	f0 2d       	mov	r31, r0
    166e:	fe 01       	movw	r30, r28
    1670:	31 97       	sbiw	r30, 0x01	; 1
							eeprom_write_byte(((uint8_t*)&MAP1_STATIC),hidReceiveBuffer[29]);
						}
						for(MAPindex = MAPindex_start; MAPindex<MAPindex_end; MAPindex++)
						{
							tempMAP = 0x00;
							tempMAP = (hidReceiveBuffer[BUFFERindex] << 8) + hidReceiveBuffer[BUFFERindex+1];
    1672:	10 81       	ld	r17, Z
    1674:	00 e0       	ldi	r16, 0x00	; 0
    1676:	88 81       	ld	r24, Y
    1678:	b8 01       	movw	r22, r16
    167a:	68 0f       	add	r22, r24
    167c:	71 1d       	adc	r23, r1
							eeprom_busy_wait();
    167e:	f9 99       	sbic	0x1f, 1	; 31
    1680:	fe cf       	rjmp	.-4      	; 0x167e <CALLBACK_HID_Device_ProcessHIDReport+0xcc>
							if((PINB & 0x20))	// LOAD MAP 2
    1682:	1d 9b       	sbis	0x03, 5	; 3
    1684:	09 c0       	rjmp	.+18     	; 0x1698 <CALLBACK_HID_Device_ProcessHIDReport+0xe6>
							{
								eeprom_write_word(((uint16_t*)&MAP2[MAPindex]), tempMAP);
    1686:	8e 2d       	mov	r24, r14
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	80 50       	subi	r24, 0x00	; 0
    1690:	90 40       	sbci	r25, 0x00	; 0
    1692:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__eewr_word_m16u2>
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <CALLBACK_HID_Device_ProcessHIDReport+0xf6>
							}
							else				// LOAD MAP 1
							{
								eeprom_write_word(((uint16_t*)&MAP1[MAPindex]), tempMAP);
    1698:	8e 2d       	mov	r24, r14
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	85 53       	subi	r24, 0x35	; 53
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__eewr_word_m16u2>
						}
						else				// LOAD MAP 1
						{
							eeprom_write_byte(((uint8_t*)&MAP1_STATIC),hidReceiveBuffer[29]);
						}
						for(MAPindex = MAPindex_start; MAPindex<MAPindex_end; MAPindex++)
    16a8:	e3 94       	inc	r14
    16aa:	fa 94       	dec	r15
    16ac:	22 96       	adiw	r28, 0x02	; 2
    16ae:	f1 10       	cpse	r15, r1
    16b0:	de cf       	rjmp	.-68     	; 0x166e <CALLBACK_HID_Device_ProcessHIDReport+0xbc>
							++BUFFERindex;
							++BUFFERindex;
						}
					}
				}
				sei();
    16b2:	78 94       	sei
			break;
    16b4:	11 c0       	rjmp	.+34     	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
					
			case 0x8B:	// Command 0x8B - Send MAP to HOST
				request_num = 0x8B;
    16b6:	8b e8       	ldi	r24, 0x8B	; 139
    16b8:	80 93 5b 02 	sts	0x025B, r24
				seq_num = hidReceiveBuffer[3];
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	80 93 64 02 	sts	0x0264, r24
			break;
    16c2:	0a c0       	rjmp	.+20     	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
					
			case 0x8C:	// Command 0x8C - Set MODE to FW loading, i.e. jump to bootloader
				cli();
    16c4:	f8 94       	cli
				Jump_To_Bootloader();					
    16c6:	5e dc       	rcall	.-1860   	; 0xf84 <Jump_To_Bootloader>
			break;
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <CALLBACK_HID_Device_ProcessHIDReport+0x126>
					
			case 0x8F:	// Command 0x8F - Reset FF
				cli();
    16ca:	f8 94       	cli
				first_cycle = 1;	// restarts data collection cycle
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 69 02 	sts	0x0269, r24
				request_num = 0x01;	// Gets us sending back data packets
    16d2:	80 93 5b 02 	sts	0x025B, r24
				sei();
    16d6:	78 94       	sei
			break;
		} // End of switch(hidReceiveBuffer[0])
	}
	}
	}
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	08 95       	ret

000016e8 <__vector_21>:
//***********************************************************
//***********************************************************

// This interrupt routine is run approx 61 times per second.
ISR(TIMER0_OVF_vect)
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	8f 93       	push	r24
	static uint8_t count=0;
	// Interrupt after 156 counts for 100 Hz, so preload 256-156 = 100
	// ((16000000/1024)/ 100) = 156
	TCNT0 = 100;
    16f4:	84 e6       	ldi	r24, 0x64	; 100
    16f6:	86 bd       	out	0x26, r24	; 38

	if(++count >25)	// 100hz/ 25 = 250 msec
    16f8:	80 91 db 01 	lds	r24, 0x01DB
    16fc:	8f 5f       	subi	r24, 0xFF	; 255
    16fe:	80 93 db 01 	sts	0x01DB, r24
    1702:	8a 31       	cpi	r24, 0x1A	; 26
    1704:	28 f0       	brcs	.+10     	; 0x1710 <__vector_21+0x28>
	{
		t0OVF_trigger = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 57 02 	sts	0x0257, r24
		count = 0;
    170c:	10 92 db 01 	sts	0x01DB, r1
	}

}
    1710:	8f 91       	pop	r24
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_15>:

ISR(TIMER1_COMPA_vect)
{
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	8f 93       	push	r24
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31

	// THIS IS WHERE THE TIMER1 OUTPUT MATCHES THE PRELOADED OUTPUT
	// FROM PREVIOUS RPM CALC AND ADV RET CALC
	// SO ITS TIME TO TRIGGER THE CDI
	
	if(!first_cycle)
    172c:	80 91 69 02 	lds	r24, 0x0269
    1730:	81 11       	cpse	r24, r1
    1732:	14 c0       	rjmp	.+40     	; 0x175c <__vector_15+0x40>
	{
		// 	Get the high and low count from timer 1
		// 	Grab them a byte at a time to make it easier to send
		tcA_low  = TCNT1L;
    1734:	80 91 84 00 	lds	r24, 0x0084
    1738:	80 93 5f 02 	sts	0x025F, r24
		tcA_high = TCNT1H;
    173c:	80 91 85 00 	lds	r24, 0x0085
    1740:	80 93 5d 02 	sts	0x025D, r24
		PORTD |= _BV(IGN_TRIGGER);	//  HIGH 
    1744:	58 9a       	sbi	0x0b, 0	; 11
		// Disable CompA, Enable CompB
		TIMSK1&=~(1<<OCIE1A); 				   	// Disable timer1A compare
    1746:	ef e6       	ldi	r30, 0x6F	; 111
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8d 7f       	andi	r24, 0xFD	; 253
    174e:	80 83       	st	Z, r24
		TIFR1 = (1<<OCF1B); 					// Clear timer1B compare flag
    1750:	84 e0       	ldi	r24, 0x04	; 4
    1752:	86 bb       	out	0x16, r24	; 22
		TIMSK1 |= (1<<OCIE1B); 					// Enable timer1B compare
    1754:	80 81       	ld	r24, Z
    1756:	84 60       	ori	r24, 0x04	; 4
    1758:	80 83       	st	Z, r24
    175a:	08 c0       	rjmp	.+16     	; 0x176c <__vector_15+0x50>
	}
	
	else 
	{
		// Disable compA&B
		TIMSK1&=~(1<<OCIE1A); 				   	// Disable timer1A compare
    175c:	ef e6       	ldi	r30, 0x6F	; 111
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	8d 7f       	andi	r24, 0xFD	; 253
    1764:	80 83       	st	Z, r24
		TIMSK1&=~(1<<OCIE1B); 				   	// Disable timer1B compare
    1766:	80 81       	ld	r24, Z
    1768:	8b 7f       	andi	r24, 0xFB	; 251
    176a:	80 83       	st	Z, r24
	}	
}
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	8f 91       	pop	r24
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_16>:


ISR(TIMER1_COMPB_vect)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	8f 93       	push	r24
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
	PORTD &= ~(_BV(IGN_TRIGGER));		//  LOW fires at this point?
    178c:	58 98       	cbi	0x0b, 0	; 11
	TIMSK1&=~(1<<OCIE1A); 				// Disable timer1A compare
    178e:	ef e6       	ldi	r30, 0x6F	; 111
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8d 7f       	andi	r24, 0xFD	; 253
    1796:	80 83       	st	Z, r24
	TIMSK1&=~(1<<OCIE1B); 				// Disable timer1B compare
    1798:	80 81       	ld	r24, Z
    179a:	8b 7f       	andi	r24, 0xFB	; 251
    179c:	80 83       	st	Z, r24
	
	if(!first_cycle)
    179e:	80 91 69 02 	lds	r24, 0x0269
    17a2:	81 11       	cpse	r24, r1
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <__vector_16+0x3a>
	{
		tcB_low  = TCNT1L;
    17a6:	80 91 84 00 	lds	r24, 0x0084
    17aa:	80 93 6b 02 	sts	0x026B, r24
		tcB_high = TCNT1H;
    17ae:	80 91 85 00 	lds	r24, 0x0085
    17b2:	80 93 67 02 	sts	0x0267, r24
	}
}
    17b6:	ff 91       	pop	r31
    17b8:	ef 91       	pop	r30
    17ba:	8f 91       	pop	r24
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	0f 90       	pop	r0
    17c2:	1f 90       	pop	r1
    17c4:	18 95       	reti

000017c6 <__vector_18>:


ISR(TIMER1_OVF_vect)
{
    17c6:	1f 92       	push	r1
    17c8:	0f 92       	push	r0
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	0f 92       	push	r0
    17ce:	11 24       	eor	r1, r1
    17d0:	8f 93       	push	r24
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
	// 	IF this timer overflows more than 146 times,
	//  the engine is running at less than 100 RPMs.
	if(++timer1_OVF_RPM > 146)
    17d6:	80 91 6a 02 	lds	r24, 0x026A
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	80 93 6a 02 	sts	0x026A, r24
    17e0:	83 39       	cpi	r24, 0x93	; 147
    17e2:	70 f0       	brcs	.+28     	; 0x1800 <__vector_18+0x3a>
	{
		// Disable comparators
		TIMSK1&=~(1<<OCIE1A); 				   	// Disable timer1A compare
    17e4:	ef e6       	ldi	r30, 0x6F	; 111
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8d 7f       	andi	r24, 0xFD	; 253
    17ec:	80 83       	st	Z, r24
		TIMSK1&=~(1<<OCIE1B); 				   	// Disable timer1B compare
    17ee:	80 81       	ld	r24, Z
    17f0:	8b 7f       	andi	r24, 0xFB	; 251
    17f2:	80 83       	st	Z, r24
		first_cycle = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 69 02 	sts	0x0269, r24
		timer1_OVF_RPM = 0;
    17fa:	10 92 6a 02 	sts	0x026A, r1
		// Enable the pass thru circuit
		PORTD &= ~(_BV(IGN_TRIGGER));	//  LOW
    17fe:	58 98       	cbi	0x0b, 0	; 11
	}
}
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	8f 91       	pop	r24
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_2>:

//*************************************************************
//	MAX9924 triggered input from reluctor
//*************************************************************
ISR(INT1_vect)  
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	8f 93       	push	r24
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
	if(!reluctor_trigger)	// If your not already set (sort of a debounce?)
    1820:	80 91 55 02 	lds	r24, 0x0255
    1824:	81 11       	cpse	r24, r1
    1826:	0e c0       	rjmp	.+28     	; 0x1844 <__vector_2+0x34>
	{
	// 	Get the high and low count from timer 1
	// 	Grab them a byte at a time to make it easier to send
	// 	via serial port. Might be a smarter way to do this later.
		timer1L  = TCNT1L;
    1828:	e4 e8       	ldi	r30, 0x84	; 132
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 93 58 02 	sts	0x0258, r24
		timer1H  = TCNT1H;
    1832:	80 91 85 00 	lds	r24, 0x0085
    1836:	80 93 62 02 	sts	0x0262, r24
		TCNT1 = 0;				// 	RESET timer1
    183a:	11 82       	std	Z+1, r1	; 0x01
    183c:	10 82       	st	Z, r1
		reluctor_trigger = 1;	// signal main to handle CDI trigger
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	80 93 55 02 	sts	0x0255, r24
	}
}
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	8f 91       	pop	r24
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <__vector_23>:
//*************************************************************
//	ISR to manage the reception of data from the serial port 
//	placing received bytes into a circular buffer
//*************************************************************
ISR(USART1_RX_vect)
{	
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;	
    186e:	80 91 ce 00 	lds	r24, 0x00CE
	if(ReceivedByte == 0x20)	{return;}		// Ignore spaces
    1872:	80 32       	cpi	r24, 0x20	; 32
    1874:	01 f1       	breq	.+64     	; 0x18b6 <__vector_23+0x62>
	if(ReceivedByte == 0x0D)	{CR_flag = 1;}	// Received a Carriage Return
    1876:	8d 30       	cpi	r24, 0x0D	; 13
    1878:	19 f4       	brne	.+6      	; 0x1880 <__vector_23+0x2c>
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	90 93 54 02 	sts	0x0254, r25
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    1880:	e8 e4       	ldi	r30, 0x48	; 72
    1882:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
    1884:	a0 81       	ld	r26, Z
    1886:	b1 81       	ldd	r27, Z+1	; 0x01
    1888:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
    1894:	26 81       	ldd	r18, Z+6	; 0x06
    1896:	37 81       	ldd	r19, Z+7	; 0x07
    1898:	82 17       	cp	r24, r18
    189a:	93 07       	cpc	r25, r19
    189c:	21 f4       	brne	.+8      	; 0x18a6 <__vector_23+0x52>
			  Buffer->In = Buffer->Start;
    189e:	84 81       	ldd	r24, Z+4	; 0x04
    18a0:	95 81       	ldd	r25, Z+5	; 0x05
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    18a6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    18a8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
    18aa:	82 85       	ldd	r24, Z+10	; 0x0a
    18ac:	93 85       	ldd	r25, Z+11	; 0x0b
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	93 87       	std	Z+11, r25	; 0x0b
    18b2:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    18b4:	2f bf       	out	0x3f, r18	; 63
	RingBuffer_Insert(&BTtoFF_Buffer, ReceivedByte);
	
}
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	bf 91       	pop	r27
    18bc:	af 91       	pop	r26
    18be:	9f 91       	pop	r25
    18c0:	8f 91       	pop	r24
    18c2:	3f 91       	pop	r19
    18c4:	2f 91       	pop	r18
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	0f 90       	pop	r0
    18cc:	1f 90       	pop	r1
    18ce:	18 95       	reti

000018d0 <__vector_25>:

ISR(USART1_TX_vect)
{
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	0f 92       	push	r0
    18d8:	11 24       	eor	r1, r1
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	8f 93       	push	r24
    18e0:	9f 93       	push	r25
    18e2:	af 93       	push	r26
    18e4:	bf 93       	push	r27
    18e6:	ef 93       	push	r30
    18e8:	ff 93       	push	r31
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    18ea:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    18ec:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
    18ee:	80 91 26 02 	lds	r24, 0x0226
    18f2:	90 91 27 02 	lds	r25, 0x0227
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    18f6:	2f bf       	out	0x3f, r18	; 63
	if( (!(RingBuffer_IsEmpty(&FFtoBT_Buffer))))
    18f8:	89 2b       	or	r24, r25
    18fa:	d1 f0       	breq	.+52     	; 0x1930 <__vector_25+0x60>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    18fc:	ec e1       	ldi	r30, 0x1C	; 28
    18fe:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
    1900:	a2 81       	ldd	r26, Z+2	; 0x02
    1902:	b3 81       	ldd	r27, Z+3	; 0x03
    1904:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
    1906:	b3 83       	std	Z+3, r27	; 0x03
    1908:	a2 83       	std	Z+2, r26	; 0x02
    190a:	86 81       	ldd	r24, Z+6	; 0x06
    190c:	97 81       	ldd	r25, Z+7	; 0x07
    190e:	a8 17       	cp	r26, r24
    1910:	b9 07       	cpc	r27, r25
    1912:	21 f4       	brne	.+8      	; 0x191c <__vector_25+0x4c>
			  Buffer->Out = Buffer->Start;
    1914:	84 81       	ldd	r24, Z+4	; 0x04
    1916:	95 81       	ldd	r25, Z+5	; 0x05
    1918:	93 83       	std	Z+3, r25	; 0x03
    191a:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    191c:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    191e:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
    1920:	82 85       	ldd	r24, Z+10	; 0x0a
    1922:	93 85       	ldd	r25, Z+11	; 0x0b
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	93 87       	std	Z+11, r25	; 0x0b
    1928:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    192a:	3f bf       	out	0x3f, r19	; 63
	{
		UDR1 = RingBuffer_Remove(&FFtoBT_Buffer);	// Send next byte in buffer
    192c:	20 93 ce 00 	sts	0x00CE, r18
	}
}
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_default>:
ISR(BADISR_vect)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	8f 93       	push	r24
	bad_count++;
    1956:	80 91 66 02 	lds	r24, 0x0266
    195a:	8f 5f       	subi	r24, 0xFF	; 255
    195c:	80 93 66 02 	sts	0x0266, r24
}
    1960:	8f 91       	pop	r24
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    196c:	3f 92       	push	r3
    196e:	4f 92       	push	r4
    1970:	5f 92       	push	r5
    1972:	6f 92       	push	r6
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	00 d0       	rcall	.+0      	; 0x1990 <HID_Device_ProcessControlRequest+0x24>
    1990:	1f 92       	push	r1
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1998:	ed b6       	in	r14, 0x3d	; 61
    199a:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    199c:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    19a0:	83 ff       	sbrs	r24, 3
    19a2:	1f c1       	rjmp	.+574    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    19a4:	f6 01       	movw	r30, r12
    19a6:	80 81       	ld	r24, Z
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	20 91 75 02 	lds	r18, 0x0275
    19ae:	30 91 76 02 	lds	r19, 0x0276
    19b2:	28 17       	cp	r18, r24
    19b4:	39 07       	cpc	r19, r25
    19b6:	09 f0       	breq	.+2      	; 0x19ba <HID_Device_ProcessControlRequest+0x4e>
    19b8:	14 c1       	rjmp	.+552    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
	  return;

	switch (USB_ControlRequest.bRequest)
    19ba:	80 91 72 02 	lds	r24, 0x0272
    19be:	83 30       	cpi	r24, 0x03	; 3
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <HID_Device_ProcessControlRequest+0x58>
    19c2:	ac c0       	rjmp	.+344    	; 0x1b1c <HID_Device_ProcessControlRequest+0x1b0>
    19c4:	30 f4       	brcc	.+12     	; 0x19d2 <HID_Device_ProcessControlRequest+0x66>
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <HID_Device_ProcessControlRequest+0x7a>
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <HID_Device_ProcessControlRequest+0x64>
    19ce:	09 c1       	rjmp	.+530    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
    19d0:	ed c0       	rjmp	.+474    	; 0x1bac <HID_Device_ProcessControlRequest+0x240>
    19d2:	8a 30       	cpi	r24, 0x0A	; 10
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <HID_Device_ProcessControlRequest+0x6c>
    19d6:	ce c0       	rjmp	.+412    	; 0x1b74 <HID_Device_ProcessControlRequest+0x208>
    19d8:	8b 30       	cpi	r24, 0x0B	; 11
    19da:	09 f4       	brne	.+2      	; 0x19de <HID_Device_ProcessControlRequest+0x72>
    19dc:	b7 c0       	rjmp	.+366    	; 0x1b4c <HID_Device_ProcessControlRequest+0x1e0>
    19de:	89 30       	cpi	r24, 0x09	; 9
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <HID_Device_ProcessControlRequest+0x78>
    19e2:	ff c0       	rjmp	.+510    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
    19e4:	59 c0       	rjmp	.+178    	; 0x1a98 <HID_Device_ProcessControlRequest+0x12c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19e6:	80 91 71 02 	lds	r24, 0x0271
    19ea:	81 3a       	cpi	r24, 0xA1	; 161
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <HID_Device_ProcessControlRequest+0x84>
    19ee:	f9 c0       	rjmp	.+498    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
    19f0:	8d b6       	in	r8, 0x3d	; 61
    19f2:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    19f4:	1a 82       	std	Y+2, r1	; 0x02
    19f6:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    19f8:	e3 e7       	ldi	r30, 0x73	; 115
    19fa:	f2 e0       	ldi	r31, 0x02	; 2
    19fc:	80 81       	ld	r24, Z
    19fe:	11 81       	ldd	r17, Z+1	; 0x01
    1a00:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1a02:	f6 01       	movw	r30, r12
    1a04:	40 85       	ldd	r20, Z+8	; 0x08
    1a06:	8d b7       	in	r24, 0x3d	; 61
    1a08:	9e b7       	in	r25, 0x3e	; 62
    1a0a:	84 1b       	sub	r24, r20
    1a0c:	91 09       	sbc	r25, r1
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	9e bf       	out	0x3e, r25	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	8d bf       	out	0x3d, r24	; 61
    1a18:	ad b6       	in	r10, 0x3d	; 61
    1a1a:	be b6       	in	r11, 0x3e	; 62
    1a1c:	e1 e0       	ldi	r30, 0x01	; 1
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	ae 0e       	add	r10, r30
    1a22:	bf 1e       	adc	r11, r31

				memset(ReportData, 0, sizeof(ReportData));
    1a24:	6a 2c       	mov	r6, r10
    1a26:	7b 2c       	mov	r7, r11
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	8a 2d       	mov	r24, r10
    1a30:	9b 2d       	mov	r25, r11
    1a32:	9f d7       	rcall	.+3902   	; 0x2972 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1a34:	41 2f       	mov	r20, r17
    1a36:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1a38:	8e 01       	movw	r16, r28
    1a3a:	0f 5f       	subi	r16, 0xFF	; 255
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	2a 2d       	mov	r18, r10
    1a40:	3b 2d       	mov	r19, r11
    1a42:	be 01       	movw	r22, r28
    1a44:	6d 5f       	subi	r22, 0xFD	; 253
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	c6 01       	movw	r24, r12
    1a4a:	dd dc       	rcall	.-1606   	; 0x1406 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1a4c:	f6 01       	movw	r30, r12
    1a4e:	26 81       	ldd	r18, Z+6	; 0x06
    1a50:	37 81       	ldd	r19, Z+7	; 0x07
    1a52:	21 15       	cp	r18, r1
    1a54:	31 05       	cpc	r19, r1
    1a56:	39 f0       	breq	.+14     	; 0x1a66 <HID_Device_ProcessControlRequest+0xfa>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1a58:	40 85       	ldd	r20, Z+8	; 0x08
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	6a 2d       	mov	r22, r10
    1a5e:	7b 2d       	mov	r23, r11
    1a60:	82 2f       	mov	r24, r18
    1a62:	93 2f       	mov	r25, r19
    1a64:	7d d7       	rcall	.+3834   	; 0x2960 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a66:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a6a:	08 ee       	ldi	r16, 0xE8	; 232
    1a6c:	10 e0       	ldi	r17, 0x00	; 0
    1a6e:	f8 01       	movw	r30, r16
    1a70:	80 81       	ld	r24, Z
    1a72:	87 7f       	andi	r24, 0xF7	; 247
    1a74:	80 83       	st	Z, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1a76:	69 81       	ldd	r22, Y+1	; 0x01
    1a78:	7a 81       	ldd	r23, Y+2	; 0x02
    1a7a:	86 2d       	mov	r24, r6
    1a7c:	97 2d       	mov	r25, r7
    1a7e:	12 d2       	rcall	.+1060   	; 0x1ea4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 81       	ld	r24, Z
    1a84:	8b 77       	andi	r24, 0x7B	; 123
    1a86:	80 83       	st	Z, r24
    1a88:	88 2d       	mov	r24, r8
    1a8a:	99 2d       	mov	r25, r9
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	9e bf       	out	0x3e, r25	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	8d bf       	out	0x3d, r24	; 61
    1a96:	a5 c0       	rjmp	.+330    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a98:	80 91 71 02 	lds	r24, 0x0271
    1a9c:	81 32       	cpi	r24, 0x21	; 33
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <HID_Device_ProcessControlRequest+0x136>
    1aa0:	a0 c0       	rjmp	.+320    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
    1aa2:	5d b6       	in	r5, 0x3d	; 61
    1aa4:	6e b6       	in	r6, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1aa6:	a0 90 77 02 	lds	r10, 0x0277
    1aaa:	b0 90 78 02 	lds	r11, 0x0278
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1aae:	e3 e7       	ldi	r30, 0x73	; 115
    1ab0:	f2 e0       	ldi	r31, 0x02	; 2
    1ab2:	70 80       	ld	r7, Z
    1ab4:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1ab6:	8d b7       	in	r24, 0x3d	; 61
    1ab8:	9e b7       	in	r25, 0x3e	; 62
    1aba:	8a 19       	sub	r24, r10
    1abc:	9b 09       	sbc	r25, r11
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	9e bf       	out	0x3e, r25	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	8d bf       	out	0x3d, r24	; 61
    1ac8:	8d b6       	in	r8, 0x3d	; 61
    1aca:	9e b6       	in	r9, 0x3e	; 62
    1acc:	e1 e0       	ldi	r30, 0x01	; 1
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8e 0e       	add	r8, r30
    1ad2:	9f 1e       	adc	r9, r31
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ad4:	08 ee       	ldi	r16, 0xE8	; 232
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	f8 01       	movw	r30, r16
    1ada:	80 81       	ld	r24, Z
    1adc:	87 7f       	andi	r24, 0xF7	; 247
    1ade:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1ae0:	b5 01       	movw	r22, r10
    1ae2:	c4 01       	movw	r24, r8
    1ae4:	53 d2       	rcall	.+1190   	; 0x1f8c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	80 81       	ld	r24, Z
    1aea:	8e 77       	andi	r24, 0x7E	; 126
    1aec:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1aee:	21 e0       	ldi	r18, 0x01	; 1
    1af0:	71 10       	cpse	r7, r1
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <HID_Device_ProcessControlRequest+0x18a>
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	85 01       	movw	r16, r10
    1afa:	02 1b       	sub	r16, r18
    1afc:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1afe:	28 0d       	add	r18, r8
    1b00:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1b02:	44 2d       	mov	r20, r4
    1b04:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1b06:	67 2d       	mov	r22, r7
    1b08:	c6 01       	movw	r24, r12
    1b0a:	53 dd       	rcall	.-1370   	; 0x15b2 <CALLBACK_HID_Device_ProcessHIDReport>
    1b0c:	85 2d       	mov	r24, r5
    1b0e:	96 2d       	mov	r25, r6
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	9e bf       	out	0x3e, r25	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	8d bf       	out	0x3d, r24	; 61
    1b1a:	63 c0       	rjmp	.+198    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b1c:	80 91 71 02 	lds	r24, 0x0271
    1b20:	81 3a       	cpi	r24, 0xA1	; 161
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <HID_Device_ProcessControlRequest+0x1ba>
    1b24:	5e c0       	rjmp	.+188    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b26:	e8 ee       	ldi	r30, 0xE8	; 232
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	87 7f       	andi	r24, 0xF7	; 247
    1b2e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b30:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b32:	80 ff       	sbrs	r24, 0
    1b34:	fd cf       	rjmp	.-6      	; 0x1b30 <HID_Device_ProcessControlRequest+0x1c4>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1b36:	f6 01       	movw	r30, r12
    1b38:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b3a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b3e:	e8 ee       	ldi	r30, 0xE8	; 232
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8e 77       	andi	r24, 0x7E	; 126
    1b46:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b48:	cc d3       	rcall	.+1944   	; 0x22e2 <Endpoint_ClearStatusStage>
    1b4a:	4b c0       	rjmp	.+150    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b4c:	80 91 71 02 	lds	r24, 0x0271
    1b50:	81 32       	cpi	r24, 0x21	; 33
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <HID_Device_ProcessControlRequest+0x1ea>
    1b54:	46 c0       	rjmp	.+140    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b56:	e8 ee       	ldi	r30, 0xE8	; 232
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	87 7f       	andi	r24, 0xF7	; 247
    1b5e:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b60:	c0 d3       	rcall	.+1920   	; 0x22e2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1b62:	90 91 73 02 	lds	r25, 0x0273
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	91 11       	cpse	r25, r1
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <HID_Device_ProcessControlRequest+0x202>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	f6 01       	movw	r30, r12
    1b70:	81 87       	std	Z+9, r24	; 0x09
    1b72:	37 c0       	rjmp	.+110    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b74:	80 91 71 02 	lds	r24, 0x0271
    1b78:	81 32       	cpi	r24, 0x21	; 33
    1b7a:	99 f5       	brne	.+102    	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
    1b7c:	e8 ee       	ldi	r30, 0xE8	; 232
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	87 7f       	andi	r24, 0xF7	; 247
    1b84:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b86:	ad d3       	rcall	.+1882   	; 0x22e2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1b88:	80 91 73 02 	lds	r24, 0x0273
    1b8c:	90 91 74 02 	lds	r25, 0x0274
    1b90:	88 27       	eor	r24, r24
    1b92:	00 24       	eor	r0, r0
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	00 1c       	adc	r0, r0
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	00 1c       	adc	r0, r0
    1ba0:	89 2f       	mov	r24, r25
    1ba2:	90 2d       	mov	r25, r0
    1ba4:	f6 01       	movw	r30, r12
    1ba6:	95 87       	std	Z+13, r25	; 0x0d
    1ba8:	84 87       	std	Z+12, r24	; 0x0c
    1baa:	1b c0       	rjmp	.+54     	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1bac:	80 91 71 02 	lds	r24, 0x0271
    1bb0:	81 3a       	cpi	r24, 0xA1	; 161
    1bb2:	b9 f4       	brne	.+46     	; 0x1be2 <HID_Device_ProcessControlRequest+0x276>
    1bb4:	e8 ee       	ldi	r30, 0xE8	; 232
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	87 7f       	andi	r24, 0xF7	; 247
    1bbc:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bbe:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1bc0:	80 ff       	sbrs	r24, 0
    1bc2:	fd cf       	rjmp	.-6      	; 0x1bbe <HID_Device_ProcessControlRequest+0x252>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1bc4:	f6 01       	movw	r30, r12
    1bc6:	84 85       	ldd	r24, Z+12	; 0x0c
    1bc8:	95 85       	ldd	r25, Z+13	; 0x0d
    1bca:	96 95       	lsr	r25
    1bcc:	87 95       	ror	r24
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bd2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bd6:	e8 ee       	ldi	r30, 0xE8	; 232
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	8e 77       	andi	r24, 0x7E	; 126
    1bde:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1be0:	80 d3       	rcall	.+1792   	; 0x22e2 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	fe be       	out	0x3e, r15	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	ed be       	out	0x3d, r14	; 61
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	9f 90       	pop	r9
    1c08:	8f 90       	pop	r8
    1c0a:	7f 90       	pop	r7
    1c0c:	6f 90       	pop	r6
    1c0e:	5f 90       	pop	r5
    1c10:	4f 90       	pop	r4
    1c12:	3f 90       	pop	r3
    1c14:	08 95       	ret

00001c16 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1c16:	9c 01       	movw	r18, r24
    1c18:	27 5f       	subi	r18, 0xF7	; 247
    1c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1c:	e2 2f       	mov	r30, r18
    1c1e:	f3 2f       	mov	r31, r19
    1c20:	27 e0       	ldi	r18, 0x07	; 7
    1c22:	df 01       	movw	r26, r30
    1c24:	1d 92       	st	X+, r1
    1c26:	2a 95       	dec	r18
    1c28:	e9 f7       	brne	.-6      	; 0x1c24 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1c2a:	21 e0       	ldi	r18, 0x01	; 1
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1c30:	24 ef       	ldi	r18, 0xF4	; 244
    1c32:	31 e0       	ldi	r19, 0x01	; 1
    1c34:	35 87       	std	Z+13, r19	; 0x0d
    1c36:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1c38:	23 e0       	ldi	r18, 0x03	; 3
    1c3a:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	01 96       	adiw	r24, 0x01	; 1
	  return false;

	return true;
}
    1c40:	e9 c2       	rjmp	.+1490   	; 0x2214 <Endpoint_ConfigureEndpointTable>

00001c42 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1c42:	4f 92       	push	r4
    1c44:	5f 92       	push	r5
    1c46:	6f 92       	push	r6
    1c48:	7f 92       	push	r7
    1c4a:	8f 92       	push	r8
    1c4c:	9f 92       	push	r9
    1c4e:	af 92       	push	r10
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <HID_Device_USBTask+0x22>
    1c64:	1f 92       	push	r1
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1c6c:	cd b6       	in	r12, 0x3d	; 61
    1c6e:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1c70:	80 91 70 02 	lds	r24, 0x0270
    1c74:	84 30       	cpi	r24, 0x04	; 4
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <HID_Device_USBTask+0x38>
    1c78:	9a c0       	rjmp	.+308    	; 0x1dae <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c7a:	80 91 e4 00 	lds	r24, 0x00E4
    1c7e:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1c82:	f7 01       	movw	r30, r14
    1c84:	22 85       	ldd	r18, Z+10	; 0x0a
    1c86:	33 85       	ldd	r19, Z+11	; 0x0b
    1c88:	28 17       	cp	r18, r24
    1c8a:	39 07       	cpc	r19, r25
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <HID_Device_USBTask+0x4e>
    1c8e:	8f c0       	rjmp	.+286    	; 0x1dae <HID_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c90:	81 81       	ldd	r24, Z+1	; 0x01
    1c92:	8f 70       	andi	r24, 0x0F	; 15
    1c94:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c98:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1c9c:	85 ff       	sbrs	r24, 5
    1c9e:	87 c0       	rjmp	.+270    	; 0x1dae <HID_Device_USBTask+0x16c>
    1ca0:	6d b6       	in	r6, 0x3d	; 61
    1ca2:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1ca4:	40 85       	ldd	r20, Z+8	; 0x08
    1ca6:	8d b7       	in	r24, 0x3d	; 61
    1ca8:	9e b7       	in	r25, 0x3e	; 62
    1caa:	84 1b       	sub	r24, r20
    1cac:	91 09       	sbc	r25, r1
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	9e bf       	out	0x3e, r25	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	8d bf       	out	0x3d, r24	; 61
    1cb8:	ad b6       	in	r10, 0x3d	; 61
    1cba:	be b6       	in	r11, 0x3e	; 62
    1cbc:	e1 e0       	ldi	r30, 0x01	; 1
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	ae 0e       	add	r10, r30
    1cc2:	bf 1e       	adc	r11, r31
		uint8_t  ReportID     = 0;
    1cc4:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1cc6:	1a 82       	std	Y+2, r1	; 0x02
    1cc8:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1cca:	8a 2c       	mov	r8, r10
    1ccc:	9b 2c       	mov	r9, r11
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	8a 2d       	mov	r24, r10
    1cd6:	9b 2d       	mov	r25, r11
    1cd8:	4c d6       	rcall	.+3224   	; 0x2972 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1cda:	8e 01       	movw	r16, r28
    1cdc:	0f 5f       	subi	r16, 0xFF	; 255
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	2a 2d       	mov	r18, r10
    1ce2:	3b 2d       	mov	r19, r11
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	be 01       	movw	r22, r28
    1ce8:	6d 5f       	subi	r22, 0xFD	; 253
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	c7 01       	movw	r24, r14
    1cee:	8b db       	rcall	.-2282   	; 0x1406 <CALLBACK_HID_Device_CreateHIDReport>
    1cf0:	48 2e       	mov	r4, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	84 85       	ldd	r24, Z+12	; 0x0c
    1cf6:	95 85       	ldd	r25, Z+13	; 0x0d
    1cf8:	89 2b       	or	r24, r25
    1cfa:	49 f0       	breq	.+18     	; 0x1d0e <HID_Device_USBTask+0xcc>
    1cfc:	01 e0       	ldi	r16, 0x01	; 1
    1cfe:	10 e0       	ldi	r17, 0x00	; 0
    1d00:	86 85       	ldd	r24, Z+14	; 0x0e
    1d02:	97 85       	ldd	r25, Z+15	; 0x0f
    1d04:	89 2b       	or	r24, r25
    1d06:	29 f0       	breq	.+10     	; 0x1d12 <HID_Device_USBTask+0xd0>
    1d08:	00 e0       	ldi	r16, 0x00	; 0
    1d0a:	10 e0       	ldi	r17, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <HID_Device_USBTask+0xd0>
    1d0e:	00 e0       	ldi	r16, 0x00	; 0
    1d10:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1d12:	f7 01       	movw	r30, r14
    1d14:	a6 80       	ldd	r10, Z+6	; 0x06
    1d16:	b7 80       	ldd	r11, Z+7	; 0x07
    1d18:	a1 14       	cp	r10, r1
    1d1a:	b1 04       	cpc	r11, r1
    1d1c:	b1 f0       	breq	.+44     	; 0x1d4a <HID_Device_USBTask+0x108>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1d1e:	49 81       	ldd	r20, Y+1	; 0x01
    1d20:	5a 81       	ldd	r21, Y+2	; 0x02
    1d22:	b5 01       	movw	r22, r10
    1d24:	88 2d       	mov	r24, r8
    1d26:	99 2d       	mov	r25, r9
    1d28:	0e d6       	rcall	.+3100   	; 0x2946 <memcmp>
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	39 2f       	mov	r19, r25
    1d2e:	55 24       	eor	r5, r5
    1d30:	53 94       	inc	r5
    1d32:	23 2b       	or	r18, r19
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <HID_Device_USBTask+0xf6>
    1d36:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1d38:	f7 01       	movw	r30, r14
    1d3a:	40 85       	ldd	r20, Z+8	; 0x08
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	68 2d       	mov	r22, r8
    1d40:	79 2d       	mov	r23, r9
    1d42:	8a 2d       	mov	r24, r10
    1d44:	9b 2d       	mov	r25, r11
    1d46:	0c d6       	rcall	.+3096   	; 0x2960 <memcpy>
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <HID_Device_USBTask+0x10a>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1d4a:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	89 2b       	or	r24, r25
    1d52:	f9 f0       	breq	.+62     	; 0x1d92 <HID_Device_USBTask+0x150>
    1d54:	41 10       	cpse	r4, r1
    1d56:	04 c0       	rjmp	.+8      	; 0x1d60 <HID_Device_USBTask+0x11e>
    1d58:	51 10       	cpse	r5, r1
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <HID_Device_USBTask+0x11e>
    1d5c:	00 ff       	sbrs	r16, 0
    1d5e:	19 c0       	rjmp	.+50     	; 0x1d92 <HID_Device_USBTask+0x150>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1d60:	f7 01       	movw	r30, r14
    1d62:	84 85       	ldd	r24, Z+12	; 0x0c
    1d64:	95 85       	ldd	r25, Z+13	; 0x0d
    1d66:	97 87       	std	Z+15, r25	; 0x0f
    1d68:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d6a:	81 81       	ldd	r24, Z+1	; 0x01
    1d6c:	8f 70       	andi	r24, 0x0F	; 15
    1d6e:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d76:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1d7a:	69 81       	ldd	r22, Y+1	; 0x01
    1d7c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	88 2d       	mov	r24, r8
    1d84:	99 2d       	mov	r25, r9
    1d86:	2c d0       	rcall	.+88     	; 0x1de0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d88:	e8 ee       	ldi	r30, 0xE8	; 232
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8e 77       	andi	r24, 0x7E	; 126
    1d90:	80 83       	st	Z, r24
    1d92:	80 91 e4 00 	lds	r24, 0x00E4
    1d96:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1d9a:	f7 01       	movw	r30, r14
    1d9c:	93 87       	std	Z+11, r25	; 0x0b
    1d9e:	82 87       	std	Z+10, r24	; 0x0a
    1da0:	86 2d       	mov	r24, r6
    1da2:	97 2d       	mov	r25, r7
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	9e bf       	out	0x3e, r25	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	8d bf       	out	0x3d, r24	; 61
	}
}
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de be       	out	0x3e, r13	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd be       	out	0x3d, r12	; 61
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	df 90       	pop	r13
    1dcc:	cf 90       	pop	r12
    1dce:	bf 90       	pop	r11
    1dd0:	af 90       	pop	r10
    1dd2:	9f 90       	pop	r9
    1dd4:	8f 90       	pop	r8
    1dd6:	7f 90       	pop	r7
    1dd8:	6f 90       	pop	r6
    1dda:	5f 90       	pop	r5
    1ddc:	4f 90       	pop	r4
    1dde:	08 95       	ret

00001de0 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1de0:	7f 92       	push	r7
    1de2:	8f 92       	push	r8
    1de4:	9f 92       	push	r9
    1de6:	af 92       	push	r10
    1de8:	bf 92       	push	r11
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	7c 01       	movw	r14, r24
    1dfc:	eb 01       	movw	r28, r22
    1dfe:	5a 01       	movw	r10, r20
    1e00:	95 d2       	rcall	.+1322   	; 0x232c <Endpoint_WaitUntilReady>
    1e02:	78 2e       	mov	r7, r24
    1e04:	81 11       	cpse	r24, r1
    1e06:	3f c0       	rjmp	.+126    	; 0x1e86 <Endpoint_Write_Stream_LE+0xa6>
    1e08:	a1 14       	cp	r10, r1
    1e0a:	b1 04       	cpc	r11, r1
    1e0c:	39 f0       	breq	.+14     	; 0x1e1c <Endpoint_Write_Stream_LE+0x3c>
    1e0e:	f5 01       	movw	r30, r10
    1e10:	20 81       	ld	r18, Z
    1e12:	31 81       	ldd	r19, Z+1	; 0x01
    1e14:	c2 1b       	sub	r28, r18
    1e16:	d3 0b       	sbc	r29, r19
    1e18:	e2 0e       	add	r14, r18
    1e1a:	f3 1e       	adc	r15, r19
    1e1c:	20 97       	sbiw	r28, 0x00	; 0
    1e1e:	99 f1       	breq	.+102    	; 0x1e86 <Endpoint_Write_Stream_LE+0xa6>
    1e20:	00 e0       	ldi	r16, 0x00	; 0
    1e22:	10 e0       	ldi	r17, 0x00	; 0
    1e24:	0f 2e       	mov	r0, r31
    1e26:	f8 ee       	ldi	r31, 0xE8	; 232
    1e28:	8f 2e       	mov	r8, r31
    1e2a:	91 2c       	mov	r9, r1
    1e2c:	f0 2d       	mov	r31, r0
    1e2e:	0f 2e       	mov	r0, r31
    1e30:	f1 ef       	ldi	r31, 0xF1	; 241
    1e32:	cf 2e       	mov	r12, r31
    1e34:	d1 2c       	mov	r13, r1
    1e36:	f0 2d       	mov	r31, r0
    1e38:	f4 01       	movw	r30, r8
    1e3a:	90 81       	ld	r25, Z
    1e3c:	95 fd       	sbrc	r25, 5
    1e3e:	17 c0       	rjmp	.+46     	; 0x1e6e <Endpoint_Write_Stream_LE+0x8e>
    1e40:	80 81       	ld	r24, Z
    1e42:	8e 77       	andi	r24, 0x7E	; 126
    1e44:	80 83       	st	Z, r24
    1e46:	27 d5       	rcall	.+2638   	; 0x2896 <USB_USBTask>
    1e48:	a1 14       	cp	r10, r1
    1e4a:	b1 04       	cpc	r11, r1
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <Endpoint_Write_Stream_LE+0x86>
    1e4e:	f5 01       	movw	r30, r10
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	08 0f       	add	r16, r24
    1e56:	19 1f       	adc	r17, r25
    1e58:	11 83       	std	Z+1, r17	; 0x01
    1e5a:	00 83       	st	Z, r16
    1e5c:	0f 2e       	mov	r0, r31
    1e5e:	f5 e0       	ldi	r31, 0x05	; 5
    1e60:	7f 2e       	mov	r7, r31
    1e62:	f0 2d       	mov	r31, r0
    1e64:	10 c0       	rjmp	.+32     	; 0x1e86 <Endpoint_Write_Stream_LE+0xa6>
    1e66:	62 d2       	rcall	.+1220   	; 0x232c <Endpoint_WaitUntilReady>
    1e68:	88 23       	and	r24, r24
    1e6a:	49 f0       	breq	.+18     	; 0x1e7e <Endpoint_Write_Stream_LE+0x9e>
    1e6c:	0b c0       	rjmp	.+22     	; 0x1e84 <Endpoint_Write_Stream_LE+0xa4>
    1e6e:	f7 01       	movw	r30, r14
    1e70:	81 91       	ld	r24, Z+
    1e72:	7f 01       	movw	r14, r30
    1e74:	f6 01       	movw	r30, r12
    1e76:	80 83       	st	Z, r24
    1e78:	21 97       	sbiw	r28, 0x01	; 1
    1e7a:	0f 5f       	subi	r16, 0xFF	; 255
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	20 97       	sbiw	r28, 0x00	; 0
    1e80:	d9 f6       	brne	.-74     	; 0x1e38 <Endpoint_Write_Stream_LE+0x58>
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <Endpoint_Write_Stream_LE+0xa6>
    1e84:	78 2e       	mov	r7, r24
    1e86:	87 2d       	mov	r24, r7
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	bf 90       	pop	r11
    1e9a:	af 90       	pop	r10
    1e9c:	9f 90       	pop	r9
    1e9e:	8f 90       	pop	r8
    1ea0:	7f 90       	pop	r7
    1ea2:	08 95       	ret

00001ea4 <Endpoint_Write_Control_Stream_LE>:
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	20 91 77 02 	lds	r18, 0x0277
    1eb0:	30 91 78 02 	lds	r19, 0x0278
    1eb4:	26 17       	cp	r18, r22
    1eb6:	37 07       	cpc	r19, r23
    1eb8:	58 f0       	brcs	.+22     	; 0x1ed0 <Endpoint_Write_Control_Stream_LE+0x2c>
    1eba:	61 15       	cp	r22, r1
    1ebc:	71 05       	cpc	r23, r1
    1ebe:	39 f4       	brne	.+14     	; 0x1ece <Endpoint_Write_Control_Stream_LE+0x2a>
    1ec0:	e8 ee       	ldi	r30, 0xE8	; 232
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	20 81       	ld	r18, Z
    1ec6:	2e 77       	andi	r18, 0x7E	; 126
    1ec8:	20 83       	st	Z, r18
    1eca:	9b 01       	movw	r18, r22
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <Endpoint_Write_Control_Stream_LE+0x2c>
    1ece:	9b 01       	movw	r18, r22
    1ed0:	e0 e0       	ldi	r30, 0x00	; 0
    1ed2:	a8 ee       	ldi	r26, 0xE8	; 232
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	62 ef       	ldi	r22, 0xF2	; 242
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	11 e0       	ldi	r17, 0x01	; 1
    1edc:	00 e0       	ldi	r16, 0x00	; 0
    1ede:	c1 ef       	ldi	r28, 0xF1	; 241
    1ee0:	d0 e0       	ldi	r29, 0x00	; 0
    1ee2:	32 c0       	rjmp	.+100    	; 0x1f48 <Endpoint_Write_Control_Stream_LE+0xa4>
    1ee4:	40 91 70 02 	lds	r20, 0x0270
    1ee8:	44 23       	and	r20, r20
    1eea:	09 f4       	brne	.+2      	; 0x1eee <Endpoint_Write_Control_Stream_LE+0x4a>
    1eec:	41 c0       	rjmp	.+130    	; 0x1f70 <Endpoint_Write_Control_Stream_LE+0xcc>
    1eee:	45 30       	cpi	r20, 0x05	; 5
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <Endpoint_Write_Control_Stream_LE+0x50>
    1ef2:	40 c0       	rjmp	.+128    	; 0x1f74 <Endpoint_Write_Control_Stream_LE+0xd0>
    1ef4:	4c 91       	ld	r20, X
    1ef6:	43 fd       	sbrc	r20, 3
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <Endpoint_Write_Control_Stream_LE+0xd4>
    1efa:	4c 91       	ld	r20, X
    1efc:	42 fd       	sbrc	r20, 2
    1efe:	31 c0       	rjmp	.+98     	; 0x1f62 <Endpoint_Write_Control_Stream_LE+0xbe>
    1f00:	4c 91       	ld	r20, X
    1f02:	40 ff       	sbrs	r20, 0
    1f04:	21 c0       	rjmp	.+66     	; 0x1f48 <Endpoint_Write_Control_Stream_LE+0xa4>
    1f06:	fb 01       	movw	r30, r22
    1f08:	40 81       	ld	r20, Z
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	21 15       	cp	r18, r1
    1f0e:	31 05       	cpc	r19, r1
    1f10:	99 f0       	breq	.+38     	; 0x1f38 <Endpoint_Write_Control_Stream_LE+0x94>
    1f12:	40 32       	cpi	r20, 0x20	; 32
    1f14:	51 05       	cpc	r21, r1
    1f16:	80 f4       	brcc	.+32     	; 0x1f38 <Endpoint_Write_Control_Stream_LE+0x94>
    1f18:	e8 2f       	mov	r30, r24
    1f1a:	f9 2f       	mov	r31, r25
    1f1c:	81 91       	ld	r24, Z+
    1f1e:	88 83       	st	Y, r24
    1f20:	8e 2f       	mov	r24, r30
    1f22:	9f 2f       	mov	r25, r31
    1f24:	21 50       	subi	r18, 0x01	; 1
    1f26:	31 09       	sbc	r19, r1
    1f28:	4f 5f       	subi	r20, 0xFF	; 255
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2c:	21 15       	cp	r18, r1
    1f2e:	31 05       	cpc	r19, r1
    1f30:	19 f0       	breq	.+6      	; 0x1f38 <Endpoint_Write_Control_Stream_LE+0x94>
    1f32:	40 32       	cpi	r20, 0x20	; 32
    1f34:	51 05       	cpc	r21, r1
    1f36:	91 f7       	brne	.-28     	; 0x1f1c <Endpoint_Write_Control_Stream_LE+0x78>
    1f38:	e1 2f       	mov	r30, r17
    1f3a:	40 32       	cpi	r20, 0x20	; 32
    1f3c:	51 05       	cpc	r21, r1
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <Endpoint_Write_Control_Stream_LE+0x9e>
    1f40:	e0 2f       	mov	r30, r16
    1f42:	4c 91       	ld	r20, X
    1f44:	4e 77       	andi	r20, 0x7E	; 126
    1f46:	4c 93       	st	X, r20
    1f48:	21 15       	cp	r18, r1
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	59 f6       	brne	.-106    	; 0x1ee4 <Endpoint_Write_Control_Stream_LE+0x40>
    1f4e:	e1 11       	cpse	r30, r1
    1f50:	c9 cf       	rjmp	.-110    	; 0x1ee4 <Endpoint_Write_Control_Stream_LE+0x40>
    1f52:	07 c0       	rjmp	.+14     	; 0x1f62 <Endpoint_Write_Control_Stream_LE+0xbe>
    1f54:	80 91 70 02 	lds	r24, 0x0270
    1f58:	88 23       	and	r24, r24
    1f5a:	81 f0       	breq	.+32     	; 0x1f7c <Endpoint_Write_Control_Stream_LE+0xd8>
    1f5c:	85 30       	cpi	r24, 0x05	; 5
    1f5e:	19 f4       	brne	.+6      	; 0x1f66 <Endpoint_Write_Control_Stream_LE+0xc2>
    1f60:	0f c0       	rjmp	.+30     	; 0x1f80 <Endpoint_Write_Control_Stream_LE+0xdc>
    1f62:	e8 ee       	ldi	r30, 0xE8	; 232
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	82 ff       	sbrs	r24, 2
    1f6a:	f4 cf       	rjmp	.-24     	; 0x1f54 <Endpoint_Write_Control_Stream_LE+0xb0>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <Endpoint_Write_Control_Stream_LE+0xde>
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	07 c0       	rjmp	.+14     	; 0x1f82 <Endpoint_Write_Control_Stream_LE+0xde>
    1f74:	83 e0       	ldi	r24, 0x03	; 3
    1f76:	05 c0       	rjmp	.+10     	; 0x1f82 <Endpoint_Write_Control_Stream_LE+0xde>
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <Endpoint_Write_Control_Stream_LE+0xde>
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <Endpoint_Write_Control_Stream_LE+0xde>
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	08 95       	ret

00001f8c <Endpoint_Read_Control_Stream_LE>:
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	61 15       	cp	r22, r1
    1f96:	71 05       	cpc	r23, r1
    1f98:	29 f4       	brne	.+10     	; 0x1fa4 <Endpoint_Read_Control_Stream_LE+0x18>
    1f9a:	e8 ee       	ldi	r30, 0xE8	; 232
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	20 81       	ld	r18, Z
    1fa0:	2b 77       	andi	r18, 0x7B	; 123
    1fa2:	20 83       	st	Z, r18
    1fa4:	a8 ee       	ldi	r26, 0xE8	; 232
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	02 ef       	ldi	r16, 0xF2	; 242
    1faa:	10 e0       	ldi	r17, 0x00	; 0
    1fac:	21 ef       	ldi	r18, 0xF1	; 241
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	1c c0       	rjmp	.+56     	; 0x1fea <Endpoint_Read_Control_Stream_LE+0x5e>
    1fb2:	40 91 70 02 	lds	r20, 0x0270
    1fb6:	44 23       	and	r20, r20
    1fb8:	b1 f1       	breq	.+108    	; 0x2026 <Endpoint_Read_Control_Stream_LE+0x9a>
    1fba:	45 30       	cpi	r20, 0x05	; 5
    1fbc:	b1 f1       	breq	.+108    	; 0x202a <Endpoint_Read_Control_Stream_LE+0x9e>
    1fbe:	4c 91       	ld	r20, X
    1fc0:	43 fd       	sbrc	r20, 3
    1fc2:	35 c0       	rjmp	.+106    	; 0x202e <Endpoint_Read_Control_Stream_LE+0xa2>
    1fc4:	4c 91       	ld	r20, X
    1fc6:	42 ff       	sbrs	r20, 2
    1fc8:	f4 cf       	rjmp	.-24     	; 0x1fb2 <Endpoint_Read_Control_Stream_LE+0x26>
    1fca:	3d c0       	rjmp	.+122    	; 0x2046 <Endpoint_Read_Control_Stream_LE+0xba>
    1fcc:	e9 01       	movw	r28, r18
    1fce:	88 81       	ld	r24, Y
    1fd0:	81 93       	st	Z+, r24
    1fd2:	8e 2f       	mov	r24, r30
    1fd4:	9f 2f       	mov	r25, r31
    1fd6:	61 50       	subi	r22, 0x01	; 1
    1fd8:	71 09       	sbc	r23, r1
    1fda:	21 f0       	breq	.+8      	; 0x1fe4 <Endpoint_Read_Control_Stream_LE+0x58>
    1fdc:	e8 01       	movw	r28, r16
    1fde:	48 81       	ld	r20, Y
    1fe0:	41 11       	cpse	r20, r1
    1fe2:	f4 cf       	rjmp	.-24     	; 0x1fcc <Endpoint_Read_Control_Stream_LE+0x40>
    1fe4:	4c 91       	ld	r20, X
    1fe6:	4b 77       	andi	r20, 0x7B	; 123
    1fe8:	4c 93       	st	X, r20
    1fea:	61 15       	cp	r22, r1
    1fec:	71 05       	cpc	r23, r1
    1fee:	a1 f0       	breq	.+40     	; 0x2018 <Endpoint_Read_Control_Stream_LE+0x8c>
    1ff0:	40 91 70 02 	lds	r20, 0x0270
    1ff4:	44 23       	and	r20, r20
    1ff6:	e9 f0       	breq	.+58     	; 0x2032 <Endpoint_Read_Control_Stream_LE+0xa6>
    1ff8:	45 30       	cpi	r20, 0x05	; 5
    1ffa:	e9 f0       	breq	.+58     	; 0x2036 <Endpoint_Read_Control_Stream_LE+0xaa>
    1ffc:	4c 91       	ld	r20, X
    1ffe:	43 fd       	sbrc	r20, 3
    2000:	1c c0       	rjmp	.+56     	; 0x203a <Endpoint_Read_Control_Stream_LE+0xae>
    2002:	4c 91       	ld	r20, X
    2004:	42 ff       	sbrs	r20, 2
    2006:	d5 cf       	rjmp	.-86     	; 0x1fb2 <Endpoint_Read_Control_Stream_LE+0x26>
    2008:	1e c0       	rjmp	.+60     	; 0x2046 <Endpoint_Read_Control_Stream_LE+0xba>
    200a:	80 91 70 02 	lds	r24, 0x0270
    200e:	88 23       	and	r24, r24
    2010:	b1 f0       	breq	.+44     	; 0x203e <Endpoint_Read_Control_Stream_LE+0xb2>
    2012:	85 30       	cpi	r24, 0x05	; 5
    2014:	19 f4       	brne	.+6      	; 0x201c <Endpoint_Read_Control_Stream_LE+0x90>
    2016:	15 c0       	rjmp	.+42     	; 0x2042 <Endpoint_Read_Control_Stream_LE+0xb6>
    2018:	e8 ee       	ldi	r30, 0xE8	; 232
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	80 ff       	sbrs	r24, 0
    2020:	f4 cf       	rjmp	.-24     	; 0x200a <Endpoint_Read_Control_Stream_LE+0x7e>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	17 c0       	rjmp	.+46     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	15 c0       	rjmp	.+42     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	13 c0       	rjmp	.+38     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	11 c0       	rjmp	.+34     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	0d c0       	rjmp	.+26     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	09 c0       	rjmp	.+18     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	07 c0       	rjmp	.+14     	; 0x2054 <Endpoint_Read_Control_Stream_LE+0xc8>
    2046:	f8 01       	movw	r30, r16
    2048:	40 81       	ld	r20, Z
    204a:	44 23       	and	r20, r20
    204c:	59 f2       	breq	.-106    	; 0x1fe4 <Endpoint_Read_Control_Stream_LE+0x58>
    204e:	e8 2f       	mov	r30, r24
    2050:	f9 2f       	mov	r31, r25
    2052:	bc cf       	rjmp	.-136    	; 0x1fcc <Endpoint_Read_Control_Stream_LE+0x40>
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret

0000205e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    205e:	ef 92       	push	r14
    2060:	ff 92       	push	r15
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2068:	20 91 77 02 	lds	r18, 0x0277
    206c:	30 91 78 02 	lds	r19, 0x0278
    2070:	26 17       	cp	r18, r22
    2072:	37 07       	cpc	r19, r23
    2074:	58 f0       	brcs	.+22     	; 0x208c <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2076:	61 15       	cp	r22, r1
    2078:	71 05       	cpc	r23, r1
    207a:	39 f4       	brne	.+14     	; 0x208a <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    207c:	e8 ee       	ldi	r30, 0xE8	; 232
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	20 81       	ld	r18, Z
    2082:	2e 77       	andi	r18, 0x7E	; 126
    2084:	20 83       	st	Z, r18
    2086:	9b 01       	movw	r18, r22
    2088:	01 c0       	rjmp	.+2      	; 0x208c <Endpoint_Write_Control_PStream_LE+0x2e>
    208a:	9b 01       	movw	r18, r22
    208c:	e8 2f       	mov	r30, r24
    208e:	f9 2f       	mov	r31, r25
    2090:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2092:	a8 ee       	ldi	r26, 0xE8	; 232
    2094:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2096:	42 ef       	ldi	r20, 0xF2	; 242
    2098:	50 e0       	ldi	r21, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    209a:	71 e0       	ldi	r23, 0x01	; 1
    209c:	10 e0       	ldi	r17, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    209e:	0f 2e       	mov	r0, r31
    20a0:	f1 ef       	ldi	r31, 0xF1	; 241
    20a2:	ef 2e       	mov	r14, r31
    20a4:	f1 2c       	mov	r15, r1
    20a6:	f0 2d       	mov	r31, r0
    20a8:	2e c0       	rjmp	.+92     	; 0x2106 <Endpoint_Write_Control_PStream_LE+0xa8>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20aa:	80 91 70 02 	lds	r24, 0x0270

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20ae:	88 23       	and	r24, r24
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <Endpoint_Write_Control_PStream_LE+0x56>
    20b2:	3d c0       	rjmp	.+122    	; 0x212e <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20b4:	85 30       	cpi	r24, 0x05	; 5
    20b6:	09 f4       	brne	.+2      	; 0x20ba <Endpoint_Write_Control_PStream_LE+0x5c>
    20b8:	3c c0       	rjmp	.+120    	; 0x2132 <Endpoint_Write_Control_PStream_LE+0xd4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20ba:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    20bc:	83 fd       	sbrc	r24, 3
    20be:	3b c0       	rjmp	.+118    	; 0x2136 <Endpoint_Write_Control_PStream_LE+0xd8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20c0:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    20c2:	82 fd       	sbrc	r24, 2
    20c4:	2d c0       	rjmp	.+90     	; 0x2120 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20c6:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    20c8:	80 ff       	sbrs	r24, 0
    20ca:	1d c0       	rjmp	.+58     	; 0x2106 <Endpoint_Write_Control_PStream_LE+0xa8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    20cc:	ea 01       	movw	r28, r20
    20ce:	88 81       	ld	r24, Y
    20d0:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20d2:	21 15       	cp	r18, r1
    20d4:	31 05       	cpc	r19, r1
    20d6:	81 f0       	breq	.+32     	; 0x20f8 <Endpoint_Write_Control_PStream_LE+0x9a>
    20d8:	80 32       	cpi	r24, 0x20	; 32
    20da:	91 05       	cpc	r25, r1
    20dc:	68 f4       	brcc	.+26     	; 0x20f8 <Endpoint_Write_Control_PStream_LE+0x9a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    20de:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20e0:	e7 01       	movw	r28, r14
    20e2:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    20e4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    20e6:	21 50       	subi	r18, 0x01	; 1
    20e8:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    20ea:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20ec:	21 15       	cp	r18, r1
    20ee:	31 05       	cpc	r19, r1
    20f0:	19 f0       	breq	.+6      	; 0x20f8 <Endpoint_Write_Control_PStream_LE+0x9a>
    20f2:	80 32       	cpi	r24, 0x20	; 32
    20f4:	91 05       	cpc	r25, r1
    20f6:	99 f7       	brne	.-26     	; 0x20de <Endpoint_Write_Control_PStream_LE+0x80>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    20f8:	67 2f       	mov	r22, r23
    20fa:	80 97       	sbiw	r24, 0x20	; 32
    20fc:	09 f0       	breq	.+2      	; 0x2100 <Endpoint_Write_Control_PStream_LE+0xa2>
    20fe:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2100:	8c 91       	ld	r24, X
    2102:	8e 77       	andi	r24, 0x7E	; 126
    2104:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2106:	21 15       	cp	r18, r1
    2108:	31 05       	cpc	r19, r1
    210a:	79 f6       	brne	.-98     	; 0x20aa <Endpoint_Write_Control_PStream_LE+0x4c>
    210c:	61 11       	cpse	r22, r1
    210e:	cd cf       	rjmp	.-102    	; 0x20aa <Endpoint_Write_Control_PStream_LE+0x4c>
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <Endpoint_Write_Control_PStream_LE+0xc2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2112:	80 91 70 02 	lds	r24, 0x0270

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2116:	88 23       	and	r24, r24
    2118:	81 f0       	breq	.+32     	; 0x213a <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    211a:	85 30       	cpi	r24, 0x05	; 5
    211c:	19 f4       	brne	.+6      	; 0x2124 <Endpoint_Write_Control_PStream_LE+0xc6>
    211e:	0f c0       	rjmp	.+30     	; 0x213e <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2120:	e8 ee       	ldi	r30, 0xE8	; 232
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2126:	82 ff       	sbrs	r24, 2
    2128:	f4 cf       	rjmp	.-24     	; 0x2112 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	09 c0       	rjmp	.+18     	; 0x2140 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2132:	83 e0       	ldi	r24, 0x03	; 3
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    213e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	08 95       	ret

0000214c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    214c:	8f 92       	push	r8
    214e:	9f 92       	push	r9
    2150:	bf 92       	push	r11
    2152:	cf 92       	push	r12
    2154:	df 92       	push	r13
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	85 30       	cpi	r24, 0x05	; 5
    2164:	70 f1       	brcs	.+92     	; 0x21c2 <Endpoint_ConfigureEndpoint_Prv+0x76>
    2166:	26 c0       	rjmp	.+76     	; 0x21b4 <Endpoint_ConfigureEndpoint_Prv+0x68>
    2168:	59 2f       	mov	r21, r25
    216a:	5f 70       	andi	r21, 0x0F	; 15
    216c:	e8 01       	movw	r28, r16
    216e:	58 83       	st	Y, r21
    2170:	89 17       	cp	r24, r25
    2172:	31 f0       	breq	.+12     	; 0x2180 <Endpoint_ConfigureEndpoint_Prv+0x34>
    2174:	e9 01       	movw	r28, r18
    2176:	d8 80       	ld	r13, Y
    2178:	50 81       	ld	r21, Z
    217a:	e4 01       	movw	r28, r8
    217c:	78 81       	ld	r23, Y
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2180:	5b 2d       	mov	r21, r11
    2182:	d6 2e       	mov	r13, r22
    2184:	7c 2d       	mov	r23, r12
    2186:	51 ff       	sbrs	r21, 1
    2188:	12 c0       	rjmp	.+36     	; 0x21ae <Endpoint_ConfigureEndpoint_Prv+0x62>
    218a:	4c 91       	ld	r20, X
    218c:	4e 7f       	andi	r20, 0xFE	; 254
    218e:	4c 93       	st	X, r20
    2190:	40 81       	ld	r20, Z
    2192:	4d 7f       	andi	r20, 0xFD	; 253
    2194:	40 83       	st	Z, r20
    2196:	4c 91       	ld	r20, X
    2198:	41 60       	ori	r20, 0x01	; 1
    219a:	4c 93       	st	X, r20
    219c:	e9 01       	movw	r28, r18
    219e:	d8 82       	st	Y, r13
    21a0:	50 83       	st	Z, r21
    21a2:	e4 01       	movw	r28, r8
    21a4:	78 83       	st	Y, r23
    21a6:	e7 01       	movw	r28, r14
    21a8:	58 81       	ld	r21, Y
    21aa:	55 23       	and	r21, r21
    21ac:	44 f4       	brge	.+16     	; 0x21be <Endpoint_ConfigureEndpoint_Prv+0x72>
    21ae:	9f 5f       	subi	r25, 0xFF	; 255
    21b0:	95 30       	cpi	r25, 0x05	; 5
    21b2:	d1 f6       	brne	.-76     	; 0x2168 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    21b4:	8f 70       	andi	r24, 0x0F	; 15
    21b6:	80 93 e9 00 	sts	0x00E9, r24
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	1f c0       	rjmp	.+62     	; 0x21fc <Endpoint_ConfigureEndpoint_Prv+0xb0>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	1d c0       	rjmp	.+58     	; 0x21fc <Endpoint_ConfigureEndpoint_Prv+0xb0>
    21c2:	98 2f       	mov	r25, r24
    21c4:	9f 70       	andi	r25, 0x0F	; 15
    21c6:	90 93 e9 00 	sts	0x00E9, r25
    21ca:	98 2f       	mov	r25, r24
    21cc:	54 2f       	mov	r21, r20
    21ce:	d6 2e       	mov	r13, r22
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	ab ee       	ldi	r26, 0xEB	; 235
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ed ee       	ldi	r30, 0xED	; 237
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	2c ee       	ldi	r18, 0xEC	; 236
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	0f 2e       	mov	r0, r31
    21e0:	f0 ef       	ldi	r31, 0xF0	; 240
    21e2:	8f 2e       	mov	r8, r31
    21e4:	91 2c       	mov	r9, r1
    21e6:	f0 2d       	mov	r31, r0
    21e8:	0f 2e       	mov	r0, r31
    21ea:	fe ee       	ldi	r31, 0xEE	; 238
    21ec:	ef 2e       	mov	r14, r31
    21ee:	f1 2c       	mov	r15, r1
    21f0:	f0 2d       	mov	r31, r0
    21f2:	09 ee       	ldi	r16, 0xE9	; 233
    21f4:	10 e0       	ldi	r17, 0x00	; 0
    21f6:	b4 2e       	mov	r11, r20
    21f8:	c1 2c       	mov	r12, r1
    21fa:	c5 cf       	rjmp	.-118    	; 0x2186 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	df 90       	pop	r13
    220a:	cf 90       	pop	r12
    220c:	bf 90       	pop	r11
    220e:	9f 90       	pop	r9
    2210:	8f 90       	pop	r8
    2212:	08 95       	ret

00002214 <Endpoint_ConfigureEndpointTable>:
    2214:	9f 92       	push	r9
    2216:	af 92       	push	r10
    2218:	bf 92       	push	r11
    221a:	cf 92       	push	r12
    221c:	df 92       	push	r13
    221e:	ef 92       	push	r14
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	c6 2e       	mov	r12, r22
    222c:	66 23       	and	r22, r22
    222e:	09 f4       	brne	.+2      	; 0x2232 <Endpoint_ConfigureEndpointTable+0x1e>
    2230:	47 c0       	rjmp	.+142    	; 0x22c0 <Endpoint_ConfigureEndpointTable+0xac>
    2232:	ec 01       	movw	r28, r24
    2234:	8c 01       	movw	r16, r24
    2236:	0c 5f       	subi	r16, 0xFC	; 252
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	d1 2c       	mov	r13, r1
    223c:	b1 2c       	mov	r11, r1
    223e:	68 94       	set
    2240:	ee 24       	eor	r14, r14
    2242:	e3 f8       	bld	r14, 3
    2244:	f1 2c       	mov	r15, r1
    2246:	68 94       	set
    2248:	99 24       	eor	r9, r9
    224a:	91 f8       	bld	r9, 1
    224c:	0f 2e       	mov	r0, r31
    224e:	f6 e0       	ldi	r31, 0x06	; 6
    2250:	af 2e       	mov	r10, r31
    2252:	f0 2d       	mov	r31, r0
    2254:	58 81       	ld	r21, Y
    2256:	55 23       	and	r21, r21
    2258:	59 f1       	breq	.+86     	; 0x22b0 <Endpoint_ConfigureEndpointTable+0x9c>
    225a:	f8 01       	movw	r30, r16
    225c:	90 81       	ld	r25, Z
    225e:	e9 81       	ldd	r30, Y+1	; 0x01
    2260:	fa 81       	ldd	r31, Y+2	; 0x02
    2262:	d8 01       	movw	r26, r16
    2264:	11 97       	sbiw	r26, 0x01	; 1
    2266:	6c 91       	ld	r22, X
    2268:	85 2f       	mov	r24, r21
    226a:	8f 70       	andi	r24, 0x0F	; 15
    226c:	85 30       	cpi	r24, 0x05	; 5
    226e:	50 f5       	brcc	.+84     	; 0x22c4 <Endpoint_ConfigureEndpointTable+0xb0>
    2270:	92 30       	cpi	r25, 0x02	; 2
    2272:	10 f0       	brcs	.+4      	; 0x2278 <Endpoint_ConfigureEndpointTable+0x64>
    2274:	4a 2d       	mov	r20, r10
    2276:	01 c0       	rjmp	.+2      	; 0x227a <Endpoint_ConfigureEndpointTable+0x66>
    2278:	49 2d       	mov	r20, r9
    227a:	e9 30       	cpi	r30, 0x09	; 9
    227c:	f1 05       	cpc	r31, r1
    227e:	48 f0       	brcs	.+18     	; 0x2292 <Endpoint_ConfigureEndpointTable+0x7e>
    2280:	97 01       	movw	r18, r14
    2282:	9b 2d       	mov	r25, r11
    2284:	9f 5f       	subi	r25, 0xFF	; 255
    2286:	22 0f       	add	r18, r18
    2288:	33 1f       	adc	r19, r19
    228a:	2e 17       	cp	r18, r30
    228c:	3f 07       	cpc	r19, r31
    228e:	d0 f3       	brcs	.-12     	; 0x2284 <Endpoint_ConfigureEndpointTable+0x70>
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <Endpoint_ConfigureEndpointTable+0x80>
    2292:	9b 2d       	mov	r25, r11
    2294:	92 95       	swap	r25
    2296:	90 7f       	andi	r25, 0xF0	; 240
    2298:	49 2b       	or	r20, r25
    229a:	62 95       	swap	r22
    229c:	66 0f       	add	r22, r22
    229e:	66 0f       	add	r22, r22
    22a0:	60 7c       	andi	r22, 0xC0	; 192
    22a2:	55 1f       	adc	r21, r21
    22a4:	55 27       	eor	r21, r21
    22a6:	55 1f       	adc	r21, r21
    22a8:	65 2b       	or	r22, r21
    22aa:	50 df       	rcall	.-352    	; 0x214c <Endpoint_ConfigureEndpoint_Prv>
    22ac:	88 23       	and	r24, r24
    22ae:	61 f0       	breq	.+24     	; 0x22c8 <Endpoint_ConfigureEndpointTable+0xb4>
    22b0:	d3 94       	inc	r13
    22b2:	25 96       	adiw	r28, 0x05	; 5
    22b4:	0b 5f       	subi	r16, 0xFB	; 251
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	dc 10       	cpse	r13, r12
    22ba:	cc cf       	rjmp	.-104    	; 0x2254 <Endpoint_ConfigureEndpointTable+0x40>
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <Endpoint_ConfigureEndpointTable+0xb6>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <Endpoint_ConfigureEndpointTable+0xb6>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <Endpoint_ConfigureEndpointTable+0xb6>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	df 90       	pop	r13
    22d8:	cf 90       	pop	r12
    22da:	bf 90       	pop	r11
    22dc:	af 90       	pop	r10
    22de:	9f 90       	pop	r9
    22e0:	08 95       	ret

000022e2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    22e2:	80 91 71 02 	lds	r24, 0x0271
    22e6:	88 23       	and	r24, r24
    22e8:	b4 f4       	brge	.+44     	; 0x2316 <Endpoint_ClearStatusStage+0x34>
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <Endpoint_ClearStatusStage+0x14>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    22ec:	80 91 70 02 	lds	r24, 0x0270
    22f0:	81 11       	cpse	r24, r1
    22f2:	03 c0       	rjmp	.+6      	; 0x22fa <Endpoint_ClearStatusStage+0x18>
    22f4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22f6:	e8 ee       	ldi	r30, 0xE8	; 232
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    22fc:	82 ff       	sbrs	r24, 2
    22fe:	f6 cf       	rjmp	.-20     	; 0x22ec <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2300:	e8 ee       	ldi	r30, 0xE8	; 232
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8b 77       	andi	r24, 0x7B	; 123
    2308:	80 83       	st	Z, r24
    230a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    230c:	80 91 70 02 	lds	r24, 0x0270
    2310:	81 11       	cpse	r24, r1
    2312:	03 c0       	rjmp	.+6      	; 0x231a <Endpoint_ClearStatusStage+0x38>
    2314:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2316:	e8 ee       	ldi	r30, 0xE8	; 232
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    231c:	80 ff       	sbrs	r24, 0
    231e:	f6 cf       	rjmp	.-20     	; 0x230c <Endpoint_ClearStatusStage+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2320:	e8 ee       	ldi	r30, 0xE8	; 232
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	8e 77       	andi	r24, 0x7E	; 126
    2328:	80 83       	st	Z, r24
    232a:	08 95       	ret

0000232c <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    232c:	0f 93       	push	r16
    232e:	1f 93       	push	r17
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2334:	20 91 e4 00 	lds	r18, 0x00E4
    2338:	30 91 e5 00 	lds	r19, 0x00E5
    233c:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    233e:	ac ee       	ldi	r26, 0xEC	; 236
    2340:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2342:	e8 ee       	ldi	r30, 0xE8	; 232
    2344:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2346:	0b ee       	ldi	r16, 0xEB	; 235
    2348:	10 e0       	ldi	r17, 0x00	; 0
    234a:	44 ee       	ldi	r20, 0xE4	; 228
    234c:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    234e:	8c 91       	ld	r24, X
    2350:	80 fd       	sbrc	r24, 0
    2352:	20 c0       	rjmp	.+64     	; 0x2394 <Endpoint_WaitUntilReady+0x68>
    2354:	23 c0       	rjmp	.+70     	; 0x239c <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2356:	80 91 70 02 	lds	r24, 0x0270

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    235a:	88 23       	and	r24, r24
    235c:	89 f0       	breq	.+34     	; 0x2380 <Endpoint_WaitUntilReady+0x54>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    235e:	85 30       	cpi	r24, 0x05	; 5
    2360:	89 f0       	breq	.+34     	; 0x2384 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2362:	e8 01       	movw	r28, r16
    2364:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2366:	85 fd       	sbrc	r24, 5
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <Endpoint_WaitUntilReady+0x5c>
    236a:	ea 01       	movw	r28, r20
    236c:	88 81       	ld	r24, Y
    236e:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2370:	28 17       	cp	r18, r24
    2372:	39 07       	cpc	r19, r25
    2374:	61 f3       	breq	.-40     	; 0x234e <Endpoint_WaitUntilReady+0x22>
    2376:	61 50       	subi	r22, 0x01	; 1
    2378:	9c 01       	movw	r18, r24
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    237a:	49 f7       	brne	.-46     	; 0x234e <Endpoint_WaitUntilReady+0x22>
			  return ENDPOINT_READYWAIT_Timeout;
    237c:	84 e0       	ldi	r24, 0x04	; 4
    237e:	12 c0       	rjmp	.+36     	; 0x23a4 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	10 c0       	rjmp	.+32     	; 0x23a4 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	0c c0       	rjmp	.+24     	; 0x23a4 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0a c0       	rjmp	.+20     	; 0x23a4 <Endpoint_WaitUntilReady+0x78>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2394:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2396:	80 ff       	sbrs	r24, 0
    2398:	de cf       	rjmp	.-68     	; 0x2356 <Endpoint_WaitUntilReady+0x2a>
    239a:	f8 cf       	rjmp	.-16     	; 0x238c <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    239c:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    239e:	82 ff       	sbrs	r24, 2
    23a0:	da cf       	rjmp	.-76     	; 0x2356 <Endpoint_WaitUntilReady+0x2a>
    23a2:	f6 cf       	rjmp	.-20     	; 0x2390 <Endpoint_WaitUntilReady+0x64>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	08 95       	ret

000023ae <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    23ae:	50 d0       	rcall	.+160    	; 0x2450 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    23b0:	52 d0       	rcall	.+164    	; 0x2456 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    23b2:	e0 ee       	ldi	r30, 0xE0	; 224
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	81 60       	ori	r24, 0x01	; 1
    23ba:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    23bc:	e8 ed       	ldi	r30, 0xD8	; 216
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 77       	andi	r24, 0x7F	; 127
    23c4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    23c6:	19 bc       	out	0x29, r1	; 41
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
    23c8:	e3 e6       	ldi	r30, 0x63	; 99
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	81 60       	ori	r24, 0x01	; 1
    23d0:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    23d2:	10 92 6f 02 	sts	0x026F, r1
    23d6:	08 95       	ret

000023d8 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    23d8:	3b d0       	rcall	.+118    	; 0x2450 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    23da:	3d d0       	rcall	.+122    	; 0x2456 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    23dc:	e8 ed       	ldi	r30, 0xD8	; 216
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 77       	andi	r24, 0x7F	; 127
    23e4:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    23e6:	80 81       	ld	r24, Z
    23e8:	80 68       	ori	r24, 0x80	; 128
    23ea:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    23ec:	80 81       	ld	r24, Z
    23ee:	8f 7d       	andi	r24, 0xDF	; 223
    23f0:	80 83       	st	Z, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    23f2:	84 e0       	ldi	r24, 0x04	; 4
    23f4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    23f6:	86 e0       	ldi	r24, 0x06	; 6
    23f8:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    23fa:	09 b4       	in	r0, 0x29	; 41
    23fc:	00 fe       	sbrs	r0, 0
    23fe:	fd cf       	rjmp	.-6      	; 0x23fa <USB_ResetInterface+0x22>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2400:	10 92 70 02 	sts	0x0270, r1
	USB_Device_ConfigurationNumber  = 0;
    2404:	10 92 6c 02 	sts	0x026C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2408:	10 92 6e 02 	sts	0x026E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    240c:	10 92 6d 02 	sts	0x026D, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2410:	42 e2       	ldi	r20, 0x22	; 34
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	9a de       	rcall	.-716    	; 0x214c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2418:	e1 ee       	ldi	r30, 0xE1	; 225
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	8e 7f       	andi	r24, 0xFE	; 254
    2420:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2422:	e2 ee       	ldi	r30, 0xE2	; 226
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	81 60       	ori	r24, 0x01	; 1
    242a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    242c:	80 81       	ld	r24, Z
    242e:	88 60       	ori	r24, 0x08	; 8
    2430:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2432:	e0 ee       	ldi	r30, 0xE0	; 224
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	8e 7f       	andi	r24, 0xFE	; 254
    243a:	80 83       	st	Z, r24
    243c:	08 95       	ret

0000243e <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    243e:	e3 e6       	ldi	r30, 0x63	; 99
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	8e 7f       	andi	r24, 0xFE	; 254
    2446:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	80 93 6f 02 	sts	0x026F, r24

	USB_ResetInterface();
    244e:	c4 cf       	rjmp	.-120    	; 0x23d8 <USB_ResetInterface>

00002450 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2450:	10 92 e2 00 	sts	0x00E2, r1
    2454:	08 95       	ret

00002456 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2456:	10 92 e1 00 	sts	0x00E1, r1
    245a:	08 95       	ret

0000245c <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    247e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2482:	82 ff       	sbrs	r24, 2
    2484:	0b c0       	rjmp	.+22     	; 0x249c <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2486:	80 91 e2 00 	lds	r24, 0x00E2
    248a:	82 ff       	sbrs	r24, 2
    248c:	07 c0       	rjmp	.+14     	; 0x249c <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    248e:	e1 ee       	ldi	r30, 0xE1	; 225
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8b 7f       	andi	r24, 0xFB	; 251
    2496:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2498:	0e 94 f7 09 	call	0x13ee	; 0x13ee <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    249c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    24a0:	80 ff       	sbrs	r24, 0
    24a2:	16 c0       	rjmp	.+44     	; 0x24d0 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    24a4:	80 91 e2 00 	lds	r24, 0x00E2
    24a8:	80 ff       	sbrs	r24, 0
    24aa:	12 c0       	rjmp	.+36     	; 0x24d0 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    24ac:	e2 ee       	ldi	r30, 0xE2	; 226
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	8e 7f       	andi	r24, 0xFE	; 254
    24b4:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    24b6:	80 81       	ld	r24, Z
    24b8:	80 61       	ori	r24, 0x10	; 16
    24ba:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    24bc:	e8 ed       	ldi	r30, 0xD8	; 216
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 62       	ori	r24, 0x20	; 32
    24c4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    24c6:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    24c8:	10 92 70 02 	sts	0x0270, r1
		EVENT_USB_Device_Disconnect();
    24cc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    24d0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    24d4:	84 ff       	sbrs	r24, 4
    24d6:	30 c0       	rjmp	.+96     	; 0x2538 <__vector_11+0xdc>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    24d8:	80 91 e2 00 	lds	r24, 0x00E2
    24dc:	84 ff       	sbrs	r24, 4
    24de:	2c c0       	rjmp	.+88     	; 0x2538 <__vector_11+0xdc>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    24e0:	84 e0       	ldi	r24, 0x04	; 4
    24e2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    24e4:	86 e0       	ldi	r24, 0x06	; 6
    24e6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    24e8:	09 b4       	in	r0, 0x29	; 41
    24ea:	00 fe       	sbrs	r0, 0
    24ec:	fd cf       	rjmp	.-6      	; 0x24e8 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    24ee:	e8 ed       	ldi	r30, 0xD8	; 216
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8f 7d       	andi	r24, 0xDF	; 223
    24f6:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    24f8:	e1 ee       	ldi	r30, 0xE1	; 225
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8f 7e       	andi	r24, 0xEF	; 239
    2500:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2502:	e2 ee       	ldi	r30, 0xE2	; 226
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	8f 7e       	andi	r24, 0xEF	; 239
    250a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    250c:	80 81       	ld	r24, Z
    250e:	81 60       	ori	r24, 0x01	; 1
    2510:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2512:	80 91 6c 02 	lds	r24, 0x026C
    2516:	88 23       	and	r24, r24
    2518:	21 f0       	breq	.+8      	; 0x2522 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	80 93 70 02 	sts	0x0270, r24
    2520:	09 c0       	rjmp	.+18     	; 0x2534 <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2522:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2526:	88 23       	and	r24, r24
    2528:	14 f4       	brge	.+4      	; 0x252e <__vector_11+0xd2>
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <__vector_11+0xd4>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 93 70 02 	sts	0x0270, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    2534:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2538:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    253c:	83 ff       	sbrs	r24, 3
    253e:	1e c0       	rjmp	.+60     	; 0x257c <__vector_11+0x120>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2540:	80 91 e2 00 	lds	r24, 0x00E2
    2544:	83 ff       	sbrs	r24, 3
    2546:	1a c0       	rjmp	.+52     	; 0x257c <__vector_11+0x120>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2548:	e1 ee       	ldi	r30, 0xE1	; 225
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	87 7f       	andi	r24, 0xF7	; 247
    2550:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	80 93 70 02 	sts	0x0270, r24
		USB_Device_ConfigurationNumber = 0;
    2558:	10 92 6c 02 	sts	0x026C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    255c:	80 81       	ld	r24, Z
    255e:	8e 7f       	andi	r24, 0xFE	; 254
    2560:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2562:	e2 ee       	ldi	r30, 0xE2	; 226
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8e 7f       	andi	r24, 0xFE	; 254
    256a:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    256c:	80 81       	ld	r24, Z
    256e:	80 61       	ori	r24, 0x10	; 16
    2570:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2572:	42 e2       	ldi	r20, 0x22	; 34
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	e9 dd       	rcall	.-1070   	; 0x214c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    257a:	8c d1       	rcall	.+792    	; 0x2894 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    257c:	ff 91       	pop	r31
    257e:	ef 91       	pop	r30
    2580:	bf 91       	pop	r27
    2582:	af 91       	pop	r26
    2584:	9f 91       	pop	r25
    2586:	8f 91       	pop	r24
    2588:	7f 91       	pop	r23
    258a:	6f 91       	pop	r22
    258c:	5f 91       	pop	r21
    258e:	4f 91       	pop	r20
    2590:	3f 91       	pop	r19
    2592:	2f 91       	pop	r18
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	1f 90       	pop	r1
    259c:	18 95       	reti

0000259e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	ac 97       	sbiw	r28, 0x2c	; 44
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    25b6:	e1 e7       	ldi	r30, 0x71	; 113
    25b8:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    25ba:	a1 ef       	ldi	r26, 0xF1	; 241
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	8c 91       	ld	r24, X

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    25c0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    25c2:	22 e0       	ldi	r18, 0x02	; 2
    25c4:	e9 37       	cpi	r30, 0x79	; 121
    25c6:	f2 07       	cpc	r31, r18
    25c8:	d1 f7       	brne	.-12     	; 0x25be <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    25ca:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    25ce:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    25d2:	83 ff       	sbrs	r24, 3
    25d4:	3a c1       	rjmp	.+628    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    25d6:	90 91 71 02 	lds	r25, 0x0271

		switch (USB_ControlRequest.bRequest)
    25da:	80 91 72 02 	lds	r24, 0x0272
    25de:	85 30       	cpi	r24, 0x05	; 5
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <USB_Device_ProcessControlRequest+0x46>
    25e2:	81 c0       	rjmp	.+258    	; 0x26e6 <USB_Device_ProcessControlRequest+0x148>
    25e4:	38 f4       	brcc	.+14     	; 0x25f4 <USB_Device_ProcessControlRequest+0x56>
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	d1 f1       	breq	.+116    	; 0x265e <USB_Device_ProcessControlRequest+0xc0>
    25ea:	70 f0       	brcs	.+28     	; 0x2608 <USB_Device_ProcessControlRequest+0x6a>
    25ec:	83 30       	cpi	r24, 0x03	; 3
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <USB_Device_ProcessControlRequest+0x54>
    25f0:	2c c1       	rjmp	.+600    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
    25f2:	35 c0       	rjmp	.+106    	; 0x265e <USB_Device_ProcessControlRequest+0xc0>
    25f4:	88 30       	cpi	r24, 0x08	; 8
    25f6:	09 f4       	brne	.+2      	; 0x25fa <USB_Device_ProcessControlRequest+0x5c>
    25f8:	f5 c0       	rjmp	.+490    	; 0x27e4 <USB_Device_ProcessControlRequest+0x246>
    25fa:	89 30       	cpi	r24, 0x09	; 9
    25fc:	09 f4       	brne	.+2      	; 0x2600 <USB_Device_ProcessControlRequest+0x62>
    25fe:	02 c1       	rjmp	.+516    	; 0x2804 <USB_Device_ProcessControlRequest+0x266>
    2600:	86 30       	cpi	r24, 0x06	; 6
    2602:	09 f0       	breq	.+2      	; 0x2606 <USB_Device_ProcessControlRequest+0x68>
    2604:	22 c1       	rjmp	.+580    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
    2606:	96 c0       	rjmp	.+300    	; 0x2734 <USB_Device_ProcessControlRequest+0x196>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2608:	90 38       	cpi	r25, 0x80	; 128
    260a:	21 f0       	breq	.+8      	; 0x2614 <USB_Device_ProcessControlRequest+0x76>
    260c:	92 38       	cpi	r25, 0x82	; 130
    260e:	09 f0       	breq	.+2      	; 0x2612 <USB_Device_ProcessControlRequest+0x74>
    2610:	1c c1       	rjmp	.+568    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
    2612:	08 c0       	rjmp	.+16     	; 0x2624 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2614:	80 91 6d 02 	lds	r24, 0x026D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2618:	90 91 6e 02 	lds	r25, 0x026E
    261c:	99 23       	and	r25, r25
    261e:	89 f0       	breq	.+34     	; 0x2642 <USB_Device_ProcessControlRequest+0xa4>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2620:	82 60       	ori	r24, 0x02	; 2
    2622:	0f c0       	rjmp	.+30     	; 0x2642 <USB_Device_ProcessControlRequest+0xa4>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2624:	80 91 75 02 	lds	r24, 0x0275
    2628:	90 91 76 02 	lds	r25, 0x0276
    262c:	8f 70       	andi	r24, 0x0F	; 15
    262e:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2630:	e9 ee       	ldi	r30, 0xE9	; 233
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2636:	80 91 eb 00 	lds	r24, 0x00EB
    263a:	85 fb       	bst	r24, 5
    263c:	88 27       	eor	r24, r24
    263e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2640:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2642:	e8 ee       	ldi	r30, 0xE8	; 232
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	90 81       	ld	r25, Z
    2648:	97 7f       	andi	r25, 0xF7	; 247
    264a:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    264c:	a1 ef       	ldi	r26, 0xF1	; 241
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    2652:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2654:	80 81       	ld	r24, Z
    2656:	8e 77       	andi	r24, 0x7E	; 126
    2658:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    265a:	43 de       	rcall	.-890    	; 0x22e2 <Endpoint_ClearStatusStage>
    265c:	f6 c0       	rjmp	.+492    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    265e:	99 23       	and	r25, r25
    2660:	09 f4       	brne	.+2      	; 0x2664 <USB_Device_ProcessControlRequest+0xc6>
    2662:	02 c1       	rjmp	.+516    	; 0x2868 <USB_Device_ProcessControlRequest+0x2ca>
    2664:	92 30       	cpi	r25, 0x02	; 2
    2666:	09 f0       	breq	.+2      	; 0x266a <USB_Device_ProcessControlRequest+0xcc>
    2668:	f0 c0       	rjmp	.+480    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
    266a:	03 c1       	rjmp	.+518    	; 0x2872 <USB_Device_ProcessControlRequest+0x2d4>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    266c:	91 e0       	ldi	r25, 0x01	; 1
    266e:	83 30       	cpi	r24, 0x03	; 3
    2670:	09 f0       	breq	.+2      	; 0x2674 <USB_Device_ProcessControlRequest+0xd6>
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	90 93 6e 02 	sts	0x026E, r25
    2678:	2d c0       	rjmp	.+90     	; 0x26d4 <USB_Device_ProcessControlRequest+0x136>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    267a:	80 91 75 02 	lds	r24, 0x0275
    267e:	90 91 76 02 	lds	r25, 0x0276
    2682:	8f 70       	andi	r24, 0x0F	; 15
    2684:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2686:	88 23       	and	r24, r24
    2688:	09 f4       	brne	.+2      	; 0x268c <USB_Device_ProcessControlRequest+0xee>
    268a:	df c0       	rjmp	.+446    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    268c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2690:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2694:	20 ff       	sbrs	r18, 0
    2696:	1e c0       	rjmp	.+60     	; 0x26d4 <USB_Device_ProcessControlRequest+0x136>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2698:	20 91 72 02 	lds	r18, 0x0272
    269c:	23 30       	cpi	r18, 0x03	; 3
    269e:	31 f4       	brne	.+12     	; 0x26ac <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    26a0:	eb ee       	ldi	r30, 0xEB	; 235
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	80 62       	ori	r24, 0x20	; 32
    26a8:	80 83       	st	Z, r24
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <USB_Device_ProcessControlRequest+0x136>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    26ac:	eb ee       	ldi	r30, 0xEB	; 235
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	90 81       	ld	r25, Z
    26b2:	90 61       	ori	r25, 0x10	; 16
    26b4:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    26b6:	21 e0       	ldi	r18, 0x01	; 1
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	a9 01       	movw	r20, r18
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <USB_Device_ProcessControlRequest+0x124>
    26be:	44 0f       	add	r20, r20
    26c0:	55 1f       	adc	r21, r21
    26c2:	8a 95       	dec	r24
    26c4:	e2 f7       	brpl	.-8      	; 0x26be <USB_Device_ProcessControlRequest+0x120>
    26c6:	aa ee       	ldi	r26, 0xEA	; 234
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	4c 93       	st	X, r20
				UERST = 0;
    26cc:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    26ce:	80 81       	ld	r24, Z
    26d0:	88 60       	ori	r24, 0x08	; 8
    26d2:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26d4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    26d8:	e8 ee       	ldi	r30, 0xE8	; 232
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	87 7f       	andi	r24, 0xF7	; 247
    26e0:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    26e2:	ff dd       	rcall	.-1026   	; 0x22e2 <Endpoint_ClearStatusStage>
    26e4:	b2 c0       	rjmp	.+356    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    26e6:	91 11       	cpse	r25, r1
    26e8:	b0 c0       	rjmp	.+352    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    26ea:	80 91 73 02 	lds	r24, 0x0273
    26ee:	90 91 74 02 	lds	r25, 0x0274
    26f2:	8f 77       	andi	r24, 0x7F	; 127
    26f4:	99 27       	eor	r25, r25
    26f6:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    26f8:	e3 ee       	ldi	r30, 0xE3	; 227
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	90 81       	ld	r25, Z
    26fe:	90 78       	andi	r25, 0x80	; 128
    2700:	89 2b       	or	r24, r25
    2702:	80 83       	st	Z, r24
    2704:	e8 ee       	ldi	r30, 0xE8	; 232
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	87 7f       	andi	r24, 0xF7	; 247
    270c:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    270e:	e9 dd       	rcall	.-1070   	; 0x22e2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2710:	e8 ee       	ldi	r30, 0xE8	; 232
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    2716:	80 ff       	sbrs	r24, 0
    2718:	fd cf       	rjmp	.-6      	; 0x2714 <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    271a:	e3 ee       	ldi	r30, 0xE3	; 227
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 68       	ori	r24, 0x80	; 128
    2722:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2724:	11 23       	and	r17, r17
    2726:	11 f0       	breq	.+4      	; 0x272c <USB_Device_ProcessControlRequest+0x18e>
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	01 c0       	rjmp	.+2      	; 0x272e <USB_Device_ProcessControlRequest+0x190>
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	80 93 70 02 	sts	0x0270, r24
    2732:	8b c0       	rjmp	.+278    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2734:	90 58       	subi	r25, 0x80	; 128
    2736:	92 30       	cpi	r25, 0x02	; 2
    2738:	08 f0       	brcs	.+2      	; 0x273c <USB_Device_ProcessControlRequest+0x19e>
    273a:	87 c0       	rjmp	.+270    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    273c:	80 91 73 02 	lds	r24, 0x0273
    2740:	90 91 74 02 	lds	r25, 0x0274
    2744:	8c 3d       	cpi	r24, 0xDC	; 220
    2746:	53 e0       	ldi	r21, 0x03	; 3
    2748:	95 07       	cpc	r25, r21
    274a:	99 f5       	brne	.+102    	; 0x27b2 <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2750:	8a e2       	ldi	r24, 0x2A	; 42
    2752:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2754:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2756:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    2758:	de 01       	movw	r26, r28
    275a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    275c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    275e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2760:	41 e2       	ldi	r20, 0x21	; 33
    2762:	e3 2f       	mov	r30, r19
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	40 93 57 00 	sts	0x0057, r20
    276a:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    276c:	20 ff       	sbrs	r18, 0
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <USB_Device_ProcessControlRequest+0x1d8>
					{
						SerialByte >>= 4;
    2770:	82 95       	swap	r24
    2772:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    2774:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2776:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2778:	8a 30       	cpi	r24, 0x0A	; 10
    277a:	18 f0       	brcs	.+6      	; 0x2782 <USB_Device_ProcessControlRequest+0x1e4>
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	c7 96       	adiw	r24, 0x37	; 55
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <USB_Device_ProcessControlRequest+0x1e8>
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	c0 96       	adiw	r24, 0x30	; 48
    2786:	8d 93       	st	X+, r24
    2788:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    278a:	2f 5f       	subi	r18, 0xFF	; 255
    278c:	24 31       	cpi	r18, 0x14	; 20
    278e:	49 f7       	brne	.-46     	; 0x2762 <USB_Device_ProcessControlRequest+0x1c4>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2790:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2792:	08 ee       	ldi	r16, 0xE8	; 232
    2794:	10 e0       	ldi	r17, 0x00	; 0
    2796:	f8 01       	movw	r30, r16
    2798:	80 81       	ld	r24, Z
    279a:	87 7f       	andi	r24, 0xF7	; 247
    279c:	80 83       	st	Z, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    279e:	6a e2       	ldi	r22, 0x2A	; 42
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	ce 01       	movw	r24, r28
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	7e db       	rcall	.-2308   	; 0x1ea4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    27a8:	f8 01       	movw	r30, r16
    27aa:	80 81       	ld	r24, Z
    27ac:	8b 77       	andi	r24, 0x7B	; 123
    27ae:	80 83       	st	Z, r24
    27b0:	4c c0       	rjmp	.+152    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    27b2:	ae 01       	movw	r20, r28
    27b4:	45 5d       	subi	r20, 0xD5	; 213
    27b6:	5f 4f       	sbci	r21, 0xFF	; 255
    27b8:	60 91 75 02 	lds	r22, 0x0275
    27bc:	0e 94 ba 00 	call	0x174	; 0x174 <CALLBACK_USB_GetDescriptor>
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <USB_Device_ProcessControlRequest+0x228>
    27c4:	42 c0       	rjmp	.+132    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27c6:	08 ee       	ldi	r16, 0xE8	; 232
    27c8:	10 e0       	ldi	r17, 0x00	; 0
    27ca:	f8 01       	movw	r30, r16
    27cc:	20 81       	ld	r18, Z
    27ce:	27 7f       	andi	r18, 0xF7	; 247
    27d0:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    27d2:	bc 01       	movw	r22, r24
    27d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    27d8:	42 dc       	rcall	.-1916   	; 0x205e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    27da:	f8 01       	movw	r30, r16
    27dc:	80 81       	ld	r24, Z
    27de:	8b 77       	andi	r24, 0x7B	; 123
    27e0:	80 83       	st	Z, r24
    27e2:	33 c0       	rjmp	.+102    	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    27e4:	90 38       	cpi	r25, 0x80	; 128
    27e6:	89 f5       	brne	.+98     	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27e8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	87 7f       	andi	r24, 0xF7	; 247
    27f0:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    27f2:	80 91 6c 02 	lds	r24, 0x026C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    27f6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    27fa:	80 81       	ld	r24, Z
    27fc:	8e 77       	andi	r24, 0x7E	; 126
    27fe:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2800:	70 dd       	rcall	.-1312   	; 0x22e2 <Endpoint_ClearStatusStage>
    2802:	23 c0       	rjmp	.+70     	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2804:	91 11       	cpse	r25, r1
    2806:	21 c0       	rjmp	.+66     	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2808:	80 91 73 02 	lds	r24, 0x0273
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	e8 f4       	brcc	.+58     	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2810:	e8 ee       	ldi	r30, 0xE8	; 232
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	87 7f       	andi	r24, 0xF7	; 247
    2818:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    281a:	80 91 73 02 	lds	r24, 0x0273
    281e:	80 93 6c 02 	sts	0x026C, r24

	Endpoint_ClearStatusStage();
    2822:	5f dd       	rcall	.-1346   	; 0x22e2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2824:	80 91 6c 02 	lds	r24, 0x026C
    2828:	88 23       	and	r24, r24
    282a:	21 f0       	breq	.+8      	; 0x2834 <USB_Device_ProcessControlRequest+0x296>
	  USB_DeviceState = DEVICE_STATE_Configured;
    282c:	84 e0       	ldi	r24, 0x04	; 4
    282e:	80 93 70 02 	sts	0x0270, r24
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <USB_Device_ProcessControlRequest+0x2a8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2834:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2838:	88 23       	and	r24, r24
    283a:	14 f4       	brge	.+4      	; 0x2840 <USB_Device_ProcessControlRequest+0x2a2>
    283c:	84 e0       	ldi	r24, 0x04	; 4
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <USB_Device_ProcessControlRequest+0x2a4>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	80 93 70 02 	sts	0x0270, r24

	EVENT_USB_Device_ConfigurationChanged();
    2846:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    284a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    284e:	83 ff       	sbrs	r24, 3
    2850:	16 c0       	rjmp	.+44     	; 0x287e <USB_Device_ProcessControlRequest+0x2e0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2852:	e8 ee       	ldi	r30, 0xE8	; 232
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	87 7f       	andi	r24, 0xF7	; 247
    285a:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    285c:	eb ee       	ldi	r30, 0xEB	; 235
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	80 62       	ori	r24, 0x20	; 32
    2864:	80 83       	st	Z, r24
    2866:	0b c0       	rjmp	.+22     	; 0x287e <USB_Device_ProcessControlRequest+0x2e0>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2868:	90 91 73 02 	lds	r25, 0x0273
    286c:	91 30       	cpi	r25, 0x01	; 1
    286e:	69 f7       	brne	.-38     	; 0x284a <USB_Device_ProcessControlRequest+0x2ac>
    2870:	fd ce       	rjmp	.-518    	; 0x266c <USB_Device_ProcessControlRequest+0xce>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2872:	80 91 73 02 	lds	r24, 0x0273
    2876:	88 23       	and	r24, r24
    2878:	09 f4       	brne	.+2      	; 0x287c <USB_Device_ProcessControlRequest+0x2de>
    287a:	ff ce       	rjmp	.-514    	; 0x267a <USB_Device_ProcessControlRequest+0xdc>
    287c:	2b cf       	rjmp	.-426    	; 0x26d4 <USB_Device_ProcessControlRequest+0x136>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    287e:	ac 96       	adiw	r28, 0x2c	; 44
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	08 95       	ret

00002894 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2894:	08 95       	ret

00002896 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2896:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2898:	80 91 70 02 	lds	r24, 0x0270
    289c:	88 23       	and	r24, r24
    289e:	a1 f0       	breq	.+40     	; 0x28c8 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    28a0:	c0 91 e9 00 	lds	r28, 0x00E9
    28a4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    28a6:	80 91 ec 00 	lds	r24, 0x00EC
    28aa:	80 ff       	sbrs	r24, 0
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <USB_USBTask+0x1c>
    28ae:	80 e8       	ldi	r24, 0x80	; 128
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <USB_USBTask+0x1e>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    28b4:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    28b6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28ba:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    28be:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    28c0:	6e de       	rcall	.-804    	; 0x259e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    28c2:	cf 70       	andi	r28, 0x0F	; 15
    28c4:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    28c8:	cf 91       	pop	r28
    28ca:	08 95       	ret

000028cc <__udivmodsi4>:
    28cc:	a1 e2       	ldi	r26, 0x21	; 33
    28ce:	1a 2e       	mov	r1, r26
    28d0:	aa 1b       	sub	r26, r26
    28d2:	bb 1b       	sub	r27, r27
    28d4:	fd 01       	movw	r30, r26
    28d6:	0d c0       	rjmp	.+26     	; 0x28f2 <__udivmodsi4_ep>

000028d8 <__udivmodsi4_loop>:
    28d8:	aa 1f       	adc	r26, r26
    28da:	bb 1f       	adc	r27, r27
    28dc:	ee 1f       	adc	r30, r30
    28de:	ff 1f       	adc	r31, r31
    28e0:	a2 17       	cp	r26, r18
    28e2:	b3 07       	cpc	r27, r19
    28e4:	e4 07       	cpc	r30, r20
    28e6:	f5 07       	cpc	r31, r21
    28e8:	20 f0       	brcs	.+8      	; 0x28f2 <__udivmodsi4_ep>
    28ea:	a2 1b       	sub	r26, r18
    28ec:	b3 0b       	sbc	r27, r19
    28ee:	e4 0b       	sbc	r30, r20
    28f0:	f5 0b       	sbc	r31, r21

000028f2 <__udivmodsi4_ep>:
    28f2:	66 1f       	adc	r22, r22
    28f4:	77 1f       	adc	r23, r23
    28f6:	88 1f       	adc	r24, r24
    28f8:	99 1f       	adc	r25, r25
    28fa:	1a 94       	dec	r1
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <__udivmodsi4_loop>
    28fe:	60 95       	com	r22
    2900:	70 95       	com	r23
    2902:	80 95       	com	r24
    2904:	90 95       	com	r25
    2906:	9b 01       	movw	r18, r22
    2908:	ac 01       	movw	r20, r24
    290a:	bd 01       	movw	r22, r26
    290c:	cf 01       	movw	r24, r30
    290e:	08 95       	ret

00002910 <__divmodsi4>:
    2910:	05 2e       	mov	r0, r21
    2912:	97 fb       	bst	r25, 7
    2914:	16 f4       	brtc	.+4      	; 0x291a <__divmodsi4+0xa>
    2916:	00 94       	com	r0
    2918:	06 d0       	rcall	.+12     	; 0x2926 <__divmodsi4_neg1>
    291a:	57 fd       	sbrc	r21, 7
    291c:	0c d0       	rcall	.+24     	; 0x2936 <__divmodsi4_neg2>
    291e:	d6 df       	rcall	.-84     	; 0x28cc <__udivmodsi4>
    2920:	07 fc       	sbrc	r0, 7
    2922:	09 d0       	rcall	.+18     	; 0x2936 <__divmodsi4_neg2>
    2924:	7e f4       	brtc	.+30     	; 0x2944 <__divmodsi4_exit>

00002926 <__divmodsi4_neg1>:
    2926:	90 95       	com	r25
    2928:	80 95       	com	r24
    292a:	70 95       	com	r23
    292c:	61 95       	neg	r22
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	8f 4f       	sbci	r24, 0xFF	; 255
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	08 95       	ret

00002936 <__divmodsi4_neg2>:
    2936:	50 95       	com	r21
    2938:	40 95       	com	r20
    293a:	30 95       	com	r19
    293c:	21 95       	neg	r18
    293e:	3f 4f       	sbci	r19, 0xFF	; 255
    2940:	4f 4f       	sbci	r20, 0xFF	; 255
    2942:	5f 4f       	sbci	r21, 0xFF	; 255

00002944 <__divmodsi4_exit>:
    2944:	08 95       	ret

00002946 <memcmp>:
    2946:	fb 01       	movw	r30, r22
    2948:	dc 01       	movw	r26, r24
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <memcmp+0xe>
    294c:	8d 91       	ld	r24, X+
    294e:	01 90       	ld	r0, Z+
    2950:	80 19       	sub	r24, r0
    2952:	21 f4       	brne	.+8      	; 0x295c <memcmp+0x16>
    2954:	41 50       	subi	r20, 0x01	; 1
    2956:	50 40       	sbci	r21, 0x00	; 0
    2958:	c8 f7       	brcc	.-14     	; 0x294c <memcmp+0x6>
    295a:	88 1b       	sub	r24, r24
    295c:	99 0b       	sbc	r25, r25
    295e:	08 95       	ret

00002960 <memcpy>:
    2960:	fb 01       	movw	r30, r22
    2962:	dc 01       	movw	r26, r24
    2964:	02 c0       	rjmp	.+4      	; 0x296a <memcpy+0xa>
    2966:	01 90       	ld	r0, Z+
    2968:	0d 92       	st	X+, r0
    296a:	41 50       	subi	r20, 0x01	; 1
    296c:	50 40       	sbci	r21, 0x00	; 0
    296e:	d8 f7       	brcc	.-10     	; 0x2966 <memcpy+0x6>
    2970:	08 95       	ret

00002972 <memset>:
    2972:	dc 01       	movw	r26, r24
    2974:	01 c0       	rjmp	.+2      	; 0x2978 <memset+0x6>
    2976:	6d 93       	st	X+, r22
    2978:	41 50       	subi	r20, 0x01	; 1
    297a:	50 40       	sbci	r21, 0x00	; 0
    297c:	e0 f7       	brcc	.-8      	; 0x2976 <memset+0x4>
    297e:	08 95       	ret

00002980 <__eerd_byte_m16u2>:
    2980:	f9 99       	sbic	0x1f, 1	; 31
    2982:	fe cf       	rjmp	.-4      	; 0x2980 <__eerd_byte_m16u2>
    2984:	92 bd       	out	0x22, r25	; 34
    2986:	81 bd       	out	0x21, r24	; 33
    2988:	f8 9a       	sbi	0x1f, 0	; 31
    298a:	99 27       	eor	r25, r25
    298c:	80 b5       	in	r24, 0x20	; 32
    298e:	08 95       	ret

00002990 <__eerd_word_m16u2>:
    2990:	a8 e1       	ldi	r26, 0x18	; 24
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	42 e0       	ldi	r20, 0x02	; 2
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	13 c0       	rjmp	.+38     	; 0x29c0 <__eerd_blraw_m16u2>

0000299a <__eewr_byte_m16u2>:
    299a:	26 2f       	mov	r18, r22

0000299c <__eewr_r18_m16u2>:
    299c:	f9 99       	sbic	0x1f, 1	; 31
    299e:	fe cf       	rjmp	.-4      	; 0x299c <__eewr_r18_m16u2>
    29a0:	1f ba       	out	0x1f, r1	; 31
    29a2:	92 bd       	out	0x22, r25	; 34
    29a4:	81 bd       	out	0x21, r24	; 33
    29a6:	20 bd       	out	0x20, r18	; 32
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	fa 9a       	sbi	0x1f, 2	; 31
    29ae:	f9 9a       	sbi	0x1f, 1	; 31
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	08 95       	ret

000029b6 <__eewr_word_m16u2>:
    29b6:	f1 df       	rcall	.-30     	; 0x299a <__eewr_byte_m16u2>
    29b8:	27 2f       	mov	r18, r23
    29ba:	f0 cf       	rjmp	.-32     	; 0x299c <__eewr_r18_m16u2>

000029bc <__eerd_block_m16u2>:
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22

000029c0 <__eerd_blraw_m16u2>:
    29c0:	fc 01       	movw	r30, r24
    29c2:	f9 99       	sbic	0x1f, 1	; 31
    29c4:	fe cf       	rjmp	.-4      	; 0x29c2 <__eerd_blraw_m16u2+0x2>
    29c6:	06 c0       	rjmp	.+12     	; 0x29d4 <__eerd_blraw_m16u2+0x14>
    29c8:	f2 bd       	out	0x22, r31	; 34
    29ca:	e1 bd       	out	0x21, r30	; 33
    29cc:	f8 9a       	sbi	0x1f, 0	; 31
    29ce:	31 96       	adiw	r30, 0x01	; 1
    29d0:	00 b4       	in	r0, 0x20	; 32
    29d2:	0d 92       	st	X+, r0
    29d4:	41 50       	subi	r20, 0x01	; 1
    29d6:	50 40       	sbci	r21, 0x00	; 0
    29d8:	b8 f7       	brcc	.-18     	; 0x29c8 <__eerd_blraw_m16u2+0x8>
    29da:	08 95       	ret

000029dc <_exit>:
    29dc:	f8 94       	cli

000029de <__stop_program>:
    29de:	ff cf       	rjmp	.-2      	; 0x29de <__stop_program>
